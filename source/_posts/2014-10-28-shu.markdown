---
layout: post
title: "二叉查找树转双向链表"
date: 2014-10-28 10:11:11 +0800
comments: true
categories: datastruct-tree
---


<font color='red'>问题：</font> 将一棵二叉查找树转换成一个排好序的双向链表。  
<font color='red'>要求：</font> 不能创建新节点，只能调整指针指向。

---
<font color='blue'>分析：</font> 关键是看如何遍历二叉查找树，要按顺序访问的话只能用深度优先遍历了。  
<font color='blue'>补充：</font> 树遍历就是按某种顺序对树中每个结点访问且只能访问一次的过程，本质上是将非线性结构线性化。访问的含义很广，如查询、计算、修改、输出结点的值。  
树的遍历分为深度优先遍历（含先序，中序，后序），广度优先遍历。用递归（使用函数调用栈）实现深度优先遍历，用栈实现广度优先遍历。

---
<font color='green'>解法1：</font> 中序遍历二叉查找树，较小的节点先访问。第一个访问的节点作为链表第一个节点，往后每访问一个节点就将其附加到链表的尾部。  
<font color='green'>解法2：</font> 先序遍历二叉查找树（还必须加上递归思想：将左子树和右子树分别抽象为一个节点）。第一个访问的是根节点的左子树（递归处理左子树，将其看作是一个已经转换好的前面部分的链表），然后是根节点（将其看作是链表中间某位置的节点），最后是根节点的右子树（递归处理右子树，将其看作是一个已经转换好的后面部分的链表）。最后将这三个部分依次连接起来就行了：左子树的最右节点与根节点相连，根节点再和右子树的最左节点相连。



