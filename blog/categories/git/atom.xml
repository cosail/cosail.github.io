<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | cosail's blog]]></title>
  <link href="http://cosail.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://cosail.github.io/"/>
  <updated>2014-10-14T22:15:29+08:00</updated>
  <id>http://cosail.github.io/</id>
  <author>
    <name><![CDATA[cosail]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git概述]]></title>
    <link href="http://cosail.github.io/blog/2014/10/12/git-start/"/>
    <updated>2014-10-12T20:16:46+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/12/git-start</id>
    <content type="html"><![CDATA[<blockquote><p>以下是阅读《Pro Git》时的记录<br/>
《Pro Git》Scott Chacon 2010, licensed under the Creative Commons Attribution-Non Commercial-Share Alike 3.0 license.</p></blockquote>

<h3>版本控制系统（VCS）</h3>

<p>VCS的主要作用：记录文件的变化，保存项目过去某些时间点的状态，回溯到之前的状态。<br/>
<code>即保存和恢复数据。</code></p>

<ul>
<li><p>本地版本控制系统: 保存并管理文件补丁（文件内容前后的变化），不断打补丁。<br/>
<code>自己在自己的电脑上干自己的事。</code></p></li>
<li><p>集中化版本控制系统（CVCS）：单一的集中管理服务器保存所有文件的修订版本。<br/>
<code>可有多人用客户端访问中央服务器，取出文件，提交更新，协同合作。
  若中央服务器故障，则可能丢失数据，且大家都无法在故障时段提交更新。</code></p></li>
<li><p>分布式版本控制系统（DVCS）：  客户端有代码仓库的完整镜像，和服务器一样掌握所有必要信息。<br/>
<code>大家可以在自己电脑上提交（异步），必要时推到服务器（同步）。</code></p></li>
</ul>


<h3>Git的特点</h3>

<ul>
<li><p>直接给更新的文件作快照，并保存快照的索引。<br/>
<code>而不是像其他CVS一样每次仅仅记录变化的部分</code></p></li>
<li><p>本地保存更新历史，断网时可以向本机提交更新。<br/>
<code>Subversion和CVS断网时无法提交更新，因为仓库数据在服务器上维护着，本机信息不足。</code></p></li>
<li><p>保持数据完整性<br/>
<code>保存文件或目录需要先计算校验和（使用SHA-1算法计算出的一个哈希值，作为指纹），并将结果作为唯一标识及索引。你动了哪里，Git就会知道。</code></p></li>
<li><p>高可靠性<br/>
<code>在Git，只要在本机提交后（本机操作很方便快捷），就不必担心弄丢弄乱数据了（可在本机恢复）；若再定期推送到远端仓库的话，就更保险了。</code></p></li>
<li><p>git三状态：已修改，已暂存(staged)，已提交。</p>

<ul>
<li>已修改：修改了某文件</li>
<li>已暂存：把已修改文件列为下次要提交的文件</li>
<li>已提交：文件已安全地保存在本机数据库中</li>
</ul>
</li>
</ul>


<p>基本的 Git 工作流程如下所示:</p>

<ol>
<li><p>在工作目录中修改某些文件。
<code>工作目录中的文件实际上都是从 git 目录中的压缩对象数据库中提取出来的，我们在工作目录中编辑文件。</code></p></li>
<li><p>对这些修改了的文件作快照,并保存到暂存区域。<br/>
<code>暂存区其实是个索引文件，放在 git 目录中。</code></p></li>
<li><p>提交更新,将保存在暂存区域的文件快照转储到 git 目录中。   <br/>
<code>每个项目有一个.git/目录，是保存元数据和对象数据库的地方。克隆仓库时拷贝的就是里边的数据。</code></p></li>
</ol>


<h3>初次配置Git</h3>

<p>Git 有专门用来配置和读取相应工作环境变量的工具： git config 命令（实际调用 git-config 命令）。</p>

<p>环境变量们住在这里：</p>

<ol>
<li><p>/etc/gitconfig：系统中对所有用户都普遍适用的配置。<br/>
<code>git config 用 --system 选项, 读写这个文件。</code></p></li>
<li><p>~/.gitconfig：用户目录下的配置文件只适用于该用户。<br/>
<code>git config 用 --global 选项, 读写这个文件。</code></p></li>
<li><p>当前项目的 .git/config ：这里的配置仅仅针对当前项目有效。</p></li>
</ol>


<p><strong><em>每一个级别的配置都会覆盖上层的相同配置, 所以.git/config 里的配置会覆盖 前两者中的同名变量。</em></strong></p>

<ul>
<li><p>设置用户信息：用户名称，邮件地址
<code>
$ git config --global user.name "username"
$ git config --global user.email username@126.com
// --global表示更改的是用户住目录中的配置文件，去掉该选项则修改的是当前项目的配置文件。
</code>
<code>每次 Git 提交时会说明是谁提交了更新, 随之纳入历史记录。</code></p></li>
<li><p>设置文本编辑器
<code>
$ git config --global core.editor vi
</code>
<code>有时 Git 会提示你输入，这时会调用这里的文本编辑器。</code></p></li>
<li><p>设置差异分析工具
<code>
$ git config --global merge.tool vimdiff
</code>
<code>在解决合并冲突时会使用差异分析工具，Git 可以理解 kdiff3,tkdiff,meld,xxdiff,emerge,vimdiff,gvimdiff,ecmerge,
，opendiff 等合并工具的输出信息。</code></p></li>
<li><p>查看配置信息
<code>
git config --list
</code>
<code>若有重复的变量名, 说明它们来自不同的配置文件,  Git 实际采用的是最后一个。</code></p></li>
</ul>


<p>也可以直接查阅某个环境变量的设定：<br/>
<code>
$ git config user.name
</code></p>

<h3>Git 帮助命令</h3>

<pre><code>$ git help &lt;verb&gt;
$ git &lt;verb&gt; --help
$ man git-&lt;verb&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
