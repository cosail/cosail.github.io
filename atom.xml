<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[cosail's blog]]></title>
  <link href="http://cosail.github.io/atom.xml" rel="self"/>
  <link href="http://cosail.github.io/"/>
  <updated>2014-10-31T08:37:52+08:00</updated>
  <id>http://cosail.github.io/</id>
  <author>
    <name><![CDATA[cosail]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git分支]]></title>
    <link href="http://cosail.github.io/blog/2014/10/30/gitfen-zhi/"/>
    <updated>2014-10-30T16:05:13+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/30/gitfen-zhi</id>
    <content type="html"><![CDATA[<blockquote><p>以下是阅读《Pro Git》时的记录<br/>
《Pro Git》Scott Chacon 2010, licensed under the Creative Commons Attribution-Non Commercial-Share Alike 3.0 license.</p></blockquote>

<h3>1.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线段(区间)树]]></title>
    <link href="http://cosail.github.io/blog/2014/10/28/qu-jian-xian-duan-shu/"/>
    <updated>2014-10-28T19:53:48+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/28/qu-jian-xian-duan-shu</id>
    <content type="html"><![CDATA[<p><strong>线段树</strong>是一棵二叉树，其每一个节点表示了一个区间[a, b]；每一层中所有节点表示的区间互不重叠，其并都为整个区间范围。</p>

<p><font color='blue'>特点：</font> 每一个叶子节点表示一个不可再分的单位区间；若一个非叶子节点表是区间[a, b]，则其左子节点表示[a, (a+b)/2]，右子节点表示((a+b)/2，b]。<br/>
其实是进行了二分，所以线段树是一棵平衡树，其深度不超过 lg(L)，L为最长区间长度。</p>

<p><font color='blue'>应用：</font> 线段树适合用来处理有关区间统计的问题：按区间划分，修改，特别是需要经常进行查找操作时。</p>

<p><font color='red'>题1：</font> 求序列 a1a2&hellip;an 的任意一个子序列 ai&hellip;aj 的和，同时允许动态修改每个元素的值？<br/>
<font color='green'>解：</font> 构造一棵区间树，其根节点表示区间[a1, an]，每个节点里再加上额外字段 sum 来表示区间里所有数的和。<br/>
对于求子序列和：找到子序列覆盖的所有子区间，把这些子区间对应的 sum 累加。那怎么去累加呢？一是用递归；二是遍历这段被覆盖的区域。<br/>
对于修改元素值：与区间两端值作比较，往下找到元素所在的节点；然后修改元素值；最后往上更新每个节点的 sum 值，直到根节点。</p>

<p><font color='red'>变形：</font> 求序列 a1a2&hellip;an 的任意一个子序列 ai&hellip;aj 的和，同时允许对某个子序列中所有元素的值都增加 k？<br/>
<font color='green'>解：</font> 若像题1一样逐个修改元素值，则工作量有点大。若这种操作很经常的话，可以在为每个节点加一个额外字段 inc 来表示该节点对应区间中每个值的增量。求和时只需加上 inc * 区间元素个数。当然，查找元素时别忘了带着增量往下走。</p>

<p><font color='red'>题2：</font> 求序列 a1a2&hellip;an 的任意一个子序列 ai&hellip;aj 中最大元素与最小元素值的差？<br/>
<font color='green'>解：</font> 类似题1，每个节点里再加上两个额外字段 min,max 来表示区间里最小元素值，最大元素值。<br/>
找到子序列覆盖的所有子区间，从这些子区间中找出最大值和最小值，再相减。</p>

<p><font color='red'>题3：</font> 苹果树。一棵苹果树上每个分叉点（二叉）及末梢可能有苹果(最多1个)，每次可以摘掉一个苹果，或有一个苹果新长出来，随时查询某块树枝（某个分叉点往上的子树）上，一共有多少个苹果。<br/>
<font color='green'>解：</font> 该题关键要看到，每个非叶子节点上也是会长苹果的。深度优先遍历整个苹果树，为每个节点标记一个序号（1~n），一个值为 0 或 1 的 apple 字段（可变化），一个 sum 字段。某个节点往上对应树枝上的苹果数即该节点里的 apple + sum 值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉查找树转双向链表]]></title>
    <link href="http://cosail.github.io/blog/2014/10/28/shu/"/>
    <updated>2014-10-28T10:11:11+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/28/shu</id>
    <content type="html"><![CDATA[<p><font color='red'>问题：</font> 将一棵二叉查找树转换成一个排好序的双向链表。<br/>
<font color='red'>要求：</font> 不能创建新节点，只能调整指针指向。</p>

<hr />

<p><font color='blue'>分析：</font> 关键是看如何遍历二叉查找树，要按顺序访问的话只能用深度优先遍历了。<br/>
<font color='blue'>补充：</font> 树遍历就是按某种顺序对树中每个结点访问且只能访问一次的过程，本质上是将非线性结构线性化。访问的含义很广，如查询、计算、修改、输出结点的值。<br/>
树的遍历分为深度优先遍历（含先序，中序，后序），广度优先遍历。用递归（使用函数调用栈）实现深度优先遍历，用栈实现广度优先遍历。</p>

<hr />

<p><font color='green'>解法1：</font> 中序遍历二叉查找树，较小的节点先访问。第一个访问的节点作为链表第一个节点，往后每访问一个节点就将其附加到链表的尾部。<br/>
<font color='green'>解法2：</font> 先序遍历二叉查找树（还必须加上递归思想：将左子树和右子树分别抽象为一个节点）。第一个访问的是根节点的左子树（递归处理左子树，将其看作是一个已经转换好的前面部分的链表），然后是根节点（将其看作是链表中间某位置的节点），最后是根节点的右子树（递归处理右子树，将其看作是一个已经转换好的后面部分的链表）。最后将这三个部分依次连接起来就行了：左子树的最右节点与根节点相连，根节点再和右子树的最左节点相连。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown格式]]></title>
    <link href="http://cosail.github.io/blog/2014/10/25/markdownge-shi/"/>
    <updated>2014-10-25T21:23:16+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/25/markdownge-shi</id>
    <content type="html"><![CDATA[<p>Markdown是一个Web上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此很多人用它写博客。</p>

<hr />

<h2><font color="green">1. 下面为简单使用介绍:</font> </h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## 1. 标题
</span><span class='line'>
</span><span class='line'>使用#，可表示1-6级标题。
</span><span class='line'>
</span><span class='line'># 一级标题
</span><span class='line'>###### 六级标题
</span><span class='line'>
</span><span class='line'>## 2. 段落
</span><span class='line'>
</span><span class='line'>段落的前后要有空行，所谓的空行是指没有文字内容.
</span><span class='line'>若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。
</span><span class='line'>
</span><span class='line'>## 3. 区块引用
</span><span class='line'>
</span><span class='line'>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：
</span><span class='line'>&gt;区块引用
</span><span class='line'>&gt;&gt;嵌套引用
</span><span class='line'>
</span><span class='line'>## 4. 代码区块
</span><span class='line'>
</span><span class='line'>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如 普通段落：
</span><span class='line'>普通
</span><span class='line'>void main()
</span><span class='line'>{
</span><span class='line'>printf("Hello, Markdown.");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>代码区块：
</span><span class='line'>
</span><span class='line'>    代码
</span><span class='line'>    void main()
</span><span class='line'>    {
</span><span class='line'>      printf("Hei, you.");
</span><span class='line'>    }
</span><span class='line'>注意:顶端需要和普通段落之间存在空行。
</span><span class='line'>
</span><span class='line'>## 5. 强调
</span><span class='line'>
</span><span class='line'>在强调内容两侧分别加上*或者_，如:  
</span><span class='line'>
</span><span class='line'>*斜体*，_斜体_  
</span><span class='line'>**粗体**，__粗体__  
</span><span class='line'>***粗斜体***，___粗斜体___
</span><span class='line'>
</span><span class='line'>## 6. 列表
</span><span class='line'>
</span><span class='line'>使用-、+、或*标记无序列表，如：
</span><span class='line'>- 1.1
</span><span class='line'>- 1.2
</span><span class='line'>+ 1.1
</span><span class='line'>+ 1.2
</span><span class='line'>* 1.1
</span><span class='line'>* 1.2  
</span><span class='line'>注意：标记后面最少有一个空格或制表符。
</span><span class='line'>
</span><span class='line'>有序列表的标记方式是将上述的符号换成数字,并辅以.，如:
</span><span class='line'>
</span><span class='line'>1. 貌似和纯文本没区别
</span><span class='line'>2. 但复制一下就知道还是有区别的  
</span><span class='line'>注意:顶端需要和普通段落之间存在空行。
</span><span class='line'>
</span><span class='line'>## 7. 分割线
</span><span class='line'>
</span><span class='line'>分割线最常使用就是三个或以上*，还可以使用-和_。
</span><span class='line'>***
</span><span class='line'>一区1:
</span><span class='line'>******
</span><span class='line'>一区2
</span><span class='line'>***
</span><span class='line'>
</span><span class='line'>------------------
</span><span class='line'>二区1:
</span><span class='line'>---
</span><span class='line'>二区2
</span><span class='line'>------------------
</span><span class='line'>
</span><span class='line'>## 8. 链接
</span><span class='line'>
</span><span class='line'>链接可以由两种形式生成：行内式和参考式。 行内式：  
</span><span class='line'>    [百度](http://www.baidu.com "Markdown")。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>参考式：  
</span><span class='line'>[百度][1]  
</span><span class='line'>[百度][2]
</span><span class='line'>[1]:http://www.baidu.com "Markdown"
</span><span class='line'>[2]:http://www.baidu.com "Markdown"  
</span><span class='line'>注意：上述的[1]:http://www.baidu.com "Markdown"不要出现在区块中。
</span><span class='line'>
</span><span class='line'>## 9. 图片
</span><span class='line'>
</span><span class='line'>添加图片的形式和链接相似，只需在链接的基础上前方加一个'！'。
</span><span class='line'>
</span><span class='line'>![](http://cosail.github.io/images/chairTree.jpg)
</span><span class='line'>
</span><span class='line'>## 10. 符号'`', '\'
</span><span class='line'>
</span><span class='line'>'`'起到标记作用。如：
</span><span class='line'>
</span><span class='line'>`ctrl+a`
</span><span class='line'>
</span><span class='line'>'\'相当于反转义作用。使符号成为普通符号。  
</span><span class='line'>\*普通\*
</span><span class='line'>
</span><span class='line'>## 参考:
</span><span class='line'>[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown)
</span><span class='line'>## 链接:
</span><span class='line'>[在线Markdown编辑](https://www.zybuluo.com/mdeditor)  
</span><span class='line'>[CommonMark](http://commonmark.org/): A strongly specified, highly compatible implementation of Markdown.  
</span><span class='line'>[The official specification for CommonMark. ](http://jgm.github.io/stmd/spec.html)
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2><font color="green">2. 对应上面代码的显示效果如下:</font> </h2>

<h2>1. 标题</h2>

<p>使用#，可表示1-6级标题。</p>

<h1>一级标题</h1>

<h6>六级标题</h6>

<h2>2. 段落</h2>

<p>段落的前后要有空行，所谓的空行是指没有文字内容.
若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。</p>

<h2>3. 区块引用</h2>

<p>在段落的每行或者只在第一行使用符号>,还可使用多个嵌套引用，如：</p>

<blockquote><p>区块引用</p>

<blockquote><p>嵌套引用</p></blockquote></blockquote>

<h2>4. 代码区块</h2>

<p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如 普通段落：
普通
void main()
{
printf(&ldquo;Hello, Markdown.&rdquo;);
}</p>

<p>代码区块：</p>

<pre><code>代码
void main()
{
  printf("Hei, you.");
}
</code></pre>

<p>注意:顶端需要和普通段落之间存在空行。</p>

<h2>5. 强调</h2>

<p>在强调内容两侧分别加上*或者_，如:</p>

<p><em>斜体</em>，<em>斜体</em><br/>
<strong>粗体</strong>，<strong>粗体</strong><br/>
<strong><em>粗斜体</em></strong>，<strong><em>粗斜体</em></strong></p>

<h2>6. 列表</h2>

<p>使用-、+、或*标记无序列表，如：
- 1.1
- 1.2
+ 1.1
+ 1.2
* 1.1
* 1.2<br/>
注意：标记后面最少有一个空格或制表符。</p>

<p>有序列表的标记方式是将上述的符号换成数字,并辅以.，如:</p>

<ol>
<li>貌似和纯文本没区别</li>
<li>但复制一下就知道还是有区别的<br/>
注意:顶端需要和普通段落之间存在空行。</li>
</ol>


<h2>7. 分割线</h2>

<p>分割线最常使用就是三个或以上*，还可以使用-和_。</p>

<hr />

<p>一区1:</p>

<hr />

<p>一区2</p>

<hr />

<hr />

<h2>二区1:</h2>

<h2>二区2</h2>

<h2>8. 链接</h2>

<p>链接可以由两种形式生成：行内式和参考式。 行内式：<br/>
    <a href="http://www.baidu.com" title="Markdown">百度</a>。</p>

<p>参考式：<br/>
<a href="http://www.baidu.com" title="Markdown">百度</a><br/>
<a href="http://www.baidu.com" title="Markdown">百度</a>
注意：上述的<a href="http://www.baidu.com" title="Markdown">1</a>:<a href="http://www.baidu.com">http://www.baidu.com</a> &ldquo;Markdown&#8221;不要出现在区块中。</p>

<h2>9. 图片</h2>

<p>添加图片的形式和链接相似，只需在链接的基础上前方加一个&#8217;！&#8217;。</p>

<p><img src="http://cosail.github.io/images/chairTree.jpg" alt="" /></p>

<h2>10. 符号&#8217;`&lsquo;, &rsquo;&#39;</h2>

<p>&lsquo;`&#8217;起到标记作用。如：</p>

<p><code>ctrl+a</code></p>

<p>&lsquo;&#39;相当于反转义作用。使符号成为普通符号。<br/>
*普通*</p>

<h2>参考:</h2>

<p><a href="https://github.com/younghz/Markdown">https://github.com/younghz/Markdown</a></p>

<h2>链接:</h2>

<p><a href="https://www.zybuluo.com/mdeditor">在线Markdown编辑</a><br/>
<a href="http://commonmark.org/">CommonMark</a>: A strongly specified, highly compatible implementation of Markdown.<br/>
<a href="http://jgm.github.io/stmd/spec.html">The official specification for CommonMark. </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git基础操作]]></title>
    <link href="http://cosail.github.io/blog/2014/10/14/gitji-chu-cao-zuo/"/>
    <updated>2014-10-14T10:34:40+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/14/gitji-chu-cao-zuo</id>
    <content type="html"><![CDATA[<blockquote><p>以下是阅读《Pro Git》时的记录<br/>
《Pro Git》Scott Chacon 2010, licensed under the Creative Commons Attribution-Non Commercial-Share Alike 3.0 license.</p></blockquote>

<h3>1. 取得项目的 Git 仓库</h3>

<p>有两种取得Git仓库的方法：1.对已有项目创建新的Git仓库；2.克隆已有的Git仓库。</p>

<h5>1.1 从项目目录初始化</h5>

<ul>
<li>开始用Git管理当前项目，在项目目录下执行：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init</span></code></pre></td></tr></table></div></figure>


<p><code>初始化后会在当前目录下增加 .git 目录，但还没有跟踪项目任何文件。</code></p>

<ul>
<li>将几个文件纳入版本控制</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add *.c
</span><span class='line'>$ git add README
</span><span class='line'>$ git commit -m 'initial project version'</span></code></pre></td></tr></table></div></figure>


<h5>1.2 从已有仓库克隆</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/user/repo.git</span></code></pre></td></tr></table></div></figure>


<p><code>在当前目录下创建repo目录，里面装着克隆过来的项目仓库。</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/user/repo.git myrepo</span></code></pre></td></tr></table></div></figure>


<p><code>和上一条命令一样，但明确指定创建的目录名为myrepo。</code></p>

<p>另外 Git 还支持其他传输协议，如http,https,SSH：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone http://github.com/user/repo.git
</span><span class='line'>$ git clone user@server:/path/repo.git</span></code></pre></td></tr></table></div></figure>


<h3>2. 更新记录到仓库</h3>

<h5>2.1 检查当前文件状态</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status</span></code></pre></td></tr></table></div></figure>


<p><code>它会告诉你哪些文件当前处于什么状态。</code></p>

<h5>2.2 跟踪新文件</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add file</span></code></pre></td></tr></table></div></figure>


<p><code>使file文件或目录开始被跟踪；它可以接受通配符，如 git add *.c 。</code></p>

<h5>2.3 暂存已修改文件</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add file</span></code></pre></td></tr></table></div></figure>


<p><code>被跟踪文件发生变化后，把它放到暂存区还是使用 git add，它是个多用途的命令。</code><br/>
<code>注意：若文件已暂存后又修改了文件，则提交时不会纳入修改，你需要重新执行 git add 将文件放到暂存区！</code></p>

<h5>2.4 忽略某些无需跟踪的文件</h5>

<p>在项目目录下建立 .gitignore 文件，添加过滤规则：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 此为注释 
</span><span class='line'>*.a           # 忽略所有 .a 结尾的文件
</span><span class='line'>!lib.a        # 但 lib.a 除外
</span><span class='line'>/TODO     # 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO
</span><span class='line'>build/        # 忽略 build/ 目录下的所有文件
</span><span class='line'>doc/*.txt     # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></code></pre></td></tr></table></div></figure>


<h5>2.5 查看未暂存和已暂存的更新</h5>

<p>git status 仅仅列出了修改过的文件，若要查看工作目录中当前文件和暂存区快照之间的差异：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff</span></code></pre></td></tr></table></div></figure>


<p><code>git diff 会使用文件补丁的格式显示具体添加和删除的行。</code></p>

<p>若要看已经暂存起来的文件和上次提交时的快照之间的差异：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff --cached</span></code></pre></td></tr></table></div></figure>


<p><code>Git 1.6.1及以上版本还可使用 git diff --staged，效果相同但更好记。</code></p>

<h5>2.6 提交更新</h5>

<p><strong><em>在提交前请一定 git status，确认还有什么新建或修改过的文件没有 git add 进来！</em></strong></p>

<p>Git 会调用文本编辑器让你填写“提交说明”（编辑器中显示的注释中会显示更新内容，可用 -v 选项显示修改差异）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit</span></code></pre></td></tr></table></div></figure>


<p>也直接在命令行带上“提交说明”：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m “提交说明”</span></code></pre></td></tr></table></div></figure>


<p>若想自动把所有已经跟踪过的文件暂存起来一并提交,从而跳过 git add 步骤，可以加上 -a 选项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -am “提交说明”</span></code></pre></td></tr></table></div></figure>


<h5>2.7 移除文件</h5>

<p>若想从 Git 仓库中移除文件(即从暂存区中移除)，但仍然在工作目录中保留该文件（也许想稍后将文件加入 .gitignore 文件中）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rm --cached log/\*.log     #移除 log/ 目录下所有 .log 文件</span></code></pre></td></tr></table></div></figure>


<p><code>**注意：** Git 有自己的文件模式扩展方式，当我们使用其自己的扩展方式（而不是让Shell来扩展）时，应在特殊字符前加 ’\‘ 。</code></p>

<p>若想从 Git 仓库中移除文件，并且从工作目录中移除该文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm file                    #从工作目录中移除，但仍然被git跟踪着
</span><span class='line'>$ git rm file             #从 Git 仓库中移除(不再跟踪)
</span><span class='line'>或 $ git rm -f file      #若file已被修改且放到暂存区，则需强制选项（防止因误删除文件而丢失修改内容）</span></code></pre></td></tr></table></div></figure>


<p><code>**注意：** Git 有自己的文件模式扩展方式，当我们使用其自己的扩展方式（而不是让Shell来扩展）时，应在特殊字符前加 ’\‘ 。</code></p>

<h5>2.8 移动(重命名)文件</h5>

<p>若要对 Git 中的文件改名：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git mv file_a file_b</span></code></pre></td></tr></table></div></figure>


<p>实际上，上面的命令相当于：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv file_a file_b
</span><span class='line'>$ git rm file_a
</span><span class='line'>$ git add file_b</span></code></pre></td></tr></table></div></figure>


<h3>3. 查看提交历史</h3>

<p>最常用的提交历史输出格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log                #按提交时间列出所有的更新
</span><span class='line'>$ git log -p          #-p：展开显示每次提交的内容差异（看看别人改了啥）
</span><span class='line'>$ git log -4          #-4：仅显示最近的4次更新
</span><span class='line'>$ git log --stat      #--stat：仅显示简要的增改行数统计</span></code></pre></td></tr></table></div></figure>


<p>你可能想要更特殊的输出格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --pretty=oneline（或short,full,fuller） #oneline表示每个提交显示为一行
</span><span class='line'>$ git log --pretty=format:"%h - %an, %ar : %s"  #定制显示格式(输出便于后期编程提取分析)
</span><span class='line'>常用的格式占位符及其意义:
</span><span class='line'>      %H 提交对象(commit)的完整哈希字串
</span><span class='line'>      %h 提交对象的简短哈希字串
</span><span class='line'>      %T 树对象(tree)的完整哈希字串
</span><span class='line'>      %t 树对象的简短哈希字串
</span><span class='line'>      %P 父对象(parent)的完整哈希字串
</span><span class='line'>      %p 父对象的简短哈希字串
</span><span class='line'>      %an 作者(author)的名字
</span><span class='line'>      %ae 作者的电子邮件地址
</span><span class='line'>      %ad 作者修订日期(可以用 -date= 选项定制格式)
</span><span class='line'>      %ar 作者修订日期,按多久以前的方式显示
</span><span class='line'>      %cn 提交者(committer)的名字
</span><span class='line'>      %ce 提交者的电子邮件地址
</span><span class='line'>      %cd 提交日期
</span><span class='line'>      %cr 提交日期,按多久以前的方式显示
</span><span class='line'>      %s 提交说明</span></code></pre></td></tr></table></div></figure>


<p>也可以用简单的字符图形, 形象地展示了每个提交所在的分支及其分化衍合情况：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --pretty=format:"%h %s" --graph</span></code></pre></td></tr></table></div></figure>


<p>一些其他常用的选项及其释义:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--stat 显示每次更新的文件修改统计信息。
</span><span class='line'>--shortstat 只显示 --stat 中最后的行数修改添加移除统计。
</span><span class='line'>--name-only 仅在提交信息后显示已修改的文件清单。
</span><span class='line'>--name-status 显示新增、修改、删除的文件清单。
</span><span class='line'>--abbrev-commit 仅显示 SHA-1 的前几个字符,而非所有的 40 个字符。
</span><span class='line'>--relative-date 使用较短的相对时间显示(比如,“2 weeks ago”)。</span></code></pre></td></tr></table></div></figure>


<p><strong><em>还可以限制输出的历史记录所在时间段：</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --since=2.weeks
</span><span class='line'>$ git log --since=“2008-01-15”</span></code></pre></td></tr></table></div></figure>


<p>其他常用的类似选项及说明：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(n) 仅显示最近的 n 条提交
</span><span class='line'>--since, --after 仅显示指定时间之后的提交。
</span><span class='line'>--until, --before 仅显示指定时间之前的提交。
</span><span class='line'>--author 仅显示指定作者相关的提交。
</span><span class='line'>--committer 仅显示指定提交者相关的提交</span></code></pre></td></tr></table></div></figure>


<p><code>综合示例：</code>查看 Git 仓库中,2008年10月期间, Junio提交的但未合并的测试脚本(位于项目的 t/ 目录下的文件)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --pretty="%h:%s" --author=“Junio” --since="2008-10-01" \
</span><span class='line'>--before="2008-11-01" --no-merges  --  t/</span></code></pre></td></tr></table></div></figure>


<h3>4. 撤销操作</h3>

<p><code>注意：有些操作并不总是能撤销的！</code></p>

<h5>4.1 修改最后一次提交</h5>

<p>如果刚才提交时忘了暂存某些修改,可以先补上暂存操作,然后再运行 &ndash;amend 提交:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m 'initial commit'     #修改提交说明
</span><span class='line'>$ git add forgotten_file                  #补上暂存操作
</span><span class='line'>$ git commit --amend</span></code></pre></td></tr></table></div></figure>


<p><code>--amend提交命令修正了前一个的提交内容。</code></p>

<h5>4.2 取消已暂存的文件</h5>

<p>使已暂存的文件(当然是已修改的文件)回到已修改但未暂存状态:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git reset HEAD &lt;file&gt;</span></code></pre></td></tr></table></div></figure>


<h5>4.3 取消对文件的修改</h5>

<p>使已修改的文件回到修改前(上一次提交后)状态:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout --  &lt;file&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>其实是把之前版本文件拷贝过来覆盖了当前文件，请慎重！</code></p>

<h3>5. 远程仓库的使用</h3>

<h5>5.1 查看当前远程库</h5>

<p>克隆某个项目后，会有名为origin的远程库，用来表示所克隆的远程仓库。列出远程仓库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote
</span><span class='line'>$ git remote -v       #-v：显示对应的仓库地址</span></code></pre></td></tr></table></div></figure>


<h5>5.2 添加远程仓库</h5>

<p>添加一个新的远程仓库,指定一个简单的名字xiaoming,以便将来引用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote
</span><span class='line'>$ git remote add xiaoming git://github.com/xiaoming/repo.git</span></code></pre></td></tr></table></div></figure>


<h5>5.3 从远程仓库抓取数据</h5>

<p>从远程仓库抓取数据到本地:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git fetch origin master</span></code></pre></td></tr></table></div></figure>


<p><code>fetch只是将远端的数据拉到本地仓库,并不自动合并到当前工作分支,当你需要是可手工合并。</code></p>

<p>如果想从远程仓库抓取数据，并自动合并到本地仓库当前分支:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git pull origin master</span></code></pre></td></tr></table></div></figure>


<h5>5.4 推送数据到远程仓库</h5>

<p><code>如果有其他人在你之前推送了若干更新，那你得先抓取，合并，然后再推送。</code><br/>
和别人分享劳动成果啦:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin master</span></code></pre></td></tr></table></div></figure>


<p><code>成功条件：在服务器上有写权限；同一时刻没有别人在推送数据。</code></p>

<h5>5.5 查看远程仓库信息</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote show origin</span></code></pre></td></tr></table></div></figure>


<p><code>它会告诉我们，运行 git pull/push 时缺省拉取/推送的分支是什么，以及分支的同步情况。</code></p>

<h5>5.6 远程仓库的删除和重命名</h5>

<p>修改某个远程仓库的简短名称，如把xiaoming改为xm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote rename xiaoming xm</span></code></pre></td></tr></table></div></figure>


<p>若要移除远程仓库xiaoming(仅仅是添加远程仓库的逆操作):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote rm xiaoming xm</span></code></pre></td></tr></table></div></figure>


<h3>6. 打标签</h3>

<p>Git 可以对某一时间点的版本打上标签，人们在发布某个软件版本(比如 v1.0)的时候，经常这么做。</p>

<h5>6.1 列出和查看已有的标签</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag</span></code></pre></td></tr></table></div></figure>


<p><code>显示的标签按字母顺序排列。</code></p>

<p>也可以用特定的搜索模式列出符合条件的标签：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -l 'v1.4.2.*'</span></code></pre></td></tr></table></div></figure>


<p><code>列出 v1.4.2 系列的版本。</code></p>

<p>可以查看某个标签的信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git show  v1.4.2.0</span></code></pre></td></tr></table></div></figure>


<h5>6.2 新建标签</h5>

<p><code>一般建议使用含附注型的标签，以便保留相关信息；但若只是临时性加注标签或不需要旁注信息，用轻量级标签也行。</code></p>

<ul>
<li><code>轻量级标签</code>就像是个不会变化的分支，其实只是个指向特定提交对象的引用。新建轻量级标签：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag v1.0-LW</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>含附注标签</code>实际上是存储在仓库中的一个独立对象，有自身的校验和，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -a v1.4 -m 'my version 1.4'    #-m 指定了对应的标签说明</span></code></pre></td></tr></table></div></figure>


<ul>
<li>签署一个标签：如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的 -a 改为 -s 。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -s v1.5 -m 'my signed 1.5 tag'</span></code></pre></td></tr></table></div></figure>


<p><code>这可能会提示你输入密码啥的。</code></p>

<ul>
<li>验证一个标签：以下命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag  -v  v1.5</span></code></pre></td></tr></table></div></figure>


<ul>
<li>后期加注标签</li>
</ul>


<p>你甚至可以在后期对早先的某次提交加注标签，跟上对应提交对象的校验和(或前几位字符)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -a v1.2 9fceb02</span></code></pre></td></tr></table></div></figure>


<ul>
<li>分享标签</li>
</ul>


<p>默认情况下，git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin v1.2       #仅推送标签 v1.2
</span><span class='line'>$ git push origin --tags   #一次推送所有标签上去</span></code></pre></td></tr></table></div></figure>


<p><code>这样别人也能看到这些标签了。</code></p>

<h3>7. Git 命令别名</h3>

<p>可以为命令设置别名：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global alias.co checkout
</span><span class='line'>$ git config --global alias.br branch
</span><span class='line'>$ git config --global alias.ci commit
</span><span class='line'>$ git config --global alias.st status
</span><span class='line'>$ git config --global alias.unstage 'reset HEAD --'
</span><span class='line'>$ git config --global alias.last 'log -1 HEAD'</span></code></pre></td></tr></table></div></figure>


<p><code>现在若想输入 git commit，只需键入 git ci 即可。</code></p>

<p>若想运行某个外部命令，而非 Git 的附属工具，只需在命令前加上<code>!</code> 就行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global alias.visual "!gitk"</span></code></pre></td></tr></table></div></figure>


<h3>8 命令自动补全</h3>

<p>如果你用的是 Bash shell，可以试试看 Git 提供的<code>自动完成脚本</code>：</p>

<p>下载 Git 的源代码，将contrib/completion/git-completion.bash 文件复制到你自己的用户主目录中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp git-completion.bash ∼/.git-completion.bash  </span></code></pre></td></tr></table></div></figure>


<p>并把下行添加到你的 .bashrc 文件中:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.git-completion.bash</span></code></pre></td></tr></table></div></figure>


<p><code>要为系统上所有用户都设置默认使用此脚本，Linux 上复制到 /etc/bash_completion.d/ 目录中即可。</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs快捷键及命令]]></title>
    <link href="http://cosail.github.io/blog/2014/10/14/emacskuai-jie-jian/"/>
    <updated>2014-10-14T00:15:21+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/14/emacskuai-jie-jian</id>
    <content type="html"><![CDATA[<blockquote><p>主要内容来自：<a href="http://aifreedom.com/technology/112">这里</a>，由 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><code>CC BY-NC-SA 3.0协议</code></a> 授权</p></blockquote>

<p><strong><em>按键缩写:</em></strong><br/>
<code>C</code> = Ctrl<br/>
<code>M</code> = Meta = Alt | Esc<br/>
<code>Del</code> = Backspace</p>

<h4>基本快捷键(Basic)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x C-f "find"文件, 即在缓冲区打开/新建一个文件
</span><span class='line'>C-x C-s 保存文件
</span><span class='line'>C-x C-w 使用其他文件名另存为文件
</span><span class='line'>C-x C-v 关闭当前缓冲区文件并打开新文件
</span><span class='line'>C-x i 在当前光标处插入文件
</span><span class='line'>C-x b 新建/切换缓冲区
</span><span class='line'>C-x C-b 显示缓冲区列表
</span><span class='line'>C-x k 关闭当前缓冲区
</span><span class='line'>C-z 挂起emacs
</span><span class='line'>C-x C-c 关闭emacs</span></code></pre></td></tr></table></div></figure>


<h4>光标移动基本快捷键(Basic Movement)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-g g 或 M-x goto-line 跳到指定行
</span><span class='line'>M-x goto-char 跳到指定字符
</span><span class='line'>M-{ 上一段
</span><span class='line'>M-} 下一段
</span><span class='line'>C-f 后一个字符
</span><span class='line'>C-b 前一个字符
</span><span class='line'>C-p 上一行
</span><span class='line'>C-n 下一行
</span><span class='line'>M-f 后一个单词
</span><span class='line'>M-b 前一个单词
</span><span class='line'>C-a 行首
</span><span class='line'>C-e 行尾
</span><span class='line'>C-v 向下翻一页
</span><span class='line'>M-v 向上翻一页
</span><span class='line'>M-&lt; 到文件开头
</span><span class='line'>M-&gt; 到文件末尾</span></code></pre></td></tr></table></div></figure>


<h4>编辑(Editint)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-n 重复执行后一个命令n次
</span><span class='line'>C-u 重复执行后一个命令4次
</span><span class='line'>C-u n 重复执行后一个命令n次
</span><span class='line'>C-d 删除(delete)后一个字符
</span><span class='line'>M-d 删除后一个单词
</span><span class='line'>Del 删除前一个字符
</span><span class='line'>M-Del 删除前一个单词
</span><span class='line'>C-k 移除(kill)一行
</span><span class='line'>  
</span><span class='line'>C-Space 或 C-@ 开始标记
</span><span class='line'>M-h 标记整个段落
</span><span class='line'>C-x h 全选
</span><span class='line'>
</span><span class='line'>C-w 移除(kill)标记区域的内容
</span><span class='line'>M-w 复制标记区域的内容
</span><span class='line'>C-y 召回(yank)复制/移除的区域/行
</span><span class='line'>M-y 召回更早的内容 (在kill缓冲区内循环)
</span><span class='line'>C-x C-x 交换光标和标记
</span><span class='line'>  
</span><span class='line'>C-t 交换两个字符的位置
</span><span class='line'>M-t 交换两个单词的位置
</span><span class='line'>C-x C-t 交换两行的位置
</span><span class='line'>M-u 使从光标位置到单词结尾处的字母变成大写
</span><span class='line'>M-l 与M-u相反
</span><span class='line'>M-c 使从光标位置开始的单词的首字母变为大写</span></code></pre></td></tr></table></div></figure>


<h4>重要快捷键(Important)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-g 停止当前运行/输入的命令
</span><span class='line'>C-x u 撤销前一个命令
</span><span class='line'>M-x global-linum-mode 显示行号
</span><span class='line'>M-x linum-mode 只在当前buffer显示行号
</span><span class='line'>C-u M-! date 插入当前日期和时间
</span><span class='line'>C-u M-! &lt;cmd&gt; 插入&lt;cmd&gt;命令结果
</span><span class='line'>M-x revert-buffer RETURN (照着这个输入)撤销上次存盘后所有改动
</span><span class='line'>M-x recover-file RETURN 从自动存盘文件恢复
</span><span class='line'>M-x recover-session RETURN 如果你编辑了几个文件, 用这个恢复</span></code></pre></td></tr></table></div></figure>


<h4>在线帮助(Online-Help)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-h c 显示快捷键绑定的命令
</span><span class='line'>C-h k 显示快捷键绑定的命令和它的作用
</span><span class='line'>C-h l 显示最后100个键入的内容
</span><span class='line'>C-h w 显示命令被绑定到哪些快捷键上
</span><span class='line'>C-h f 显示函数的功能
</span><span class='line'>C-h v 显示变量的含义和值
</span><span class='line'>C-h b 显示当前缓冲区所有可用的快捷键
</span><span class='line'>C-h t 打开emacs教程
</span><span class='line'>C-h i 打开info阅读器
</span><span class='line'>C-h C-f 显示emacs FAQ
</span><span class='line'>C-h p 显示本机Elisp包的信息</span></code></pre></td></tr></table></div></figure>


<h4>搜索/替换(Seach/Replace)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-s 向后搜索
</span><span class='line'>C-r 向前搜索
</span><span class='line'>C-g 回到搜索开始前的位置(如果你仍然在搜索模式中)
</span><span class='line'>M-% 询问并替换(query replace)
</span><span class='line'>  
</span><span class='line'>Space或y 替换当前匹配
</span><span class='line'>Del或n 不要替换当前匹配
</span><span class='line'>. 仅仅替换当前匹配并退出(替换)
</span><span class='line'>, 替换并暂停(按Space或y继续)
</span><span class='line'>! 替换以下所有匹配
</span><span class='line'>^ 回到上一个匹配位置
</span><span class='line'>RETURN或q 退出替换</span></code></pre></td></tr></table></div></figure>


<h4>使用正则表达式(Regular expression)搜索/替换</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>可在正则表达式中使用的符号:
</span><span class='line'>^ 行首
</span><span class='line'>$ 行尾
</span><span class='line'>. 单个字符
</span><span class='line'>.* 任意多个(包括没有)字符
</span><span class='line'>\&lt; 单词开头
</span><span class='line'>\&gt; 单词结尾
</span><span class='line'>[] 括号中的任意一个字符(例如[a-z]表示所有的小写字母)
</span><span class='line'>  
</span><span class='line'>C-M-s 使用正则表达式向后搜索(可能和ubuntu下快捷键冲突)
</span><span class='line'>C-M-r 使用正则表达式向前搜索
</span><span class='line'>C-s 增量搜索
</span><span class='line'>C-s 重复增量搜索
</span><span class='line'>C-r 向前增量搜索
</span><span class='line'>C-r 重复向前增量搜索
</span><span class='line'>M-x query-replace-regexp 使用正则表达式搜索并替换</span></code></pre></td></tr></table></div></figure>


<h4>窗口命令(Window Commands)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x o 切换至其他窗口
</span><span class='line'>C-x 2 水平分割窗格
</span><span class='line'>C-x 3 垂直分割窗格
</span><span class='line'>C-x o 切换至其他窗格
</span><span class='line'>C-x 0 关闭窗格
</span><span class='line'>C-x 1 关闭除了光标所在窗格外所有窗格
</span><span class='line'>C-x ^ 扩大窗格
</span><span class='line'>M-x shrink-window 缩小窗格
</span><span class='line'>M C-v 滚动其他窗格内容
</span><span class='line'>C-x 4 f 在其他窗格中打开文件
</span><span class='line'>C-x 4 0 关闭当前缓冲区和窗格
</span><span class='line'>C-x 5 2 新建窗口(frame)
</span><span class='line'>C-x 5 1 删除其它所有窗口
</span><span class='line'>C-x 5 f 在新窗口中打开文件</span></code></pre></td></tr></table></div></figure>


<h4>书签命令(Bookmark commands)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x r m 在光标当前位置创建书签
</span><span class='line'>C-x r b 转到书签
</span><span class='line'>M-x bookmark-rename 重命名书签
</span><span class='line'>M-x bookmark-delete 删除书签
</span><span class='line'>M-x bookmark-save 保存书签
</span><span class='line'>
</span><span class='line'>C-x r l 列出书签清单
</span><span class='line'>    d 标记等待删除
</span><span class='line'>    Del 取消删除标记
</span><span class='line'>    x 删除被标记的书签
</span><span class='line'>    r 重命名
</span><span class='line'>    s 保存列表内所有书签
</span><span class='line'>    f 转到当前书签指向的位置
</span><span class='line'>    m 标记在多窗口中打开
</span><span class='line'>    v 显示被标记的书签(或者光标当前位置的书签)
</span><span class='line'>    t 切换是否显示路径列表
</span><span class='line'>    w 显示当前文件路径
</span><span class='line'>    q 退出书签列表
</span><span class='line'>      
</span><span class='line'>M-x bookmark-write 将所有书签导出至指定文件
</span><span class='line'>M-x bookmark-load 从指定文件导入书签</span></code></pre></td></tr></table></div></figure>


<h4>输入特殊字符</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x 8 C-h 得到特殊字符列表，如
</span><span class='line'>C-x 8 R 输入字符®
</span><span class='line'>C-x 8 o 输入字符°</span></code></pre></td></tr></table></div></figure>


<h4>Shell</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x shell/esh 打开shell模式
</span><span class='line'>    C-c C-c 类似unix里的C-c(停止正在运行的程序)
</span><span class='line'>    C-d 删除光标后一个字符
</span><span class='line'>    C-c C-d 发送EOF
</span><span class='line'>    C-c C-z 挂起程序(unix下的C-z)
</span><span class='line'>    M-p 显示前一条命令
</span><span class='line'>    M-n 显示后一条命令</span></code></pre></td></tr></table></div></figure>


<h4>DIRectory EDitor (dired)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x d 打开dired
</span><span class='line'>    C(大写C) 复制
</span><span class='line'>    d 标记等待删除
</span><span class='line'>    D 立即删除
</span><span class='line'>    e或f 打开文件或目录
</span><span class='line'>    g 刷新当前目录
</span><span class='line'>    G 改变文件所属组(chgrp)
</span><span class='line'>    k 从屏幕上的列表里删除一行(不是真的删除)
</span><span class='line'>    m 用*标记
</span><span class='line'>    n 光标移动到下一行
</span><span class='line'>    o 在另一个窗格打开文件并移动光标
</span><span class='line'>    C-o 在另一个窗格打开文件但不移动光标
</span><span class='line'>    P 打印文件
</span><span class='line'>    q 退出dired
</span><span class='line'>    Q 在标记的文件中替换
</span><span class='line'>    R 重命名文件
</span><span class='line'>    u 移除标记
</span><span class='line'>    v 显示文件内容
</span><span class='line'>    x 删除有D标记的文件
</span><span class='line'>    Z 压缩/解压缩文件
</span><span class='line'>    M-Del 移除标记(默认为所有类型的标记)
</span><span class='line'>    ~ 标记备份文件(文件名有~的文件)等待删除
</span><span class='line'>    # 标记自动保存文件(文件名形如#name#)等待删除
</span><span class='line'>    */ 用*标记所有文件夹(用C-u */n移除标记)
</span><span class='line'>    = 将当前文件和标记文件(使用C-@标记而不是dired的m标记)比较
</span><span class='line'>    M-= 将当前文件和它的备份比较
</span><span class='line'>    ! 对当前文件应用shell命令
</span><span class='line'>    M-} 移动光标至下一个用*或D标记的文件
</span><span class='line'>    M-{ 移动光标至上一个用*或D标记的文件
</span><span class='line'>    % d 使用正则表达式标记文件等待删除
</span><span class='line'>    % m 使用正则表达式标记文件为*
</span><span class='line'>    + 新建文件夹
</span><span class='line'>    &gt; 移动光标至后一个文件夹
</span><span class='line'>    &lt; 移动光标至前一个文件夹
</span><span class='line'>    s 切换排序模式(按文件名/日期)
</span><span class='line'>      
</span><span class='line'>M-x speedbar 打开一个独立的目录显示窗口</span></code></pre></td></tr></table></div></figure>


<h4>Telnet</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x telnet 打开telnet模式
</span><span class='line'>    C-d 删除后一个字符或发送EOF
</span><span class='line'>    C-c C-c 停止正在运行的程序(和unix下的C-c类似)
</span><span class='line'>    C-c C-d 发送EOF
</span><span class='line'>    C-c C-o 清除最后一个命令的输出
</span><span class='line'>    C-c C-z 挂起正在运行的命令
</span><span class='line'>    C-c C-u 移除前一行
</span><span class='line'>    M-p 显示前一条命令</span></code></pre></td></tr></table></div></figure>


<h4>emacs daemon</h4>

<p>关于Emacs有一个很著名的笑话，就是Emacs = Emacs Makes A Computer Slow。<br/>
如何为Emacs加速？在后台运行一个emacs daemon服务端，然后你就可以在使用emacsclient打开任何文件，真正的处理交给emacs daemon。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>先启动emacs deamon：
</span><span class='line'>    $ emacs --deamon
</span><span class='line'>然后运行emacs：
</span><span class='line'>    $ emacsclient -t   #从终端启动
</span><span class='line'>    $ emacsclient -c   #从X启动</span></code></pre></td></tr></table></div></figure>


<p><code>只要在启动服务器时运行初始化脚本，客户端启动无需运行脚本；不必每次打开一次Emacs，都要加载半天插件了。</code></p>

<h4>宏命令(Macro-commands)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x ( 开始定义宏
</span><span class='line'>C-x ) 结束定义宏
</span><span class='line'>C-x e 运行最近定义的宏
</span><span class='line'>M-n C-x e 运行最近定义的宏n次
</span><span class='line'>M-x name-last-kbd-macro 给最近定义的宏命名(用来保存)
</span><span class='line'>M-x insert-kbd-macro 将已命名的宏保存到文件
</span><span class='line'>M-x load-file 载入宏</span></code></pre></td></tr></table></div></figure>


<h4>编程(Programming)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M C-\ 自动缩进光标和标记间的区域
</span><span class='line'>M-m 移动光标到行首第一个(非空格)字符
</span><span class='line'>M-^ 将当前行接到上一行末尾处
</span><span class='line'>M-; 添加缩进并格式化的注释
</span><span class='line'>C, C++和Java模式
</span><span class='line'>M-a 移动光标到声明的开始处
</span><span class='line'>M-e 移动光标到声明的结尾处
</span><span class='line'>M C-a 移动光标到函数的开始处
</span><span class='line'>M C-e 移动光标到函数的结尾处
</span><span class='line'>C-c RETURN 将光标移动到函数的开始处并标记到结尾处
</span><span class='line'>C-c C-q 根据缩进风格缩进整个函数
</span><span class='line'>C-c C-a 切换自动换行功能
</span><span class='line'>C-c C-d 一次性删除光标后的一串空格(greedy delete)
</span><span class='line'>  
</span><span class='line'>为了实现下面的一些技术, 你需要在保存源代码的目录里运行"etags
</span><span class='line'>*.c *.h *.cpp"(或者源代码的其他的扩展名)
</span><span class='line'>M-.(点) 搜索标签
</span><span class='line'>M-x tags-search ENTER 在所有标签里搜索(使用正则表达式)
</span><span class='line'>M-,(逗号) 在tags-search里跳至下一个匹配处
</span><span class='line'>M-x tags-query-replace 在设置过标签的所有文件里替换文本</span></code></pre></td></tr></table></div></figure>


<h4>GDB(调试器)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x gdb 在另一个的窗格中打开gdb</span></code></pre></td></tr></table></div></figure>


<h4>版本控制(Version Control)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x v d 显示当前目录下所有注册过的文件(show all registered files in this dir)
</span><span class='line'>C-x v = 比较不同版本间的差异(show diff between versions)
</span><span class='line'>C-x v u 移除上次提交之后的更改(remove all changes since last checkin)
</span><span class='line'>C-x v ~ 在不同窗格中显示某个版本(show certain version in different window)
</span><span class='line'>C-x v l 打印日志(print log)
</span><span class='line'>C-x v i 标记文件等待添加版本控制(mark file for version control add)
</span><span class='line'>C-x v h 给文件添加版本控制文件头(insert version control header into file)
</span><span class='line'>C-x v r 获取命名过的快照(check out named snapshot)
</span><span class='line'>C-x v s 创建命名的快照(create named snapshot)
</span><span class='line'>C-x v a 创建gnu风格的更改日志(create changelog file in gnu-style)</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell语法]]></title>
    <link href="http://cosail.github.io/blog/2014/10/13/shellyu-fa/"/>
    <updated>2014-10-13T23:32:17+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/13/shellyu-fa</id>
    <content type="html"><![CDATA[<p>下面只是“《Linux程序设计》第二章 Shell程序设计” 中的示例代码，我把它们写在若干个文件里：</p>

<h4>0 . list.txt</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. variable.sh：
</span><span class='line'>2. condition.sh：
</span><span class='line'>3. control.sh：
</span><span class='line'>4. AndOr.sh：
</span><span class='line'>5. statementBlock.sh：
</span><span class='line'>6. function.sh：
</span><span class='line'>7. command_1.sh：
</span><span class='line'>8. old_version_set.sh：
</span><span class='line'>9. new_version_set.sh：
</span><span class='line'>10. command_2.sh：
</span><span class='line'>11. command_3.sh：
</span><span class='line'>12. another.sh：
</span><span class='line'>13. command_4.sh：
</span><span class='line'>14. command_5.sh：
</span><span class='line'>15. command_6.sh：
</span><span class='line'>16. command_7.sh：
</span><span class='line'>17. command_8.sh：
</span><span class='line'>18. dialog.sh：
</span><span class='line'>19. merge.sh：</span></code></pre></td></tr></table></div></figure>


<h4>1 . variable.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'># Shell变量,环境变量
</span><span class='line'># 运行时带几个参数： ./variable.sh you me her him them it
</span><span class='line'>
</span><span class='line'>echo ---------普通变量------------
</span><span class='line'>myvar="Hi there!"   
</span><span class='line'>echo $myvar         #打印变量值
</span><span class='line'>echo "$myvar"       #双引号可避免空格问题，但不抑制变量解析
</span><span class='line'>echo '$myvar'       #单引号抑制变量解析
</span><span class='line'>echo \$myvar        #'$'被'\'转义
</span><span class='line'>
</span><span class='line'>echo Please enter some text:
</span><span class='line'>read myvar          #键盘输入
</span><span class='line'>echo '$myvar' now equals : $myvar
</span><span class='line'>
</span><span class='line'>echo ---------环境变量------------
</span><span class='line'>echo [$IFS]         #Input Field Separator
</span><span class='line'>
</span><span class='line'>echo '$0:' $0        #shell程序文件名
</span><span class='line'>echo '$$:' $$        #进程ID
</span><span class='line'>echo '$?:' $?        #最后运行的命令的结束代码（返回值）
</span><span class='line'>
</span><span class='line'>echo '$*:'$*        #所有参数
</span><span class='line'>echo '$@:'$@        #所有参数，但不使用$IFS
</span><span class='line'>echo '$#:'$#        #参数个数
</span><span class='line'>echo args: $1,$2,$3,$4,$5   #第1到第5个参数
</span><span class='line'>
</span><span class='line'>set -o verbose      #在命令执行前在屏幕上回显命令
</span><span class='line'>echo '$-:'$-        #使用Set命令设定的Flag一览
</span><span class='line'>
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<h4>2 . condition.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Shell脚本条件测试:用test或[都可  ('['也是一个命令，位于/usr/bin/)
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>#字符串比较
</span><span class='line'>if [ "you" = "me" ]     #'!='表字符串判不等
</span><span class='line'>then
</span><span class='line'>    echo "you = me"
</span><span class='line'>else
</span><span class='line'>    echo "you != me"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>if [ -z "" ]            #'-n'表不为空
</span><span class='line'>then
</span><span class='line'>    echo "string is NULL"
</span><span class='line'>else
</span><span class='line'>    echo "string is not NULL"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>#算术比较
</span><span class='line'>if test 3 -eq 4         #-ne (这里的3,4可以是更复杂的表达式)
</span><span class='line'>then
</span><span class='line'>    echo "3 = 4"
</span><span class='line'>else
</span><span class='line'>    echo "3 != 4"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>if [ 5 -gt 6 ]          #-ge, -lt, -le, !
</span><span class='line'>then
</span><span class='line'>    echo "5 &gt; 6"
</span><span class='line'>else
</span><span class='line'>    echo "5 &lt;= 6"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>#文件条件测试
</span><span class='line'>#文件存在:通常用'-f'代替，因为'-e'可能不可移植
</span><span class='line'>if test -e fred.c; then     #then也可以放在这，但要';'分隔
</span><span class='line'>    echo "fred.c is exist"
</span><span class='line'>else
</span><span class='line'>    echo "no file fred.c"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>#是普通文件
</span><span class='line'>if [ -f fred.c ]            #'['与测试内容之间必须有空格，因为'['是个命令名
</span><span class='line'>then
</span><span class='line'>    echo "fred.c is a general file"
</span><span class='line'>else
</span><span class='line'>    echo "fred.c is not a general file"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'># -d 是一个目录
</span><span class='line'># -r,-w,-x 文件可读，写，执行
</span><span class='line'># -u,-g 文件的SUID，SGID被设置
</span><span class='line'># -s 文件的长度不为0
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<h4>3 . control.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Shell的控制语句
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>#if
</span><span class='line'>echo "Is it morning? Please answer yes or no:"
</span><span class='line'>read timeofday
</span><span class='line'>
</span><span class='line'>if [ "$timeofday" = "yes" ]  #若$timeofday不加双引号，且为空(未输入，直接按回车)的话,会产生语法错误：if [ = "yes" ]
</span><span class='line'>then
</span><span class='line'>    echo "Good morning!"
</span><span class='line'>elif [ "$timeofday" = "no" ]
</span><span class='line'>then
</span><span class='line'>    echo "Good afternoon!"
</span><span class='line'>else
</span><span class='line'>    echo "Sorry, it's not recognized: \"$timeofday\""
</span><span class='line'>    exit 1
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>#for
</span><span class='line'>for var in bar fud 45 "hehe you sob"      #Shell认为所有变量包含的都是字符串，如这里的45
</span><span class='line'>do
</span><span class='line'>    echo $var
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>for file in $(ls *.sh); do      #$(cmd)
</span><span class='line'>    echo $file
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>#while
</span><span class='line'>foo=1
</span><span class='line'>while [ "$foo" -le 20 ]
</span><span class='line'>do
</span><span class='line'>    echo -n "foo = $foo,"        #-n是bash的echo带的去换行参数,不是所有shell都有
</span><span class='line'>    foo=$(($foo+1))         #$(())结构为算数扩展，替换会里面的表达式的值
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>#until
</span><span class='line'>#若是该shell脚本的第一个参数指定的用户登录，则发警报
</span><span class='line'>until who | grep "$1" &gt; /dev/null   #who列出已登陆的用户
</span><span class='line'>do
</span><span class='line'>    sleep 5
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>echo -e \\a         #响铃(我机器上没有声音?)
</span><span class='line'>echo "**** $1 has just logged in ! ****"
</span><span class='line'>
</span><span class='line'>#case: case结构会使用第一个匹配的模式,即使后面的模式更精确
</span><span class='line'>echo "is it morning ? Please answer yes or no:"
</span><span class='line'>read timeofday
</span><span class='line'>
</span><span class='line'>case "$timeofday" in
</span><span class='line'>    [Yy][Ee][Ss] | [Yy])    echo "Good morning";;       #每个模式之后以";;"结尾,可放置多条语句
</span><span class='line'>    no | n)    
</span><span class='line'>        echo "you say no or n"
</span><span class='line'>        echo "Good afternoon";;
</span><span class='line'>    *)  echo "Soory, answer not recognized"  #*通配符匹配所有
</span><span class='line'>        echo "please answer yes or no"
</span><span class='line'>        exit 1
</span><span class='line'>        ;;      #esac前的;;可省略
</span><span class='line'>esac
</span><span class='line'>
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<h4>4 . AndOr.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>touch file_one
</span><span class='line'>rm -f file_two
</span><span class='line'>
</span><span class='line'>#AND列表:&&
</span><span class='line'>#[ -f file_two ]测试失败,echo " two"不会执行
</span><span class='line'>if [ -f file_one ] && echo "one" && [ -f file_two ] && echo " two"
</span><span class='line'>then
</span><span class='line'>    echo "true"
</span><span class='line'>else
</span><span class='line'>    echo "false"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#OR列表:||
</span><span class='line'>rm -f file_one
</span><span class='line'>
</span><span class='line'>if [ -f file_one ] || echo "one" || echo "One"
</span><span class='line'>then
</span><span class='line'>    echo "true"
</span><span class='line'>else
</span><span class='line'>    echo "false"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#混用AND和OR列表: 这里没有用if
</span><span class='line'>#如果测试为真执行命令1, 为假执行命令2
</span><span class='line'>[ -f file_one ] && echo "test for true: cmd1" || echo "test for false: cmd2"
</span><span class='line'>
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<h4>5 . statementBlock.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#语句块: {}
</span><span class='line'>if {
</span><span class='line'>    echo "We in block"
</span><span class='line'>    echo "You in block"
</span><span class='line'>    echo "They in block"
</span><span class='line'>}
</span><span class='line'>then {
</span><span class='line'>    echo "true"
</span><span class='line'>    echo "I said true"
</span><span class='line'>}
</span><span class='line'>else
</span><span class='line'>    echo "false"
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<h4>6 . function.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'>#Shell函数
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>func() {
</span><span class='line'>    echo "this"
</span><span class='line'>    echo "that"
</span><span class='line'>    ls /bin/ls
</span><span class='line'>    echo "result"
</span><span class='line'>
</span><span class='line'>    return 0
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#直接调用函数
</span><span class='line'>func
</span><span class='line'>
</span><span class='line'>echo "-----------------------------"
</span><span class='line'>
</span><span class='line'>#res会捕获func()函数echo的字符串
</span><span class='line'>res="$(func)"   #调用函数就跟使用其他命令一样
</span><span class='line'>
</span><span class='line'>echo "func() executed completely:"
</span><span class='line'>echo $res
</span><span class='line'>
</span><span class='line'>echo "-----------------------------"
</span><span class='line'>
</span><span class='line'>#函数内局部变量
</span><span class='line'>func2() {
</span><span class='line'>    local res="local res"               #local声明局部变量
</span><span class='line'>    echo "Inside func2(): res=$res"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func2
</span><span class='line'>echo "Outside func2(): res=$res"
</span><span class='line'>
</span><span class='line'>echo "-----------------------------"
</span><span class='line'>
</span><span class='line'>#从函数返回一个值
</span><span class='line'>yes_or_no() {
</span><span class='line'>    echo "Is your name $* ?"        #这里的$*是传给函数的所有参数,不是传给shell程序的参数
</span><span class='line'>    while true
</span><span class='line'>    do
</span><span class='line'>        echo -n "Enter yes or no: "
</span><span class='line'>        read x
</span><span class='line'>        
</span><span class='line'>        case "$x" in
</span><span class='line'>            y | yes)    return 0;;
</span><span class='line'>            n | no)     return 1;;
</span><span class='line'>            *)          echo "Answer yes or no please."
</span><span class='line'>        esac
</span><span class='line'>    done
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>if yes_or_no "$1"   #调用函数并传递参数,根据return值判断执行成功还是失败
</span><span class='line'>then
</span><span class='line'>    echo "Hi, $1"   #仅当return 0时执行这句
</span><span class='line'>else
</span><span class='line'>    echo "Who you are"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<h4>7 . command_1.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Shell命令
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>#命令1:"break"
</span><span class='line'>echo ----------------break----------------
</span><span class='line'>rm -rf fred*
</span><span class='line'>echo &gt; fred1    #new file
</span><span class='line'>echo &gt; fred2
</span><span class='line'>mkdir fred3     #new directory
</span><span class='line'>echo &gt; fred4
</span><span class='line'>
</span><span class='line'>for file in fred*
</span><span class='line'>do
</span><span class='line'>    if [ -d "$file" ]; then
</span><span class='line'>        break;                  #是目录则跳出
</span><span class='line'>    fi
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>echo I got a directory: $file
</span><span class='line'>
</span><span class='line'>rm -rf fred*
</span><span class='line'>
</span><span class='line'>#命令2:"continue"
</span><span class='line'>echo ---------------continue--------------
</span><span class='line'>rm -rf fred*
</span><span class='line'>echo &gt; fred1    #new file
</span><span class='line'>echo &gt; fred2
</span><span class='line'>mkdir fred3     #new directory
</span><span class='line'>echo &gt; fred4
</span><span class='line'>
</span><span class='line'>for file in fred*
</span><span class='line'>do
</span><span class='line'>    if [ -d "$file" ]; then
</span><span class='line'>        continue;                  #是目录则马上进入下一次循环
</span><span class='line'>    fi
</span><span class='line'>    echo I got a file: $file
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>rm -rf fred*
</span><span class='line'>
</span><span class='line'>echo ---------------:-------------------
</span><span class='line'>#命令3:":"        //一个空命令,相当于true
</span><span class='line'>if [ -f fred ]; then
</span><span class='line'>    :
</span><span class='line'>else
</span><span class='line'>    echo "file fred did not exist"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>echo -------------.---------------------
</span><span class='line'>#命令4:"."      //在当前shell中执行命令,而不是在子shell中执行(正如source命令,会改变当前环境)
</span><span class='line'>echo 请在shell下用". ./old_version_set.sh",". ./new_version_set.sh"来查看效果
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<h4>8 . old_version_set.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>version=Old_version
</span><span class='line'>PS1="Old&gt; "
</span><span class='line'>PATH=/bin:/usr/bin:/usr/local/Old_bin:.</span></code></pre></td></tr></table></div></figure>


<h4>9 . new_version_set.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>version=New_version
</span><span class='line'>PS1="New&gt; "
</span><span class='line'>PATH=/bin:/usr/bin:/usr/local/New_bin:.</span></code></pre></td></tr></table></div></figure>


<h4>10 . command_2.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'>#   shell命令
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>echo ------------echo----------------
</span><span class='line'>#命令5:"echo"
</span><span class='line'>#不换行显示
</span><span class='line'>echo -n "string to output."     #-n代表不输出换行
</span><span class='line'>echo -e "string to output.\c"   #开启转义,\c代表结束输出(请看:man echo)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>echo    #换行
</span><span class='line'>echo ------------eval--------------
</span><span class='line'>#命令6:"eval"           //对参数求值:像另一个$,它给出一个变量的值的值
</span><span class='line'>foo=10
</span><span class='line'>x=foo
</span><span class='line'>y='$'$x         #y='$foo'
</span><span class='line'>echo $y
</span><span class='line'>
</span><span class='line'>eval y='$'$x    #y=$foo=10
</span><span class='line'>echo $y
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>echo ------------exec-------------
</span><span class='line'>#命令7:"exec"   //exec命令在执行时会把当前的shell进程关闭，然后换到后面的命令继续执行。
</span><span class='line'>#如:"exec touch afile"      //会关闭shell,并创建文件afile.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>echo -------------exit-------------
</span><span class='line'>#命令8:"exit"
</span><span class='line'>exit 0  #成功
</span><span class='line'>exit 1  # 1-125表错误码
</span><span class='line'>#126表文件不可执行,127表命令未找到,128及以上表出现一个信号</span></code></pre></td></tr></table></div></figure>


<h4>11 . command_3.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># shell命令
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>echo -------------export--------------
</span><span class='line'>#命令9:"export"
</span><span class='line'>foo="The first var"
</span><span class='line'>export bar="The second var" #被导出
</span><span class='line'>foo12="The 1.5th var"
</span><span class='line'>
</span><span class='line'>#或set -allexport,表示导出后面声明的所有变量
</span><span class='line'>set -a  
</span><span class='line'>foo2="The third var"    #被导出
</span><span class='line'>bar2="The fourth var"   #被导出
</span><span class='line'>
</span><span class='line'>./another.sh        #调用另一个shell脚本,它只能看见导出的bar变量,而看不到foo
</span><span class='line'>
</span><span class='line'>echo -----------expr------------
</span><span class='line'>#命令10:"expr"      //将它的参数作为一个表达式来求值
</span><span class='line'>x=3
</span><span class='line'>echo "$x"
</span><span class='line'>x=`expr $x + 1`     #可替换为$((...))语法,更有效
</span><span class='line'>echo "$x"
</span><span class='line'>x=$(expr $x + 1)
</span><span class='line'>echo "$x"
</span><span class='line'>
</span><span class='line'>echo -------------printf------------
</span><span class='line'>#命令11:"printf"        //较新的版本shell提供该命令产生格式化输出,用来代替echo
</span><span class='line'>y="you are not you."
</span><span class='line'>printf "%s:x=%d,y=\"%s\"\n" "info" "$x" "$y"    #$y要用""包围
</span><span class='line'>
</span><span class='line'>echo -----------set--------------
</span><span class='line'>#命令12:"set"           //为shell设置参数变量,就像脚本的参数(命令9用法不太一样)
</span><span class='line'>set $(date)     #设置参数为date命令的输出(空格分隔的)
</span><span class='line'>echo $0,$1,$2,$3
</span><span class='line'>set 1 "go you" 5000
</span><span class='line'>echo $1,$2,$3
</span><span class='line'>
</span><span class='line'>echo -----------shift-----------
</span><span class='line'>#命令12:"shift"         //将所有的参数变量左移一个位置:$2变为$1...,注意$0不变
</span><span class='line'>while [ "$1" != "" ]; do
</span><span class='line'>    echo "$1"
</span><span class='line'>    shift
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<h4>12 . another.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>echo "$foo"
</span><span class='line'>echo "$bar"
</span><span class='line'>
</span><span class='line'>echo "$foo12"
</span><span class='line'>
</span><span class='line'>echo "$foo2"
</span><span class='line'>echo "$bar2"</span></code></pre></td></tr></table></div></figure>


<h4>13 . command_4.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># shell命令
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>echo --------------unset---------------
</span><span class='line'>#命令14:"unset"     //从环境中删除变量或函数,但不能删除shell本身定义的只读变量如PATH
</span><span class='line'>foo="Oh I'am here"
</span><span class='line'>echo $foo
</span><span class='line'>
</span><span class='line'>foo=        #将foo设为空,变量仍存在
</span><span class='line'>echo $foo
</span><span class='line'>
</span><span class='line'>foo="Oh i am here again"
</span><span class='line'>echo $foo
</span><span class='line'>unset foo   #将foo变量删除掉
</span><span class='line'>echo $foo
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>echo --------------trap------------------
</span><span class='line'>#命令15:"trap"          
</span><span class='line'>#   trap cmd signal: 当信号signal出现时,执行命令cmd(该命令之后有效)
</span><span class='line'>#   trap signal: 忽略信号signal
</span><span class='line'>#   trap - signal: 恢复signal的默认处理
</span><span class='line'>trap 'rm -f /tmp/my_tmp_file_$$' INT    #可以用trap -l看到INT信号
</span><span class='line'>echo createing file /tmp/my_tmp_file_$$
</span><span class='line'>date &gt; /tmp/my_tmp_file_$$
</span><span class='line'>
</span><span class='line'>echo "press CTRL+C to interrupt ..."
</span><span class='line'>while [ -f /tmp/my_tmp_file_$$ ]; do
</span><span class='line'>    echo File exists
</span><span class='line'>    sleep 1
</span><span class='line'>done
</span><span class='line'>echo "File no longer exists"
</span><span class='line'>
</span><span class='line'>#设置回CTRL+C信号的默认处理:终止程序
</span><span class='line'>trap INT
</span><span class='line'>echo createing file /tmp/my_tmp_file_$$
</span><span class='line'>date &gt; /tmp/my_tmp_file_$$
</span><span class='line'>
</span><span class='line'>echo "press CTRL+C to interrupt ..."
</span><span class='line'>while [ -f /tmp/my_tmp_file_$$ ]; do
</span><span class='line'>    echo File exists
</span><span class='line'>    sleep 1
</span><span class='line'>done
</span><span class='line'>echo "should not reach here"                 </span></code></pre></td></tr></table></div></figure>


<h4>14 . command_5.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># shell
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>echo -----------find------------
</span><span class='line'>#命令16:"find"
</span><span class='line'>#find [path] [options] [test] [actions]
</span><span class='line'>find . -name fun*.sh -print
</span><span class='line'>echo -------
</span><span class='line'>
</span><span class='line'>find / -mount -name wish    #-mount不去搜索挂载的其他文件系统
</span><span class='line'>echo -------
</span><span class='line'>
</span><span class='line'>find . -newer command_2.sh -type f     #搜索比command_2.sh要新的文件,不是目录
</span><span class='line'>echo -------
</span><span class='line'>
</span><span class='line'>find . -newer command_2.sh -o -name "v*.sh"   #-o表示或者,-a表示并且,!表非
</span><span class='line'>echo -------
</span><span class='line'>
</span><span class='line'>find . -newer command_2.sh -or -name "v*.sh"   #-or表示或者,-and表示并且,-not表非
</span><span class='line'>echo -------
</span><span class='line'>
</span><span class='line'>#用圆括号来组合测试(不用也是成功的)
</span><span class='line'>find . \( -newer command_2.sh -o -name "v*.sh" \) -type f -print
</span><span class='line'>echo -------
</span><span class='line'>
</span><span class='line'>#找到匹配的文件后,可以执行指定的动作:
</span><span class='line'>find . -name "c*" -exec ls -l {} \;     #-exec或-ok命令将后续参数作为他们的参数直到被"\;"终止,魔串"{}"会被当前文件的完整路径取代</span></code></pre></td></tr></table></div></figure>


<h4>15 . command_6.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># shell命令
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>echo ----grep: General Regular Expression Parser----
</span><span class='line'>#grep [option] pattern [files]
</span><span class='line'>grep "if" ./condition.sh
</span><span class='line'>
</span><span class='line'>echo ----------
</span><span class='line'>grep -c "if" ./condition.sh ./command_1.sh  #搜索多个文件,只输出匹配行数
</span><span class='line'>
</span><span class='line'>echo ----------
</span><span class='line'>grep -v "i" ./condition.sh      #匹配不出现"i"的行
</span><span class='line'>
</span><span class='line'>echo ---------
</span><span class='line'>grep ^# ./condition.sh      #行首为用'^',行尾用'$'
</span><span class='line'>
</span><span class='line'>echo -----------
</span><span class='line'>grep [[:blank:]]echo[[:blank:]] ./condition.sh      #[]中可以使用特殊匹配模式,[:blank:]表示空格或制表符
</span><span class='line'>
</span><span class='line'>echo ------------
</span><span class='line'>grep -E [a-z]\{5\} ./condition.sh   #-E开启扩展匹配:? * + {n} {n,} {n,m}  //匹配0或1次,0或多次,1或多次,n次,n次及以上,n到m次</span></code></pre></td></tr></table></div></figure>


<h4>16 . command_7.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># shell命令的执行
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'># $(cmd)的结果就是cmd命令的输出     //只有需要脚本可移植时才应该用`cmd`(当命令中有特殊字符时要转义)
</span><span class='line'>echo '------------$(cmd)-------------'
</span><span class='line'>echo Current user: $(who)
</span><span class='line'>whoisthere=`who`
</span><span class='line'>echo Current user: $whoisthere
</span><span class='line'>
</span><span class='line'>echo --------------${var}------------
</span><span class='line'># 参数扩展: ${var}      //如${i}_tmp会扩展变量i,而$i_tmp会扩展变量i_tmp
</span><span class='line'>for i in 1 3 5
</span><span class='line'>do
</span><span class='line'>    echo cmd_${i}_cmd
</span><span class='line'>    echo CMD_$i_CMD     #$i_CMD会被扩展为空,不会报错!
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>echo --------
</span><span class='line'># ${param:-default}     若param为空,则把扩展为default
</span><span class='line'># ${#param}             扩展为param的长度
</span><span class='line'># ${param%word}         在param的尾部删除与word匹配的最短串,返回剩余部分
</span><span class='line'># ${param%%word}        尾部,删最长匹配
</span><span class='line'># ${param#word}         头部,删最短匹配
</span><span class='line'># ${param##word}        头部,删最长匹配
</span><span class='line'>unset foo
</span><span class='line'>echo ${foo:-hello you}  #foo为空,扩展为hello you
</span><span class='line'>
</span><span class='line'>foo=something
</span><span class='line'>echo ${foo:-Hello}      #foo不为空,扩展为something
</span><span class='line'>
</span><span class='line'>foo=/usr/bin/X11/startx
</span><span class='line'>echo ${foo#*/}          #删去头部/
</span><span class='line'>echo ${foo##*/}         #删去头部/usr/bin/x11/
</span><span class='line'>
</span><span class='line'>bar=/usr/local/etc/local/networks
</span><span class='line'>echo ${bar%local*}      #删去尾部local/networks
</span><span class='line'>echo ${bar%%local*}     #删去尾部local/etc/local/networks
</span><span class='line'>
</span><span class='line'>echo '-----example for ${ }------'
</span><span class='line'>touch 1.gif 2.gif 3.gif
</span><span class='line'>ls *.gif *.jpg
</span><span class='line'>
</span><span class='line'>for image in *.gif
</span><span class='line'>do
</span><span class='line'>    mv $image ${image%%gif}jpg      #效果如: mv 1.gif 1.jpg
</span><span class='line'>done
</span><span class='line'>ls *.gif *.jpg
</span><span class='line'>rm *.jpg
</span><span class='line'>
</span><span class='line'>#另外:
</span><span class='line'># ${param:+default}     若param不为空,则返回default
</span><span class='line'># ${param:=default}     若param为空,则赋值为default,再返回;否则直接返回param的值
</span><span class='line'># ${param:?default}     若param为空,则输出param: default;否则返回param</span></code></pre></td></tr></table></div></figure>


<h4>17 . command_8.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'># &lt;&lt;TAG 和 TAG中间的内容就好象是标准输入的内容
</span><span class='line'>echo '--------------&lt;&lt;TAG--------------'
</span><span class='line'>cat &lt;&lt;!SomeText!
</span><span class='line'>hello you little boy.
</span><span class='line'>hello you boy.
</span><span class='line'>hello you.
</span><span class='line'>hello.
</span><span class='line'>!SomeText!
</span><span class='line'>
</span><span class='line'>echo -------------
</span><span class='line'>echo "hello." &gt; hei.txt
</span><span class='line'>echo "hello you." &gt;&gt; hei.txt
</span><span class='line'>echo "hello you boy." &gt;&gt; hei.txt
</span><span class='line'>echo "hello you little boy." &gt;&gt; hei.txt
</span><span class='line'>cat ./hei.txt
</span><span class='line'>
</span><span class='line'>echo -------------
</span><span class='line'>#用ed编辑文件hei.txt,编辑命令为1,d,2,...
</span><span class='line'>#  下面的'$'用'\'转义,为了防止shell对其做解释,因为要解释它的应该是ed
</span><span class='line'>ed ./hei.txt &lt;&lt;!SomeOperations!
</span><span class='line'>1
</span><span class='line'>d
</span><span class='line'>2
</span><span class='line'>\$s/you/me/
</span><span class='line'>w
</span><span class='line'>q
</span><span class='line'>!SomeOperations!
</span><span class='line'>cat ./hei.txt
</span><span class='line'>rm ./hei.txt
</span><span class='line'>
</span><span class='line'>#调试shell程序
</span><span class='line'># set -o noexec, 简写set -n, 命令行sh -n foo.sh         //只检查语法,不执行
</span><span class='line'># set -o verbose, 简写set -v, 命令行sh -v foo.sh        //执行命令前先回显
</span><span class='line'># set -o xtrace, 简写set -x, 命令行sh -x foo.sh         //执行命令后回显
</span><span class='line'># set -o nounset, 简写set -u                            //若使用了未定义的变量,给出出错信息
</span><span class='line'>echo '----------set -v---------'
</span><span class='line'>set -v
</span><span class='line'>ls
</span><span class='line'>set +v          #+v表示关闭verbose选项
</span><span class='line'>
</span><span class='line'>echo '----------set -u---------'
</span><span class='line'>set -u
</span><span class='line'>#echo $nodefine  #使用了为定义的变量,给出错误信息
</span><span class='line'>
</span><span class='line'>#捕获退出信号,输出变量值
</span><span class='line'>echo ------------trap handler signal-----------
</span><span class='line'>foovar="i'm something important."
</span><span class='line'>trap 'echo Exiting: foovar= $foovar' EXIT</span></code></pre></td></tr></table></div></figure>


<h4>18 . dialog.sh</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>#dialog命令: linux控制台下的简单GUI程序
</span><span class='line'>#对话框   标题                  消息框
</span><span class='line'>dialog --title "Message you" --msgbox "Tell you something you do not know." 8 40
</span><span class='line'>if [ $? = 0 ]; then
</span><span class='line'>    dialog --infobox "your choose: OK" 5 20
</span><span class='line'>    sleep 1
</span><span class='line'>    dialog --clear
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>#对话框   标题                       复选列表    提示        高  宽 选项数 选项编号,文本,状态....                      标准错误重定向(dialog的输出)
</span><span class='line'>dialog --title "Check box example" --checklist "Pick Number" 15  25   3     1 "one" "off" 2 "two" "on" 3 "three" "off"  2&gt; /tmp/tmp_file_$$.txt
</span><span class='line'>ret=$?                                  #保存dialog的返回值
</span><span class='line'>res=$(cat /tmp/tmp_file_$$.txt)         #保存dialog的输出值(用户选择的选项)
</span><span class='line'>if [ $ret = 0 ]; then
</span><span class='line'>    dialog --infobox "Your choise: $res" 10 30
</span><span class='line'>else
</span><span class='line'>    dialog --infobox "Bad, you canceled!" 10 30
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>echo "$res"</span></code></pre></td></tr></table></div></figure>


<h4>19. merge.sh : 合并list.txt中列出的当前目录下的文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>if [ -f list2.txt ]
</span><span class='line'>then
</span><span class='line'>    rm -f list2.txt
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>cat ./list.txt | while read line　　　　　　#读取list.txt的每一行
</span><span class='line'>do
</span><span class='line'>    echo ${line#*[[:blank:]]} &gt;&gt; list2.txt      #去掉行首的序号和空白字符
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>x=0         #文件序号
</span><span class='line'>if [ -f merged.txt ]
</span><span class='line'>then
</span><span class='line'>    rm -r merged.txt
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>cat ./list2.txt | while read line
</span><span class='line'>do
</span><span class='line'>    x=$(($x + 1))
</span><span class='line'>    echo "************** $x . $line : start ************" &gt;&gt; merged.txt
</span><span class='line'>    cat ./$line &gt;&gt; merged.txt
</span><span class='line'>    echo "************** $x . $line : end **************" &gt;&gt; merged.txt
</span><span class='line'>    echo "                                               " &gt;&gt; merged.txt
</span><span class='line'>    echo "                  @ @                       " &gt;&gt; merged.txt
</span><span class='line'>    echo "                 ( V )                       " &gt;&gt; merged.txt
</span><span class='line'>    echo "                  ^ ^                       " &gt;&gt; merged.txt
</span><span class='line'>    echo "                       .=.=.0             " &gt;&gt; merged.txt
</span><span class='line'>    echo "                                             " &gt;&gt; merged.txt
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>if [ -f list2.txt ]
</span><span class='line'>then
</span><span class='line'>    rm -f list2.txt
</span><span class='line'>fi                                       </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git概述及初配置]]></title>
    <link href="http://cosail.github.io/blog/2014/10/12/git-start/"/>
    <updated>2014-10-12T20:16:46+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/12/git-start</id>
    <content type="html"><![CDATA[<blockquote><p>以下是阅读《Pro Git》时的记录<br/>
《Pro Git》Scott Chacon 2010, licensed under the Creative Commons Attribution-Non Commercial-Share Alike 3.0 license.</p></blockquote>

<h3>1. 版本控制系统（VCS）</h3>

<p>VCS的主要作用：记录文件的变化，保存项目过去某些时间点的状态，回溯到之前的状态。<br/>
<code>即保存和恢复数据。</code></p>

<ul>
<li><p>本地版本控制系统: 保存并管理文件补丁（文件内容前后的变化），不断打补丁。<br/>
<code>自己在自己的电脑上干自己的事。</code></p></li>
<li><p>集中化版本控制系统（CVCS）：单一的集中管理服务器保存所有文件的修订版本。<br/>
<code>可有多人用客户端访问中央服务器，取出文件，提交更新，协同合作。
  若中央服务器故障，则可能丢失数据，且大家都无法在故障时段提交更新。</code></p></li>
<li><p>分布式版本控制系统（DVCS）：  客户端有代码仓库的完整镜像，和服务器一样掌握所有必要信息。<br/>
<code>大家可以在自己电脑上提交（异步），必要时推到服务器（同步）。</code></p></li>
</ul>


<h3>2. Git的特点</h3>

<ul>
<li><p>直接给更新的文件作快照，并保存快照的索引。<br/>
<code>而不是像其他CVS一样每次仅仅记录变化的部分</code></p></li>
<li><p>本地保存更新历史，断网时可以向本机提交更新。<br/>
<code>Subversion和CVS断网时无法提交更新，因为仓库数据在服务器上维护着，本机信息不足。</code></p></li>
<li><p>保持数据完整性<br/>
<code>保存文件或目录需要先计算校验和（使用SHA-1算法计算出的一个哈希值，作为指纹），并将结果作为唯一标识及索引。你动了哪里，Git就会知道。</code></p></li>
<li><p>高可靠性<br/>
<code>在Git，只要在本机提交后（本机操作很方便快捷），就不必担心弄丢弄乱数据了（可在本机恢复）；若再定期推送到远端仓库的话，就更保险了。</code></p></li>
<li><p>git三状态：已修改，已暂存(staged)，已提交。</p>

<ul>
<li>已修改：修改了某文件</li>
<li>已暂存：把已修改文件列为下次要提交的文件</li>
<li>已提交：文件已安全地保存在本机数据库中</li>
</ul>
</li>
</ul>


<p>基本的 Git 工作流程如下所示:</p>

<ol>
<li><p>在工作目录中修改某些文件。
<code>工作目录中的文件实际上都是从 git 目录中的压缩对象数据库中提取出来的，我们在工作目录中编辑文件。</code></p></li>
<li><p>对这些修改了的文件作快照,并保存到暂存区域。<br/>
<code>暂存区其实是个索引文件，放在 git 目录中。</code></p></li>
<li><p>提交更新,将保存在暂存区域的文件快照转储到 git 目录中。   <br/>
<code>每个项目有一个.git/目录，是保存元数据和对象数据库的地方。克隆仓库时拷贝的就是里边的数据。</code></p></li>
</ol>


<h3>3. 初次配置Git</h3>

<p>Git 有专门用来配置和读取相应工作环境变量的工具： git config 命令（实际调用 git-config 命令）。</p>

<p>环境变量们住在这里：</p>

<ol>
<li><p>/etc/gitconfig：系统中对所有用户都普遍适用的配置。<br/>
<code>git config 用 --system 选项, 读写这个文件。</code></p></li>
<li><p>~/.gitconfig：用户目录下的配置文件只适用于该用户。<br/>
<code>git config 用 --global 选项, 读写这个文件。</code></p></li>
<li><p>当前项目的 .git/config ：这里的配置仅仅针对当前项目有效。</p></li>
</ol>


<p><strong><em>每一个级别的配置都会覆盖上层的相同配置, 所以.git/config 里的配置会覆盖 前两者中的同名变量。</em></strong></p>

<ul>
<li>设置用户信息：用户名称，邮件地址</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global user.name "username"
</span><span class='line'>$ git config --global user.email username@126.com
</span><span class='line'>// --global表示更改的是用户住目录中的配置文件，去掉该选项则修改的是当前项目的配置文件。</span></code></pre></td></tr></table></div></figure>


<p><code>每次 Git 提交时会说明是谁提交了更新, 随之纳入历史记录。</code></p>

<ul>
<li>设置文本编辑器</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global core.editor vi</span></code></pre></td></tr></table></div></figure>


<p><code>有时 Git 会提示你输入，这时会调用这里的文本编辑器。</code></p>

<ul>
<li>设置差异分析工具</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global merge.tool vimdiff</span></code></pre></td></tr></table></div></figure>


<p><code>在解决合并冲突时会使用差异分析工具，Git 可以理解 kdiff3,tkdiff,meld,xxdiff,emerge,vimdiff,gvimdiff,ecmerge,
，opendiff 等合并工具的输出信息。</code></p>

<ul>
<li>查看配置信息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --list</span></code></pre></td></tr></table></div></figure>


<p><code>若有重复的变量名, 说明它们来自不同的配置文件,  Git 实际采用的是最后一个。</code></p>

<p>也可以直接查阅某个环境变量的设定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config user.name</span></code></pre></td></tr></table></div></figure>


<h3>4. Git 帮助命令</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git help &lt;verb&gt;
</span><span class='line'>$ git &lt;verb&gt; --help
</span><span class='line'>$ man git-&lt;verb&gt;</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[添加duoshuo评论到octopress]]></title>
    <link href="http://cosail.github.io/blog/2014/10/08/tian-jia-duoshuoping-lun-dao-octopress/"/>
    <updated>2014-10-08T10:25:36+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/08/tian-jia-duoshuoping-lun-dao-octopress</id>
    <content type="html"><![CDATA[<p>octopress本身已经有disqus评论,但是在国内加载速度太慢，所以还是以国内的duoshuo评论替代之。</p>

<h3>主要涉及的文件</h3>

<p>下面根目录“/”为octopress/目录</p>

<pre><code>/_config.ymlz ：添加多说相关设置变量  
/source/_layouts/post.html ：为博文页添加duoshuo评论  
/source/_layouts/page.html ：为普通页面添加duoshuo评论  
/source/_include/post/duoshuo.html ：duoshuo评论框  
/source/_include/article.html ：文章上面加一个评论链接  
/source/_include/asides/duoshuo.html ：duoshuo最新评论显示  
/source/index.html ：  为首页添加duoshuo评论  
</code></pre>

<p>  <code>多说评论框把评论提交到多说服务器，多说最新评论显示从服务器拉取评论以显示在我们的页面上。  
下面一个文件一个文件地添加代码：</code></p>

<h3>编辑文件/_config.ymlz</h3>

<p>添加如下几行：</p>

<pre><code>duoshuo_short_name: yourname #用你自己duoshuo名（需要去多说网站获取）  
duoshuo_asides_num: 10      # 侧边栏评论显示条目数  
duoshuo_asides_avatars: 1   # 侧边栏评论是否显示头像  
duoshuo_asides_time: 1      # 侧边栏评论是否显示时间  
duoshuo_asides_title: 1     # 侧边栏评论是否显示标题  
duoshuo_asides_admin: 1     # 侧边栏评论是否显示作者评论  
duoshuo_asides_length: 18   # 侧边栏评论截取的长度  
</code></pre>

<h3>编辑文件/source/_layouts/post.html</h3>

<p>在disqus代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">disqus_short_name</span> <span class="nx">and</span> <span class="nx">page</span><span class="p">.</span><span class="nx">comments</span> <span class="o">==</span> <span class="kc">true</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Comments</span><span class="o">&lt;</span><span class="err">/h1&gt;  </span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;disqus_thread&quot;</span> <span class="nx">aria</span><span class="o">-</span><span class="nx">live</span><span class="o">=</span><span class="s2">&quot;polite&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="o">%</span> <span class="nx">include</span> <span class="nx">post</span><span class="o">/</span><span class="nx">disqus_thread</span><span class="p">.</span><span class="nx">html</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;  </span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/section&gt;  </span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下方添加多说评论框（在文件/source/_include/post/duoshuo.html中实现）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">duoshuo_short_name</span> <span class="nx">and</span> <span class="nx">page</span><span class="p">.</span><span class="nx">comments</span> <span class="o">!=</span> <span class="kc">false</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="err">多说评论：</span><span class="o">&lt;</span><span class="err">/h3&gt;  </span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;comments&quot;</span> <span class="nx">aria</span><span class="o">-</span><span class="nx">live</span><span class="o">=</span><span class="s2">&quot;polite&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="o">%</span> <span class="nx">include</span> <span class="nx">post</span><span class="o">/</span><span class="nx">duoshuo</span><span class="p">.</span><span class="nx">html</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;  </span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/section&gt;  </span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>上面是为了使rake new_post["..."]产生的文章页面下包含评论框；若要使用rake new_page["..."]产生的页面下也包含评论框，可以在/source/_layouts/page.html做同样添加。如下：</code></p>

<h3>编辑文件/source/_layouts/page.html</h3>

<p>就如前面index.html中的添加一样，在disqus代码后添加相应代码，这里不赘述了。</p>

<h3>编辑文件/source/_include/post/duoshuo.html</h3>

<p>这个文件需要你新建，然后复制粘贴以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--</span> <span class="err">在</span><span class="nx">octopress</span><span class="o">/</span><span class="err">目录的</span><span class="nx">_config</span><span class="p">.</span><span class="nx">yml</span><span class="err">中已经定义了</span><span class="nx">duoshuo_short_name</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">duoshuo_short_name</span> <span class="o">!=</span> <span class="kc">false</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="c">&lt;!--</span> <span class="err">多说评论框</span> <span class="nx">start</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ds-thread&quot;</span>  <span class="nx">data</span><span class="o">-</span><span class="nx">title</span><span class="o">=</span><span class="s2">&quot;添加duoshuo评论到octopress&quot;</span> <span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--</span> <span class="err">多说评论框</span> <span class="nx">end</span> <span class="o">--&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--</span> <span class="err">多说公共</span><span class="nx">JS</span><span class="err">代码</span> <span class="nx">start</span> <span class="p">(</span><span class="err">一个网页只需插入一次</span><span class="p">)</span> <span class="o">--&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">duoshuoQuery</span> <span class="o">=</span> <span class="p">{</span><span class="nx">short_name</span><span class="o">:</span><span class="s2">&quot;cosail&quot;</span><span class="p">};</span>
</span><span class='line'>          <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">ds</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">ds</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span><span class="nx">ds</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">ds</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">==</span> <span class="s1">&#39;https:&#39;</span> <span class="o">?</span> <span class="s1">&#39;https:&#39;</span> <span class="o">:</span> <span class="s1">&#39;http:&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;//static.duoshuo.com/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">ds</span><span class="p">.</span><span class="nx">charset</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>               <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">ds</span><span class="p">);</span>
</span><span class='line'>          <span class="p">})();</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--</span> <span class="err">多说公共</span><span class="nx">JS</span><span class="err">代码</span> <span class="nx">end</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>上面就是duoshuo评论框模块了。</code></p>

<h3>编辑文件/source/_include/article.html</h3>

<p>在disqus代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">disqus_short_name</span> <span class="nx">and</span> <span class="nx">page</span><span class="p">.</span><span class="nx">comments</span> <span class="o">!=</span> <span class="kc">false</span> <span class="nx">and</span> <span class="nx">post</span><span class="p">.</span><span class="nx">comments</span> <span class="o">!=</span> <span class="kc">false</span> <span class="nx">and</span> <span class="nx">site</span><span class="p">.</span><span class="nx">disqus_show_comment_count</span> <span class="o">==</span> <span class="kc">true</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">|</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#disqus_thread&quot;</span><span class="o">&gt;</span><span class="nx">Comments</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下方添加duoshuo代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">duoshuo_short_name</span> <span class="nx">and</span> <span class="nx">page</span><span class="p">.</span><span class="nx">comments</span> <span class="o">!=</span> <span class="kc">false</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">|</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#comments&quot;</span><span class="o">&gt;</span><span class="nx">Comments</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>这样就在文章上面加上了一个评论链接。</code></p>

<h3>编辑文件/source/_include/asides/duoshuo.html</h3>

<p>这个文件需要你新建，然后复制粘贴以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="err">最新评论</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">ul</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ds-recent-comments&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">num</span><span class="o">-</span><span class="nx">items</span><span class="o">=</span><span class="s2">&quot;10&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">show</span><span class="o">-</span><span class="nx">avatars</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">show</span><span class="o">-</span><span class="nx">time</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">show</span><span class="o">-</span><span class="nx">title</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">show</span><span class="o">-</span><span class="nx">admin</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">excerpt</span><span class="o">-</span><span class="nx">length</span><span class="o">=</span><span class="s2">&quot;18&quot;</span><span class="o">&gt;&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">index</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="c">&lt;!--</span><span class="err">多说</span><span class="nx">js</span><span class="err">加载开始，一个页面只需要加载一次</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">duoshuoQuery</span> <span class="o">=</span> <span class="p">{</span><span class="nx">short_name</span><span class="o">:</span><span class="s2">&quot;cosail&quot;</span><span class="p">};</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ds</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">ds</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span><span class="nx">ds</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">ds</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;http://static.duoshuo.com/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">ds</span><span class="p">.</span><span class="nx">charset</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">ds</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="c">&lt;!--</span><span class="err">多说</span><span class="nx">js</span><span class="err">加载结束，一个页面只需要加载一次</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>上面的代码是为了在侧边栏里显示最新评论，为了把它添加到侧边栏，还需在_config.yml 文件中的 blog_index_asides 行或 page_asides 行或 post_asides 行中添加：</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">asides</span><span class="o">/</span><span class="nx">duoshuo</span><span class="p">.</span><span class="nx">html</span>
</span></code></pre></td></tr></table></div></figure>


<h3>编辑文件/source/index.html</h3>

<p>在代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;blog-index&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">...</span><span class="err">省略</span><span class="p">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>的<code>&lt;/div&gt;</code>之前添加一段，像下面这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;blog-index&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">...</span><span class="err">省略</span><span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--</span> <span class="err">增加评论框</span> <span class="o">--&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">duoshuo_short_name</span> <span class="nx">and</span> <span class="nx">page</span><span class="p">.</span><span class="nx">comments</span> <span class="o">!=</span> <span class="kc">false</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;duoshuo_thread&quot;</span> <span class="nx">aria</span><span class="o">-</span><span class="nx">live</span><span class="o">=</span><span class="s2">&quot;polite&quot;</span><span class="o">&gt;</span> <span class="p">{</span><span class="o">%</span> <span class="nx">include</span> <span class="nx">post</span><span class="o">/</span><span class="nx">duoshuo</span><span class="p">.</span><span class="nx">html</span> <span class="o">%</span><span class="p">}</span> <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/section&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>这样就在Blog的开始页面index.html上加入了评论功能。</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用octopress部署github博客]]></title>
    <link href="http://cosail.github.io/blog/2014/10/04/octopress/"/>
    <updated>2014-10-04T16:41:42+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/04/octopress</id>
    <content type="html"><![CDATA[<h3>依赖</h3>

<ul>
<li>octopress依赖ruby, 可能你得先执行:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install ruby ruby-dev</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在github创建自己的Web站点:<br/>
<a href="https://pages.github.com/">看官方示例</a></li>
</ul>


<h3>安装octopress:</h3>

<pre><code>git clone git://github.com/imathis/octopress.git octopress  //下载源码
cd octopress

切换gem源为国内源，方法如下：  
**先查看当前源(默认为官方源)**
gem source -l
**删除官方源**,如
gem source -r http://rubygems.org/
**添加淘宝源**
gem source -a http://ruby.taobao.org/

**安装bundler**
    gem install bundler

为了使后面的rake generate不出错, 在octopress/下的Gemfile文件首行:  
https://rubygems.org/替换为http://ruby.taobao.org/  
并在文件末尾添加: 
gem 'execjs'    //安装execjs
gem 'therubyracer'     //execjs还需要后端才能处理，想简单解决可以加上这个 Gem

bundle install  //安装octopress (若安装过程中出现问题-例如需要root权限来安装某些依赖,请根据提示处理之)
rake install    //安装octopress默认主题
</code></pre>

<h3>配置Octopress:</h3>

<pre><code>修改文件 _config.yml:
按自己情况填写url,title,subtitle,author,email等信息,
其中url为在github创建的仓库地址,如:  
 git@github.com:cosail/cosail.github.io或https://github.com/cosail/cosail.github.io。

为了避免网页加载太慢, 在source/目录中执行:
grep "googleapis" ./ -r     //查找需要修改的文件
替换文件中fonts.googleapis.com为fonts.useso.com(360提供的谷歌字库)，
替换文件中ajax.googleapis.com为ajax.useso.com(360提供的谷歌公用库)，
这样你调用这些文件的时候就快多了。

在octopress根目录执行 :
rake setup_github_pages    //按照要求输入仓库地址等，这个命令会在根目录下新建_deploy目录，
这个会push到仓库的master分支，也就是访问博客的文件。
    rake generate  //这个会按照既定规则生成静态文件的博客。
rake deploy    //将前一步生成的文件拷贝到_deploy目录,并push到github

第一次执行 rake deploy 的时候可能会报错,解决方法是进入_deploy目录执行:
git pull origin +master

然后再次尝试部署:
cd ..
rake deploy
</code></pre>

<p><code>现在就应该可以正常显示博客页面了!让我们预览一下:</code></p>

<h3>配置完成后, 进行本地预览:</h3>

<pre><code>rake preview //在浏览器中进行本地预览了,访问http://localhost:4000
</code></pre>

<h3>提交源码用于备份:</h3>

<pre><code>可以将当前octopress的源码备份到github的source分支下,在octopress目录下执行:
git add .
git commit -m 'Initial source commit'
git push origin source
</code></pre>

<h3>新建文章:</h3>

<pre><code>rake new_post["文章名"] //文章文件将存储在source/_posts目录下，按照Jekyll的命名规范命名：YYYY-MM-DD-post-文章名.markdown。
</code></pre>

<h3>新建页面:</h3>

<pre><code>添加页面cosail.github.io/new-page/ :
rake new_page[new-page] //creates /source/new-page/index.markdown
rake new_page[new-page/page.markdown] //creates /source/new-page/page.markdown  
</code></pre>

<p>访问试试: <a href="http://cosail.github.io/new-page/">cosail.github.io/new-page/</a></p>

<h3>使用octopress: 创建,编辑,生成并发布文章</h3>

<pre><code>rake new_post["文章名"]  //新建文章
编辑文章: 编辑source/_posts/下的相应markdown文件
rake generate     //生成
可选择备份一下:
        git add .
        git commit -am "back up for source/." 
        git push origin source
rake deploy     //发布
</code></pre>

<h3>另外一点小改动:</h3>

<p>为了点击链接在新标签页中打开, <br/>
在source/_include/custom/head.html文件末尾添加一行 :<br/>
   <code>&lt;base target=”_ blank”&gt;</code><br/>
点击试试: <a href="http://www.baidu.com">百度</a></p>

<h3>参考:</h3>

<p><a href="http://www.itzhoulin.com/category/wordpress/">利用octopress部署博客到github</a><br/>
<a href="https://ruby-china.org/topics/1605">执行 rails server 报错 Could not find a JavaScript runtime</a><br/>
<a href="http://jingyan.baidu.com/album/afd8f4de4595ac34e386e969.html?picindex=1">解决WP加载谷歌ajax.googleapis.com缓慢问题</a><br/>
<a href="http://zhidao.baidu.com/link?url=688qT_eBlOJIcHrFM1wmHFYBLWozjH1cE1FUW8ezjOyT6l4kxnlndXu1Uy_-5mZr6G54eES8NtkJfihDPXkovq">在html中怎么设置全部链接在新标签打开</a><br/>
<a href="http://www.oschina.net/question/218617_66108">markdown 如何显示html标签</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生成SSH Key,并设置github]]></title>
    <link href="http://cosail.github.io/blog/2014/10/04/ssh_key_for_github/"/>
    <updated>2014-10-04T16:35:07+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/04/ssh_key_for_github</id>
    <content type="html"><![CDATA[<h3>生成SSH key, 设置github</h3>

<p><a href="https://help.github.com/articles/generating-ssh-keys/">见github帮助:Generating SSH keys</a></p>

<p><code>注意最下面一行有个链接,说明如何改变一个已存在仓库的URL,如我们要使用SSH访问方式,这样就可以避免老是要输入帐户名和密码了:</code><a href="https://help.github.com/articles/changing-a-remote-s-url/">Changing a remote&rsquo;s URL.</a></p>

<h3>如果通过HTTPS访问,也可以让github记住你的用户名和密码(记住一段时间)</h3>

<p><a href="https://help.github.com/articles/caching-your-github-password-in-git/">Caching your GitHub password in Git</a><br/>
<code>比较: SSH访问是通过SSH key, 而不是用户名和密码来认证.</code></p>
]]></content>
  </entry>
  
</feed>
