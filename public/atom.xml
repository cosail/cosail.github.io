<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[cosail's blog]]></title>
  <link href="http://cosail.github.io/atom.xml" rel="self"/>
  <link href="http://cosail.github.io/"/>
  <updated>2014-10-31T00:13:54+08:00</updated>
  <id>http://cosail.github.io/</id>
  <author>
    <name><![CDATA[cosail]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用dot画图]]></title>
    <link href="http://cosail.github.io/blog/2014/10/30/shi-yong-dothua-you-xiang-ceng-ji-tu/"/>
    <updated>2014-10-30T22:34:52+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/30/shi-yong-dothua-you-xiang-ceng-ji-tu</id>
    <content type="html"><![CDATA[<p>dot用来绘制层次的有向图，能够很好的调整图中的节点和边的布局。<br/>
dot能以命令行程序，web可视化服务，或兼容的图形接口的形式使用。<br/>
dot程序可读入用领域特定语言-DOT语言写的文本文件，输出多种格式的图形格式文件，如GIF, PNG, SVG, PDF, PostScript。</p>

<p>dot绘图过程主要分四步：
1. 消除图中的环
2. 为节点指定层级，层级决定了节点的Y坐标
3. 排列层级中的节点，避免交叉
4. 设置节点的X坐标，使边的长度较短，确定边的路径</p>

<p>DOT语言描述三种主要对象：图，节点，边。<br/>
主图可以是有向图（digraph）、无向图（graph），而在一个主图内可以定义若干由节点和边构成的子图。无向图和有向图分别如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>graph G {
</span><span class='line'>  main--parse--execute;
</span><span class='line'>  main--cleanup;
</span><span class='line'>  main--printf;
</span><span class='line'>  
</span><span class='line'>  execute--printf;
</span><span class='line'>  execute--compare;
</span><span class='line'>
</span><span class='line'>  init--make_string;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><img src="" alt="" /></p>

<p>digraph G {
  main->parse->execute;
  main->cleanup;
  main->printf;</p>

<p>  execute->printf;
  execute->compare;</p>

<p>  init->make_string;
}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据结构概述]]></title>
    <link href="http://cosail.github.io/blog/2014/10/24/shu-ju-jie-gou-gai-shu/"/>
    <updated>2014-10-24T20:19:57+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/24/shu-ju-jie-gou-gai-shu</id>
    <content type="html"><![CDATA[<h3>&hellip;</h3>

<h3>Tree</h3>

<h5>RB-Tree</h5>

<p>红黑树本质上就是一棵查找二叉树，能用查找二叉树做的事情也就能用红黑树来做。<br/>
不同的是红黑树会自动调整，让自己保持树的平衡状态，从而保证每次查找，插入，删除操作在 O（lg n) 的时间内完成。</p>

<p><code>变形</code>：用红黑树可以实现<strong>区间树</strong>。</p>

<h3>&hellip;</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typeof获取表达式类型]]></title>
    <link href="http://cosail.github.io/blog/2014/10/23/typeofhuo-qu-biao-da-shi-lei-xing/"/>
    <updated>2014-10-23T17:09:08+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/23/typeofhuo-qu-biao-da-shi-lei-xing</id>
    <content type="html"><![CDATA[<h3>typeof 关键字</h3>

<p><code>typeof</code>是 C 语言的一个新扩展，它告诉编译器你要使用某个表达式的类型（而不需要显示的指明该类型），如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">typeof</span><span class="p">(</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">](</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>  <span class="n">var</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>上面定义了一个变量var，它的类型为：函数指针数组</code></p>

<p>也可以用类型而不是表达式，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">typeof</span><span class="p">(</span> <span class="kt">int</span> <span class="o">*</span> <span class="p">)</span>  <span class="n">var</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>变量 var 的类型为： int *。这个好像用处不大？</code></p>

<p>一般情况下用<code>typeof</code>，如果要于ISO C兼容的话，用双下划线的形式<code>__typeof__</code>。</p>

<p>你可以在能用 typedef 的所有地方使用 typeof，如：类型声明，类型转换，或 sizeof()，typeof()中。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">typeof</span> <span class="p">(</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="n">y</span><span class="p">;</span>      <span class="c1">// y 的类型为：指针 x 指向的类型  </span>
</span><span class='line'><span class="n">typeof</span><span class="p">(</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="n">y</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>  <span class="c1">// 指针 x 指向的类型的数组类型  </span>
</span><span class='line'><span class="n">typeof</span> <span class="p">(</span><span class="n">typeof</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)[</span><span class="mi">4</span><span class="p">])</span> <span class="n">y</span><span class="p">;</span>  <span class="c1">// 字符指针数组类型</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想把T定义成一个表达式的类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">typdef</span> <span class="n">typeof</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span> <span class="n">T</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>限制</h3>

<p>typeof 中的类型名不能包含 extern 或 static，不过允许包含类型限定符 const 或 volatile。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">typeof</span><span class="p">(</span><span class="k">extern</span> <span class="kt">int</span><span class="p">)</span> <span class="n">a</span><span class="p">;</span>       <span class="c1">// 不可以</span>
</span><span class='line'><span class="k">extern</span> <span class="n">typeof</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="p">)</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>  <span class="c1">// 可以</span>
</span></code></pre></td></tr></table></div></figure>


<h3>应用</h3>

<p>gcc 编译器支持该扩展，在linux内核中应用非常广泛，如 linux-source-3.13.0/include/linux/kernel.h 文件中的两个宏：</p>

<p>下面定义一个安全的 max 宏，避免参数被多次展开的错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define max(x, y) ({                         \</span>
</span><span class='line'><span class="cp">    typeof(x) _max1 = (x);                  \</span>
</span><span class='line'><span class="cp">    typeof(y) _max2 = (y);                  \</span>
</span><span class='line'><span class="cp">    (void) (&amp;_max1 == &amp;_max2);              \</span>
</span><span class='line'><span class="cp">    _max1 &gt; _max2 ? _max1 : _max2; })</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面第2行获取结构体（类型名为 type）中的成员（成员变量名为 member）相对结构体<br/>
起始地址的偏移量，第3行由成员的起始地址（ptr）减去其偏移量得到结构体的起始地址：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define container_of(ptr, type, member) ({         \</span>
</span><span class='line'><span class="cp"> const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr); \</span>
</span><span class='line'><span class="cp"> (type *)( (char *)__mptr - offsetof(type,member) );})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>类似的__auto_type</h3>

<p>可以在 gnu c 中使用<code>__auto_type</code>来声明一个变量的类型，如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">__auto_type</span>  <span class="n">var</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>   <span class="c1">// 类似C++里的 auto</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gcc.gnu.org/onlinedocs/gcc/Typeof.html">参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel中的红黑树]]></title>
    <link href="http://cosail.github.io/blog/2014/10/23/linux-kernelzhong-de-rbtree/"/>
    <updated>2014-10-23T15:18:34+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/23/linux-kernelzhong-de-rbtree</id>
    <content type="html"><![CDATA[<blockquote><p>参考自Linux内核源码：<br/>
linux-source-3.13.0/Documentation/rbtree.txt<br/>
linux-source-3.13.0/include/linux/rbtree.h<br/>
linux-source-3.13.0/lib/rbtree.c</p></blockquote>

<h3>1. rbtree.txt中对红黑树的介绍</h3>

<p><code>红黑树</code>是一种自平衡的二叉搜索树，用来存储可排序的 key / value 对。</p>

<p>红黑树和 AVL 树相似，但提供更为实时的插入，删除（分别用最多两次，三次旋转操作完成平衡），有 O（log n）的查找时间复杂度。</p>

<p><code>Linux红黑树</code>为了优化速度，不是在红黑树节点中用指针指向被组织的数据结构，而是将红黑树节点嵌入到它组织的数据结构中（这样可以减少一次间接的地址引用，也有更好的缓存局部性）。</p>

<p>使用者要自己写二叉树的查找，插入函数（使用那些已经实现的红黑树函数）。</p>

<h3>2. Linux红黑树的使用及说明</h3>

<h5>2.1 创建一个新的红黑树</h5>

<p>红黑树中的数据节点就是一个包含 struct rb_node 成员的结构体：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">mytype</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">rb_node</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">keystring</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>那如何由红黑树上的节点 rb_node 去访问相应的数据呢？在头文件&lt; linux/kernel.h > 中定义了一个宏 container_of，可用来从红黑树维护的节点得到包含着节点的结构体，然后就能访问该结构体的所有成员了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * container_of - 由指向结构体成员变量的指针转换为该结构体本身的指针(得到包含它的容器)。</span>
</span><span class='line'><span class="cm"> * @ptr: 指向 member 的指针</span>
</span><span class='line'><span class="cm"> * @type:   包含 member 的结构体的类型</span>
</span><span class='line'><span class="cm"> * @member:  成员变量名</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define container_of(ptr, type, member) ({           \</span>
</span><span class='line'><span class="cp"> const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr); \</span>
</span><span class='line'><span class="cp"> (type *)( (char *)__mptr - offsetof(type,member) );})</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>上面第 8 行获取结构体（类型名为 type）中的成员（成员变量名为 member）相对结构体起始地址的偏移量；第 9 行由成员的起始地址（ptr）减去其偏移量得到结构体的起始地址。</code><br/>
关于第 8 行的<code>typeof()</code>参看<a href="http://localhost:4000/blog/2014/10/23/typeofhuo-qu-biao-da-shi-lei-xing/">这里</a>。</p>

<p>我们也可以用 rb_entry 宏，它只是换了个更友好的名字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define    rb_entry(ptr, type, member)  container_of(ptr, type, member)</span>
</span></code></pre></td></tr></table></div></figure>


<p>红黑树的根是一个 struct rb_root，看代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">rb_root</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">rb_node</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">#define RB_ROOT  (struct rb_root) { NULL, }</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">rb_root</span> <span class="n">mytree</span> <span class="o">=</span> <span class="n">RB_ROOT</span><span class="p">;</span>   <span class="c1">// 初始化红黑树的根</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2.2 在红黑树中查找一个值</h5>

<p>红黑树的查找很简单，就是二叉树的查找。前面说过，你需要写自己的查找函数，像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">mytype</span> <span class="o">*</span><span class="nf">my_search</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_root</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">rb_node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">mytype</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">container_of</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mytype</span><span class="p">,</span> <span class="n">node</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">result</span> <span class="o">=</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">data</span><span class="o">-&gt;</span><span class="n">keystring</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">rb_left</span><span class="p">;</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">rb_right</span><span class="p">;</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>                  <span class="k">return</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2.3 在红黑树中插入一个值</h5>

<p>先查找得到 data 应插入的位置，然后插入相应的新节点并调整树使其平衡。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">my_insert</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_root</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mytype</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">rb_node</span> <span class="o">**</span><span class="n">new</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">rb_node</span><span class="p">),</span> <span class="o">*</span><span class="n">parent</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 查找应插入的位置 */</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">new</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">mytype</span> <span class="o">*</span><span class="n">this</span> <span class="o">=</span> <span class="n">container_of</span><span class="p">(</span><span class="o">*</span><span class="n">new</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mytype</span><span class="p">,</span> <span class="n">node</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">keystring</span><span class="p">,</span> <span class="n">this</span><span class="o">-&gt;</span><span class="n">keystring</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">parent</span> <span class="o">=</span> <span class="o">*</span><span class="n">new</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">new</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">((</span><span class="o">*</span><span class="n">new</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">rb_left</span><span class="p">);</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">new</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">((</span><span class="o">*</span><span class="n">new</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">rb_right</span><span class="p">);</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span> <span class="c1">// 该值已存在！不用再插入</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 插入新节点并调整树使其平衡 */</span>
</span><span class='line'>  <span class="n">rb_link_node</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">node</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">new</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rb_insert_color</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">node</span><span class="p">,</span> <span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2.4 在红黑树中删除或替换一个值</h5>

<p>要删除一个已有节点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* 删除节点函数原型 */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">rb_erase</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">victim</span><span class="p">,</span> <span class="k">struct</span> <span class="n">rb_root</span> <span class="o">*</span><span class="n">tree</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 删除节点示例代码 */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mytype</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">mysearch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mytree</span><span class="p">,</span> <span class="s">&quot;walrus&quot;</span><span class="p">);</span>  <span class="c1">// 查找节点位置</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">rb_erase</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">node</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mytree</span><span class="p">);</span>  <span class="c1">// 从红黑树删除节点</span>
</span><span class='line'>  <span class="n">myfree</span><span class="p">(</span><span class="n">data</span><span class="p">);</span> <span class="c1">// 释放结构体内存空间</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>替换一个已有节点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">rb_replace_node</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">old</span><span class="p">,</span> <span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">new</span><span class="p">,</span> <span class="k">struct</span> <span class="n">rb_root</span> <span class="o">*</span><span class="n">tree</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>注意：替换节点不会重新排序，若替换后键值改变了，红黑树就可能不正确了。</code></p>

<h5>2.5 按序遍历红黑树</h5>

<p>提供了 4 个函数用来遍历红黑树（也可以是其它二叉树）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* 函数原型 */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="nf">rb_first</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_root</span> <span class="o">*</span><span class="n">tree</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="nf">rb_last</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_root</span> <span class="o">*</span><span class="n">tree</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="nf">rb_next</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="nf">rb_prev</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 遍历红黑树示例代码 */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">node</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">node</span> <span class="o">=</span> <span class="n">rb_first</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mytree</span><span class="p">);</span> <span class="n">node</span><span class="p">;</span> <span class="n">node</span> <span class="o">=</span> <span class="n">rb_next</span><span class="p">(</span><span class="n">node</span><span class="p">))</span>
</span><span class='line'>    <span class="n">printk</span><span class="p">(</span><span class="s">&quot;key=%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">rb_entry</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mytype</span><span class="p">,</span> <span class="n">node</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">keystring</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 扩展的红黑树</h3>

<p>扩展的红黑树在节点中存储了额外的数据，其值根据以该节点为根的子树的所有节点的内容计算得到。这额外的数据可以用来扩展红黑树的功能。红黑树扩展被实现为一个可选的特性，基于基础的红黑树。</p>

<h5>3.1 使用扩展红黑树</h5>

<p>使用扩展红黑树时不直接包含&lt;linux/rbtree.h>，而是包含头文件&lt;linux/rbtree_augmented.h>(已经包含了前者)。</p>

<p>在执行插入节点操作时，我们必须更新到插入节点的路径上的额外数据（因为当红黑树为了平衡而进行结构调整后，路径上的额外数据就可能失效了）。怎么更新额外数据呢？可以用rb_augment_inserted()代替rb_insert_color()，若调整了树则会调用回调函数（由我们提供）来更新受影响的子树上的额外数据。</p>

<p>在执行删除节点操作时，用rb_erase_augmented()代替rb_erase()。也会调用回调函数来更新受影响的子树上的额外数据。</p>

<h5>3.2 回调函数</h5>

<p>这里的回调函数有我们使用者提供，处理对象是红黑树上的额外数据。</p>

<p>回调函数可通过设置struct rb_augment_callbacks来提供，包括三个回调函数：<br/>
- 传递函数：更新某节点和其祖先的额外数据，直到另一指定节点或根（当指定节点为NULL时）。
- 复制函数：拷贝一个节点上的额外数据到第二个节点。<br/>
- 交替函数：拷贝一个节点上的额外数据到第二个节点，并更新以第二个节点为根的子树上的额外数据。</p>

<h5>3.3 应用扩展红黑树构造区间树</h5>

<p>用红黑树可以实现<strong>区间树</strong>。一般情况下，红黑树节点中存放着 key/value 对。那怎么表示区间[lo, hi]？我们可以在节点中增加一个<strong><em>额外信息</em></strong>。如在红黑树节点中存放整型值 lo 作为下界(也是key), 额外的 hi 来表示上界。另外在节点中增加一个<strong><em>额外信息</em></strong> —— 在每个节点中保存该节点的所有后代中最大的 hi(记为__subtree_last)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span>
</span><span class='line'><span class="nf">interval_tree_first_match</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_root</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">start</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">rb_node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">node</span> <span class="o">=</span> <span class="n">rb_entry</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">rb_node</span><span class="p">,</span> <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">.</span><span class="n">rb_left</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">left</span> <span class="o">=</span>
</span><span class='line'>              <span class="n">rb_entry</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">.</span><span class="n">rb_left</span><span class="p">,</span> <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">__subtree_last</span> <span class="o">&gt;=</span> <span class="n">start</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="cm">/*</span>
</span><span class='line'><span class="cm">              * Some nodes in left subtree satisfy Cond2.</span>
</span><span class='line'><span class="cm">              * Iterate to find the leftmost such node N.</span>
</span><span class='line'><span class="cm">              * If it also satisfies Cond1, that&#39;s the match</span>
</span><span class='line'><span class="cm">              * we are looking for. Otherwise, there is no</span>
</span><span class='line'><span class="cm">              * matching interval as nodes to the right of N</span>
</span><span class='line'><span class="cm">              * can&#39;t satisfy Cond1 either.</span>
</span><span class='line'><span class="cm">              */</span>
</span><span class='line'>              <span class="n">node</span> <span class="o">=</span> <span class="n">left</span><span class="p">;</span>
</span><span class='line'>              <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">start</span> <span class="o">&lt;=</span> <span class="n">last</span><span class="p">)</span> <span class="p">{</span>     <span class="cm">/* Cond1 */</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">last</span> <span class="o">&gt;=</span> <span class="n">start</span><span class="p">)</span>  <span class="cm">/* Cond2 */</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">node</span><span class="p">;</span>   <span class="cm">/* node is leftmost match */</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">.</span><span class="n">rb_right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">node</span> <span class="o">=</span> <span class="n">rb_entry</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">.</span><span class="n">rb_right</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">);</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">__subtree_last</span> <span class="o">&gt;=</span> <span class="n">start</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>  <span class="cm">/* No match */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Insertion</span><span class="o">/</span><span class="n">removal</span> <span class="n">are</span> <span class="n">defined</span> <span class="n">using</span> <span class="n">the</span> <span class="n">following</span> <span class="n">augmented</span> <span class="nl">callbacks</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">unsigned</span> <span class="kt">long</span>
</span><span class='line'><span class="n">compute_subtree_last</span><span class="p">(</span><span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">max</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">last</span><span class="p">,</span> <span class="n">subtree_last</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">.</span><span class="n">rb_left</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">subtree_last</span> <span class="o">=</span> <span class="n">rb_entry</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">.</span><span class="n">rb_left</span><span class="p">,</span>
</span><span class='line'>          <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">__subtree_last</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">max</span> <span class="o">&lt;</span> <span class="n">subtree_last</span><span class="p">)</span>
</span><span class='line'>          <span class="n">max</span> <span class="o">=</span> <span class="n">subtree_last</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">.</span><span class="n">rb_right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">subtree_last</span> <span class="o">=</span> <span class="n">rb_entry</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">.</span><span class="n">rb_right</span><span class="p">,</span>
</span><span class='line'>          <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">__subtree_last</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">max</span> <span class="o">&lt;</span> <span class="n">subtree_last</span><span class="p">)</span>
</span><span class='line'>          <span class="n">max</span> <span class="o">=</span> <span class="n">subtree_last</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">augment_propagate</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">rb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">rb</span> <span class="o">!=</span> <span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span>
</span><span class='line'>          <span class="n">rb_entry</span><span class="p">(</span><span class="n">rb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">subtree_last</span> <span class="o">=</span> <span class="n">compute_subtree_last</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">__subtree_last</span> <span class="o">==</span> <span class="n">subtree_last</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="n">node</span><span class="o">-&gt;</span><span class="n">__subtree_last</span> <span class="o">=</span> <span class="n">subtree_last</span><span class="p">;</span>
</span><span class='line'>      <span class="n">rb</span> <span class="o">=</span> <span class="n">rb_parent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">augment_copy</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">rb_old</span><span class="p">,</span> <span class="n">stru</span><span class="err">，</span><span class="n">ct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">rb_new</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">old</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">rb_entry</span><span class="p">(</span><span class="n">rb_old</span><span class="p">,</span> <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">);</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">new</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">rb_entry</span><span class="p">(</span><span class="n">rb_new</span><span class="p">,</span> <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">new</span><span class="o">-&gt;</span><span class="n">__subtree_last</span> <span class="o">=</span> <span class="n">old</span><span class="o">-&gt;</span><span class="n">__subtree_last</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">augment_rotate</span><span class="p">(</span><span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">rb_old</span><span class="p">,</span> <span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">rb_new</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">old</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">rb_entry</span><span class="p">(</span><span class="n">rb_old</span><span class="p">,</span> <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">);</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">new</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">rb_entry</span><span class="p">(</span><span class="n">rb_new</span><span class="p">,</span> <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">new</span><span class="o">-&gt;</span><span class="n">__subtree_last</span> <span class="o">=</span> <span class="n">old</span><span class="o">-&gt;</span><span class="n">__subtree_last</span><span class="p">;</span>
</span><span class='line'>  <span class="n">old</span><span class="o">-&gt;</span><span class="n">__subtree_last</span> <span class="o">=</span> <span class="n">compute_subtree_last</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">rb_augment_callbacks</span> <span class="n">augment_callbacks</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">augment_propagate</span><span class="p">,</span> <span class="n">augment_copy</span><span class="p">,</span> <span class="n">augment_rotate</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">interval_tree_insert</span><span class="p">(</span><span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span>
</span><span class='line'>            <span class="k">struct</span> <span class="n">rb_root</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">rb_node</span> <span class="o">**</span><span class="n">link</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">rb_node</span><span class="p">,</span> <span class="o">*</span><span class="n">rb_parent</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">,</span> <span class="n">last</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">last</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">link</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">rb_parent</span> <span class="o">=</span> <span class="o">*</span><span class="n">link</span><span class="p">;</span>
</span><span class='line'>      <span class="n">parent</span> <span class="o">=</span> <span class="n">rb_entry</span><span class="p">(</span><span class="n">rb_parent</span><span class="p">,</span> <span class="k">struct</span> <span class="n">interval_tree_node</span><span class="p">,</span> <span class="n">rb</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">__subtree_last</span> <span class="o">&lt;</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'>          <span class="n">parent</span><span class="o">-&gt;</span><span class="n">__subtree_last</span> <span class="o">=</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">)</span>
</span><span class='line'>          <span class="n">link</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">.</span><span class="n">rb_left</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">link</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">.</span><span class="n">rb_right</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">node</span><span class="o">-&gt;</span><span class="n">__subtree_last</span> <span class="o">=</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rb_link_node</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">,</span> <span class="n">rb_parent</span><span class="p">,</span> <span class="n">link</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rb_insert_augmented</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">,</span> <span class="n">root</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">augment_callbacks</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">interval_tree_remove</span><span class="p">(</span><span class="k">struct</span> <span class="n">interval_tree_node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span>
</span><span class='line'>            <span class="k">struct</span> <span class="n">rb_root</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">rb_erase_augmented</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rb</span><span class="p">,</span> <span class="n">root</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">augment_callbacks</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么在struct里定义宏]]></title>
    <link href="http://cosail.github.io/blog/2014/10/22/structli-de-number-define/"/>
    <updated>2014-10-22T22:18:21+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/22/structli-de-number-define</id>
    <content type="html"><![CDATA[<p>有时会看到结构体里有宏定义，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">rb_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span>  <span class="n">rb_parent_color</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define RB_RED      0  </span>
</span><span class='line'><span class="cp">#define RB_BLACK    1  </span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">rb_right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">rb_node</span> <span class="o">*</span><span class="n">rb_left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__attribute__</span><span class="p">((</span><span class="n">aligned</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">))));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是Linux内核中红黑树节点的定义，其中 rb_parent_color 的第0位用来存储节点的颜色（红/黑）。把两种颜色的宏定义放在结构体定义内，应该是为了增强代码可读性。</p>

<p>因为对宏的处理是在预编译时完成的，而预处理器仅仅作简单的替换。宏从其定义处开始，至文件的尾部或取消宏(#undef)为止是可见的，struct的作用域对宏的定义没影响。</p>

<p>可以用 gcc -E 命令来只做预处理而不编译，来查看宏处理后的程序源代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git基础操作]]></title>
    <link href="http://cosail.github.io/blog/2014/10/14/gitji-chu-cao-zuo/"/>
    <updated>2014-10-14T10:34:40+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/14/gitji-chu-cao-zuo</id>
    <content type="html"><![CDATA[<blockquote><p>以下是阅读《Pro Git》时的记录<br/>
《Pro Git》Scott Chacon 2010, licensed under the Creative Commons Attribution-Non Commercial-Share Alike 3.0 license.</p></blockquote>

<h3>1. 取得项目的 Git 仓库</h3>

<p>有两种取得Git仓库的方法：1.对已有项目创建新的Git仓库；2.克隆已有的Git仓库。</p>

<h5>1.1 从项目目录初始化</h5>

<ul>
<li>开始用Git管理当前项目，在项目目录下执行：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init</span></code></pre></td></tr></table></div></figure>


<p><code>初始化后会在当前目录下增加 .git 目录，但还没有跟踪项目任何文件。</code></p>

<ul>
<li>将几个文件纳入版本控制</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add *.c
</span><span class='line'>$ git add README
</span><span class='line'>$ git commit -m 'initial project version'</span></code></pre></td></tr></table></div></figure>


<h5>1.2 从已有仓库克隆</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/user/repo.git</span></code></pre></td></tr></table></div></figure>


<p><code>在当前目录下创建repo目录，里面装着克隆过来的项目仓库。</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/user/repo.git myrepo</span></code></pre></td></tr></table></div></figure>


<p><code>和上一条命令一样，但明确指定创建的目录名为myrepo。</code></p>

<p>另外 Git 还支持其他传输协议，如http,https,SSH：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone http://github.com/user/repo.git
</span><span class='line'>$ git clone user@server:/path/repo.git</span></code></pre></td></tr></table></div></figure>


<h3>2. 更新记录到仓库</h3>

<h5>2.1 检查当前文件状态</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status</span></code></pre></td></tr></table></div></figure>


<p><code>它会告诉你哪些文件当前处于什么状态。</code></p>

<h5>2.2 跟踪新文件</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add file</span></code></pre></td></tr></table></div></figure>


<p><code>使file文件或目录开始被跟踪；它可以接受通配符，如 git add *.c 。</code></p>

<h5>2.3 暂存已修改文件</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add file</span></code></pre></td></tr></table></div></figure>


<p><code>被跟踪文件发生变化后，把它放到暂存区还是使用 git add，它是个多用途的命令。</code><br/>
<code>注意：若文件已暂存后又修改了文件，则提交时不会纳入修改，你需要重新执行 git add 将文件放到暂存区！</code></p>

<h5>2.4 忽略某些无需跟踪的文件</h5>

<p>在项目目录下建立 .gitignore 文件，添加过滤规则：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 此为注释 
</span><span class='line'>*.a           # 忽略所有 .a 结尾的文件
</span><span class='line'>!lib.a        # 但 lib.a 除外
</span><span class='line'>/TODO     # 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO
</span><span class='line'>build/        # 忽略 build/ 目录下的所有文件
</span><span class='line'>doc/*.txt     # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></code></pre></td></tr></table></div></figure>


<h5>2.5 查看未暂存和已暂存的更新</h5>

<p>git status 仅仅列出了修改过的文件，若要查看工作目录中当前文件和暂存区快照之间的差异：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff</span></code></pre></td></tr></table></div></figure>


<p><code>git diff 会使用文件补丁的格式显示具体添加和删除的行。</code></p>

<p>若要看已经暂存起来的文件和上次提交时的快照之间的差异：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff --cached</span></code></pre></td></tr></table></div></figure>


<p><code>Git 1.6.1及以上版本还可使用 git diff --staged，效果相同但更好记。</code></p>

<h5>2.6 提交更新</h5>

<p><strong><em>在提交前请一定 git status，确认还有什么新建或修改过的文件没有 git add 进来！</em></strong></p>

<p>Git 会调用文本编辑器让你填写“提交说明”（编辑器中显示的注释中会显示更新内容，可用 -v 选项显示修改差异）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit</span></code></pre></td></tr></table></div></figure>


<p>也直接在命令行带上“提交说明”：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m “提交说明”</span></code></pre></td></tr></table></div></figure>


<p>若想自动把所有已经跟踪过的文件暂存起来一并提交,从而跳过 git add 步骤，可以加上 -a 选项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -am “提交说明”</span></code></pre></td></tr></table></div></figure>


<h5>2.7 移除文件</h5>

<p>若想从 Git 仓库中移除文件(即从暂存区中移除)，但仍然在工作目录中保留该文件（也许想稍后将文件加入 .gitignore 文件中）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rm --cached log/\*.log     #移除 log/ 目录下所有 .log 文件</span></code></pre></td></tr></table></div></figure>


<p><code>**注意：** Git 有自己的文件模式扩展方式，当我们使用其自己的扩展方式（而不是让Shell来扩展）时，应在特殊字符前加 ’\‘ 。</code></p>

<p>若想从 Git 仓库中移除文件，并且从工作目录中移除该文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm file                    #从工作目录中移除，但仍然被git跟踪着
</span><span class='line'>$ git rm file             #从 Git 仓库中移除(不再跟踪)
</span><span class='line'>或 $ git rm -f file      #若file已被修改且放到暂存区，则需强制选项（防止因误删除文件而丢失修改内容）</span></code></pre></td></tr></table></div></figure>


<p><code>**注意：** Git 有自己的文件模式扩展方式，当我们使用其自己的扩展方式（而不是让Shell来扩展）时，应在特殊字符前加 ’\‘ 。</code></p>

<h5>2.8 移动(重命名)文件</h5>

<p>若要对 Git 中的文件改名：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git mv file_a file_b</span></code></pre></td></tr></table></div></figure>


<p>实际上，上面的命令相当于：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv file_a file_b
</span><span class='line'>$ git rm file_a
</span><span class='line'>$ git add file_b</span></code></pre></td></tr></table></div></figure>


<h3>3. 查看提交历史</h3>

<p>最常用的提交历史输出格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log                #按提交时间列出所有的更新
</span><span class='line'>$ git log -p          #-p：展开显示每次提交的内容差异（看看别人改了啥）
</span><span class='line'>$ git log -4          #-4：仅显示最近的4次更新
</span><span class='line'>$ git log --stat      #--stat：仅显示简要的增改行数统计</span></code></pre></td></tr></table></div></figure>


<p>你可能想要更特殊的输出格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --pretty=oneline（或short,full,fuller） #oneline表示每个提交显示为一行
</span><span class='line'>$ git log --pretty=format:"%h - %an, %ar : %s"  #定制显示格式(输出便于后期编程提取分析)
</span><span class='line'>常用的格式占位符及其意义:
</span><span class='line'>      %H 提交对象(commit)的完整哈希字串
</span><span class='line'>      %h 提交对象的简短哈希字串
</span><span class='line'>      %T 树对象(tree)的完整哈希字串
</span><span class='line'>      %t 树对象的简短哈希字串
</span><span class='line'>      %P 父对象(parent)的完整哈希字串
</span><span class='line'>      %p 父对象的简短哈希字串
</span><span class='line'>      %an 作者(author)的名字
</span><span class='line'>      %ae 作者的电子邮件地址
</span><span class='line'>      %ad 作者修订日期(可以用 -date= 选项定制格式)
</span><span class='line'>      %ar 作者修订日期,按多久以前的方式显示
</span><span class='line'>      %cn 提交者(committer)的名字
</span><span class='line'>      %ce 提交者的电子邮件地址
</span><span class='line'>      %cd 提交日期
</span><span class='line'>      %cr 提交日期,按多久以前的方式显示
</span><span class='line'>      %s 提交说明</span></code></pre></td></tr></table></div></figure>


<p>也可以用简单的字符图形, 形象地展示了每个提交所在的分支及其分化衍合情况：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --pretty=format:"%h %s" --graph</span></code></pre></td></tr></table></div></figure>


<p>一些其他常用的选项及其释义:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--stat 显示每次更新的文件修改统计信息。
</span><span class='line'>--shortstat 只显示 --stat 中最后的行数修改添加移除统计。
</span><span class='line'>--name-only 仅在提交信息后显示已修改的文件清单。
</span><span class='line'>--name-status 显示新增、修改、删除的文件清单。
</span><span class='line'>--abbrev-commit 仅显示 SHA-1 的前几个字符,而非所有的 40 个字符。
</span><span class='line'>--relative-date 使用较短的相对时间显示(比如,“2 weeks ago”)。</span></code></pre></td></tr></table></div></figure>


<p><strong><em>还可以限制输出的历史记录所在时间段：</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --since=2.weeks
</span><span class='line'>$ git log --since=“2008-01-15”</span></code></pre></td></tr></table></div></figure>


<p>其他常用的类似选项及说明：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(n) 仅显示最近的 n 条提交
</span><span class='line'>--since, --after 仅显示指定时间之后的提交。
</span><span class='line'>--until, --before 仅显示指定时间之前的提交。
</span><span class='line'>--author 仅显示指定作者相关的提交。
</span><span class='line'>--committer 仅显示指定提交者相关的提交</span></code></pre></td></tr></table></div></figure>


<p><code>综合示例：</code>查看 Git 仓库中,2008年10月期间, Junio提交的但未合并的测试脚本(位于项目的 t/ 目录下的文件)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --pretty="%h:%s" --author=“Junio” --since="2008-10-01" \
</span><span class='line'>--before="2008-11-01" --no-merges  --  t/</span></code></pre></td></tr></table></div></figure>


<h3>4. 撤销操作</h3>

<p><code>注意：有些操作并不总是能撤销的！</code></p>

<h5>4.1 修改最后一次提交</h5>

<p>如果刚才提交时忘了暂存某些修改,可以先补上暂存操作,然后再运行 &ndash;amend 提交:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m 'initial commit'     #修改提交说明
</span><span class='line'>$ git add forgotten_file                  #补上暂存操作
</span><span class='line'>$ git commit --amend</span></code></pre></td></tr></table></div></figure>


<p><code>--amend提交命令修正了前一个的提交内容。</code></p>

<h5>4.2 取消已暂存的文件</h5>

<p>使已暂存的文件(当然是已修改的文件)回到已修改但未暂存状态:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git reset HEAD &lt;file&gt;</span></code></pre></td></tr></table></div></figure>


<h5>4.3 取消对文件的修改</h5>

<p>使已修改的文件回到修改前(上一次提交后)状态:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout --  &lt;file&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>其实是把之前版本文件拷贝过来覆盖了当前文件，请慎重！</code></p>

<h3>5. 远程仓库的使用</h3>

<h5>5.1 查看当前远程库</h5>

<p>克隆某个项目后，会有名为origin的远程库，用来表示所克隆的远程仓库。列出远程仓库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote
</span><span class='line'>$ git remote -v       #-v：显示对应的仓库地址</span></code></pre></td></tr></table></div></figure>


<h5>5.2 添加远程仓库</h5>

<p>添加一个新的远程仓库,指定一个简单的名字xiaoming,以便将来引用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote
</span><span class='line'>$ git remote add xiaoming git://github.com/xiaoming/repo.git</span></code></pre></td></tr></table></div></figure>


<h5>5.3 从远程仓库抓取数据</h5>

<p>从远程仓库抓取数据到本地:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git fetch origin master</span></code></pre></td></tr></table></div></figure>


<p><code>fetch只是将远端的数据拉到本地仓库,并不自动合并到当前工作分支,当你需要是可手工合并。</code></p>

<p>如果想从远程仓库抓取数据，并自动合并到本地仓库当前分支:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git pull origin master</span></code></pre></td></tr></table></div></figure>


<h5>5.4 推送数据到远程仓库</h5>

<p><code>如果有其他人在你之前推送了若干更新，那你得先抓取，合并，然后再推送。</code><br/>
和别人分享劳动成果啦:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin master</span></code></pre></td></tr></table></div></figure>


<p><code>成功条件：在服务器上有写权限；同一时刻没有别人在推送数据。</code></p>

<h5>5.5 查看远程仓库信息</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote show origin</span></code></pre></td></tr></table></div></figure>


<p><code>它会告诉我们，运行 git pull/push 时缺省拉取/推送的分支是什么，以及分支的同步情况。</code></p>

<h5>5.6 远程仓库的删除和重命名</h5>

<p>修改某个远程仓库的简短名称，如把xiaoming改为xm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote rename xiaoming xm</span></code></pre></td></tr></table></div></figure>


<p>若要移除远程仓库xiaoming(仅仅是添加远程仓库的逆操作):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote rm xiaoming xm</span></code></pre></td></tr></table></div></figure>


<h3>6. 打标签</h3>

<p>Git 可以对某一时间点的版本打上标签，人们在发布某个软件版本(比如 v1.0)的时候，经常这么做。</p>

<h5>6.1 列出和查看已有的标签</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag</span></code></pre></td></tr></table></div></figure>


<p><code>显示的标签按字母顺序排列。</code></p>

<p>也可以用特定的搜索模式列出符合条件的标签：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -l 'v1.4.2.*'</span></code></pre></td></tr></table></div></figure>


<p><code>列出 v1.4.2 系列的版本。</code></p>

<p>可以查看某个标签的信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git show  v1.4.2.0</span></code></pre></td></tr></table></div></figure>


<h5>6.2 新建标签</h5>

<p><code>一般建议使用含附注型的标签，以便保留相关信息；但若只是临时性加注标签或不需要旁注信息，用轻量级标签也行。</code></p>

<ul>
<li><code>轻量级标签</code>就像是个不会变化的分支，其实只是个指向特定提交对象的引用。新建轻量级标签：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag v1.0-LW</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>含附注标签</code>实际上是存储在仓库中的一个独立对象，有自身的校验和，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -a v1.4 -m 'my version 1.4'    #-m 指定了对应的标签说明</span></code></pre></td></tr></table></div></figure>


<ul>
<li>签署一个标签：如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的 -a 改为 -s 。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -s v1.5 -m 'my signed 1.5 tag'</span></code></pre></td></tr></table></div></figure>


<p><code>这可能会提示你输入密码啥的。</code></p>

<ul>
<li>验证一个标签：以下命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag  -v  v1.5</span></code></pre></td></tr></table></div></figure>


<ul>
<li>后期加注标签</li>
</ul>


<p>你甚至可以在后期对早先的某次提交加注标签，跟上对应提交对象的校验和(或前几位字符)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -a v1.2 9fceb02</span></code></pre></td></tr></table></div></figure>


<ul>
<li>分享标签</li>
</ul>


<p>默认情况下，git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin v1.2       #仅推送标签 v1.2
</span><span class='line'>$ git push origin --tags   #一次推送所有标签上去</span></code></pre></td></tr></table></div></figure>


<p><code>这样别人也能看到这些标签了。</code></p>

<h3>7. Git 命令别名</h3>

<p>可以为命令设置别名：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global alias.co checkout
</span><span class='line'>$ git config --global alias.br branch
</span><span class='line'>$ git config --global alias.ci commit
</span><span class='line'>$ git config --global alias.st status
</span><span class='line'>$ git config --global alias.unstage 'reset HEAD --'
</span><span class='line'>$ git config --global alias.last 'log -1 HEAD'</span></code></pre></td></tr></table></div></figure>


<p><code>现在若想输入 git commit，只需键入 git ci 即可。</code></p>

<p>若想运行某个外部命令，而非 Git 的附属工具，只需在命令前加上<code>!</code> 就行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global alias.visual "!gitk"</span></code></pre></td></tr></table></div></figure>


<h3>8 命令自动补全</h3>

<p>如果你用的是 Bash shell，可以试试看 Git 提供的<code>自动完成脚本</code>：</p>

<p>下载 Git 的源代码，将contrib/completion/git-completion.bash 文件复制到你自己的用户主目录中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp git-completion.bash ∼/.git-completion.bash  </span></code></pre></td></tr></table></div></figure>


<p>并把下行添加到你的 .bashrc 文件中:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.git-completion.bash</span></code></pre></td></tr></table></div></figure>


<p><code>要为系统上所有用户都设置默认使用此脚本，Linux 上复制到 /etc/bash_completion.d/ 目录中即可。</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs快捷键及命令]]></title>
    <link href="http://cosail.github.io/blog/2014/10/14/emacskuai-jie-jian/"/>
    <updated>2014-10-14T00:15:21+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/14/emacskuai-jie-jian</id>
    <content type="html"><![CDATA[<blockquote><p>主要内容来自：<a href="http://aifreedom.com/technology/112">这里</a>，由 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><code>CC BY-NC-SA 3.0协议</code></a> 授权</p></blockquote>

<p><strong><em>按键缩写:</em></strong><br/>
<code>C</code> = Ctrl<br/>
<code>M</code> = Meta = Alt | Esc<br/>
<code>Del</code> = Backspace</p>

<h4>基本快捷键(Basic)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x C-f "find"文件, 即在缓冲区打开/新建一个文件
</span><span class='line'>C-x C-s 保存文件
</span><span class='line'>C-x C-w 使用其他文件名另存为文件
</span><span class='line'>C-x C-v 关闭当前缓冲区文件并打开新文件
</span><span class='line'>C-x i 在当前光标处插入文件
</span><span class='line'>C-x b 新建/切换缓冲区
</span><span class='line'>C-x C-b 显示缓冲区列表
</span><span class='line'>C-x k 关闭当前缓冲区
</span><span class='line'>C-z 挂起emacs
</span><span class='line'>C-x C-c 关闭emacs</span></code></pre></td></tr></table></div></figure>


<h4>光标移动基本快捷键(Basic Movement)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-g g 或 M-x goto-line 跳到指定行
</span><span class='line'>M-x goto-char 跳到指定字符
</span><span class='line'>M-{ 上一段
</span><span class='line'>M-} 下一段
</span><span class='line'>C-f 后一个字符
</span><span class='line'>C-b 前一个字符
</span><span class='line'>C-p 上一行
</span><span class='line'>C-n 下一行
</span><span class='line'>M-f 后一个单词
</span><span class='line'>M-b 前一个单词
</span><span class='line'>C-a 行首
</span><span class='line'>C-e 行尾
</span><span class='line'>C-v 向下翻一页
</span><span class='line'>M-v 向上翻一页
</span><span class='line'>M-&lt; 到文件开头
</span><span class='line'>M-&gt; 到文件末尾</span></code></pre></td></tr></table></div></figure>


<h4>编辑(Editint)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-n 重复执行后一个命令n次
</span><span class='line'>C-u 重复执行后一个命令4次
</span><span class='line'>C-u n 重复执行后一个命令n次
</span><span class='line'>C-d 删除(delete)后一个字符
</span><span class='line'>M-d 删除后一个单词
</span><span class='line'>Del 删除前一个字符
</span><span class='line'>M-Del 删除前一个单词
</span><span class='line'>C-k 移除(kill)一行
</span><span class='line'>  
</span><span class='line'>C-Space 或 C-@ 开始标记
</span><span class='line'>M-h 标记整个段落
</span><span class='line'>C-x h 全选
</span><span class='line'>
</span><span class='line'>C-w 移除(kill)标记区域的内容
</span><span class='line'>M-w 复制标记区域的内容
</span><span class='line'>C-y 召回(yank)复制/移除的区域/行
</span><span class='line'>M-y 召回更早的内容 (在kill缓冲区内循环)
</span><span class='line'>C-x C-x 交换光标和标记
</span><span class='line'>  
</span><span class='line'>C-t 交换两个字符的位置
</span><span class='line'>M-t 交换两个单词的位置
</span><span class='line'>C-x C-t 交换两行的位置
</span><span class='line'>M-u 使从光标位置到单词结尾处的字母变成大写
</span><span class='line'>M-l 与M-u相反
</span><span class='line'>M-c 使从光标位置开始的单词的首字母变为大写</span></code></pre></td></tr></table></div></figure>


<h4>重要快捷键(Important)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-g 停止当前运行/输入的命令
</span><span class='line'>C-x u 撤销前一个命令
</span><span class='line'>M-x global-linum-mode 显示行号
</span><span class='line'>M-x linum-mode 只在当前buffer显示行号
</span><span class='line'>C-u M-! date 插入当前日期和时间
</span><span class='line'>C-u M-! &lt;cmd&gt; 插入&lt;cmd&gt;命令结果
</span><span class='line'>M-x revert-buffer RETURN (照着这个输入)撤销上次存盘后所有改动
</span><span class='line'>M-x recover-file RETURN 从自动存盘文件恢复
</span><span class='line'>M-x recover-session RETURN 如果你编辑了几个文件, 用这个恢复</span></code></pre></td></tr></table></div></figure>


<h4>在线帮助(Online-Help)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-h c 显示快捷键绑定的命令
</span><span class='line'>C-h k 显示快捷键绑定的命令和它的作用
</span><span class='line'>C-h l 显示最后100个键入的内容
</span><span class='line'>C-h w 显示命令被绑定到哪些快捷键上
</span><span class='line'>C-h f 显示函数的功能
</span><span class='line'>C-h v 显示变量的含义和值
</span><span class='line'>C-h b 显示当前缓冲区所有可用的快捷键
</span><span class='line'>C-h t 打开emacs教程
</span><span class='line'>C-h i 打开info阅读器
</span><span class='line'>C-h C-f 显示emacs FAQ
</span><span class='line'>C-h p 显示本机Elisp包的信息</span></code></pre></td></tr></table></div></figure>


<h4>搜索/替换(Seach/Replace)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-s 向后搜索
</span><span class='line'>C-r 向前搜索
</span><span class='line'>C-g 回到搜索开始前的位置(如果你仍然在搜索模式中)
</span><span class='line'>M-% 询问并替换(query replace)
</span><span class='line'>  
</span><span class='line'>Space或y 替换当前匹配
</span><span class='line'>Del或n 不要替换当前匹配
</span><span class='line'>. 仅仅替换当前匹配并退出(替换)
</span><span class='line'>, 替换并暂停(按Space或y继续)
</span><span class='line'>! 替换以下所有匹配
</span><span class='line'>^ 回到上一个匹配位置
</span><span class='line'>RETURN或q 退出替换</span></code></pre></td></tr></table></div></figure>


<h4>使用正则表达式(Regular expression)搜索/替换</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>可在正则表达式中使用的符号:
</span><span class='line'>^ 行首
</span><span class='line'>$ 行尾
</span><span class='line'>. 单个字符
</span><span class='line'>.* 任意多个(包括没有)字符
</span><span class='line'>\&lt; 单词开头
</span><span class='line'>\&gt; 单词结尾
</span><span class='line'>[] 括号中的任意一个字符(例如[a-z]表示所有的小写字母)
</span><span class='line'>  
</span><span class='line'>C-M-s 使用正则表达式向后搜索(可能和ubuntu下快捷键冲突)
</span><span class='line'>C-M-r 使用正则表达式向前搜索
</span><span class='line'>C-s 增量搜索
</span><span class='line'>C-s 重复增量搜索
</span><span class='line'>C-r 向前增量搜索
</span><span class='line'>C-r 重复向前增量搜索
</span><span class='line'>M-x query-replace-regexp 使用正则表达式搜索并替换</span></code></pre></td></tr></table></div></figure>


<h4>窗口命令(Window Commands)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x o 切换至其他窗口
</span><span class='line'>C-x 2 水平分割窗格
</span><span class='line'>C-x 3 垂直分割窗格
</span><span class='line'>C-x o 切换至其他窗格
</span><span class='line'>C-x 0 关闭窗格
</span><span class='line'>C-x 1 关闭除了光标所在窗格外所有窗格
</span><span class='line'>C-x ^ 扩大窗格
</span><span class='line'>M-x shrink-window 缩小窗格
</span><span class='line'>M C-v 滚动其他窗格内容
</span><span class='line'>C-x 4 f 在其他窗格中打开文件
</span><span class='line'>C-x 4 0 关闭当前缓冲区和窗格
</span><span class='line'>C-x 5 2 新建窗口(frame)
</span><span class='line'>C-x 5 1 删除其它所有窗口
</span><span class='line'>C-x 5 f 在新窗口中打开文件</span></code></pre></td></tr></table></div></figure>


<h4>书签命令(Bookmark commands)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x r m 在光标当前位置创建书签
</span><span class='line'>C-x r b 转到书签
</span><span class='line'>M-x bookmark-rename 重命名书签
</span><span class='line'>M-x bookmark-delete 删除书签
</span><span class='line'>M-x bookmark-save 保存书签
</span><span class='line'>
</span><span class='line'>C-x r l 列出书签清单
</span><span class='line'>    d 标记等待删除
</span><span class='line'>    Del 取消删除标记
</span><span class='line'>    x 删除被标记的书签
</span><span class='line'>    r 重命名
</span><span class='line'>    s 保存列表内所有书签
</span><span class='line'>    f 转到当前书签指向的位置
</span><span class='line'>    m 标记在多窗口中打开
</span><span class='line'>    v 显示被标记的书签(或者光标当前位置的书签)
</span><span class='line'>    t 切换是否显示路径列表
</span><span class='line'>    w 显示当前文件路径
</span><span class='line'>    q 退出书签列表
</span><span class='line'>      
</span><span class='line'>M-x bookmark-write 将所有书签导出至指定文件
</span><span class='line'>M-x bookmark-load 从指定文件导入书签</span></code></pre></td></tr></table></div></figure>


<h4>输入特殊字符</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x 8 C-h 得到特殊字符列表，如
</span><span class='line'>C-x 8 R 输入字符®
</span><span class='line'>C-x 8 o 输入字符°</span></code></pre></td></tr></table></div></figure>


<h4>Shell</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x shell/esh 打开shell模式
</span><span class='line'>    C-c C-c 类似unix里的C-c(停止正在运行的程序)
</span><span class='line'>    C-d 删除光标后一个字符
</span><span class='line'>    C-c C-d 发送EOF
</span><span class='line'>    C-c C-z 挂起程序(unix下的C-z)
</span><span class='line'>    M-p 显示前一条命令
</span><span class='line'>    M-n 显示后一条命令</span></code></pre></td></tr></table></div></figure>


<h4>DIRectory EDitor (dired)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x d 打开dired
</span><span class='line'>    C(大写C) 复制
</span><span class='line'>    d 标记等待删除
</span><span class='line'>    D 立即删除
</span><span class='line'>    e或f 打开文件或目录
</span><span class='line'>    g 刷新当前目录
</span><span class='line'>    G 改变文件所属组(chgrp)
</span><span class='line'>    k 从屏幕上的列表里删除一行(不是真的删除)
</span><span class='line'>    m 用*标记
</span><span class='line'>    n 光标移动到下一行
</span><span class='line'>    o 在另一个窗格打开文件并移动光标
</span><span class='line'>    C-o 在另一个窗格打开文件但不移动光标
</span><span class='line'>    P 打印文件
</span><span class='line'>    q 退出dired
</span><span class='line'>    Q 在标记的文件中替换
</span><span class='line'>    R 重命名文件
</span><span class='line'>    u 移除标记
</span><span class='line'>    v 显示文件内容
</span><span class='line'>    x 删除有D标记的文件
</span><span class='line'>    Z 压缩/解压缩文件
</span><span class='line'>    M-Del 移除标记(默认为所有类型的标记)
</span><span class='line'>    ~ 标记备份文件(文件名有~的文件)等待删除
</span><span class='line'>    # 标记自动保存文件(文件名形如#name#)等待删除
</span><span class='line'>    */ 用*标记所有文件夹(用C-u */n移除标记)
</span><span class='line'>    = 将当前文件和标记文件(使用C-@标记而不是dired的m标记)比较
</span><span class='line'>    M-= 将当前文件和它的备份比较
</span><span class='line'>    ! 对当前文件应用shell命令
</span><span class='line'>    M-} 移动光标至下一个用*或D标记的文件
</span><span class='line'>    M-{ 移动光标至上一个用*或D标记的文件
</span><span class='line'>    % d 使用正则表达式标记文件等待删除
</span><span class='line'>    % m 使用正则表达式标记文件为*
</span><span class='line'>    + 新建文件夹
</span><span class='line'>    &gt; 移动光标至后一个文件夹
</span><span class='line'>    &lt; 移动光标至前一个文件夹
</span><span class='line'>    s 切换排序模式(按文件名/日期)
</span><span class='line'>      
</span><span class='line'>M-x speedbar 打开一个独立的目录显示窗口</span></code></pre></td></tr></table></div></figure>


<h4>Telnet</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x telnet 打开telnet模式
</span><span class='line'>    C-d 删除后一个字符或发送EOF
</span><span class='line'>    C-c C-c 停止正在运行的程序(和unix下的C-c类似)
</span><span class='line'>    C-c C-d 发送EOF
</span><span class='line'>    C-c C-o 清除最后一个命令的输出
</span><span class='line'>    C-c C-z 挂起正在运行的命令
</span><span class='line'>    C-c C-u 移除前一行
</span><span class='line'>    M-p 显示前一条命令</span></code></pre></td></tr></table></div></figure>


<h4>emacs daemon</h4>

<p>关于Emacs有一个很著名的笑话，就是Emacs = Emacs Makes A Computer Slow。<br/>
如何为Emacs加速？在后台运行一个emacs daemon服务端，然后你就可以在使用emacsclient打开任何文件，真正的处理交给emacs daemon。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>先启动emacs deamon：
</span><span class='line'>    $ emacs --deamon
</span><span class='line'>然后运行emacs：
</span><span class='line'>    $ emacsclient -t   #从终端启动
</span><span class='line'>    $ emacsclient -c   #从X启动</span></code></pre></td></tr></table></div></figure>


<p><code>只要在启动服务器时运行初始化脚本，客户端启动无需运行脚本；不必每次打开一次Emacs，都要加载半天插件了。</code></p>

<h4>宏命令(Macro-commands)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x ( 开始定义宏
</span><span class='line'>C-x ) 结束定义宏
</span><span class='line'>C-x e 运行最近定义的宏
</span><span class='line'>M-n C-x e 运行最近定义的宏n次
</span><span class='line'>M-x name-last-kbd-macro 给最近定义的宏命名(用来保存)
</span><span class='line'>M-x insert-kbd-macro 将已命名的宏保存到文件
</span><span class='line'>M-x load-file 载入宏</span></code></pre></td></tr></table></div></figure>


<h4>编程(Programming)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M C-\ 自动缩进光标和标记间的区域
</span><span class='line'>M-m 移动光标到行首第一个(非空格)字符
</span><span class='line'>M-^ 将当前行接到上一行末尾处
</span><span class='line'>M-; 添加缩进并格式化的注释
</span><span class='line'>C, C++和Java模式
</span><span class='line'>M-a 移动光标到声明的开始处
</span><span class='line'>M-e 移动光标到声明的结尾处
</span><span class='line'>M C-a 移动光标到函数的开始处
</span><span class='line'>M C-e 移动光标到函数的结尾处
</span><span class='line'>C-c RETURN 将光标移动到函数的开始处并标记到结尾处
</span><span class='line'>C-c C-q 根据缩进风格缩进整个函数
</span><span class='line'>C-c C-a 切换自动换行功能
</span><span class='line'>C-c C-d 一次性删除光标后的一串空格(greedy delete)
</span><span class='line'>  
</span><span class='line'>为了实现下面的一些技术, 你需要在保存源代码的目录里运行"etags
</span><span class='line'>*.c *.h *.cpp"(或者源代码的其他的扩展名)
</span><span class='line'>M-.(点) 搜索标签
</span><span class='line'>M-x tags-search ENTER 在所有标签里搜索(使用正则表达式)
</span><span class='line'>M-,(逗号) 在tags-search里跳至下一个匹配处
</span><span class='line'>M-x tags-query-replace 在设置过标签的所有文件里替换文本</span></code></pre></td></tr></table></div></figure>


<h4>GDB(调试器)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x gdb 在另一个的窗格中打开gdb</span></code></pre></td></tr></table></div></figure>


<h4>版本控制(Version Control)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C-x v d 显示当前目录下所有注册过的文件(show all registered files in this dir)
</span><span class='line'>C-x v = 比较不同版本间的差异(show diff between versions)
</span><span class='line'>C-x v u 移除上次提交之后的更改(remove all changes since last checkin)
</span><span class='line'>C-x v ~ 在不同窗格中显示某个版本(show certain version in different window)
</span><span class='line'>C-x v l 打印日志(print log)
</span><span class='line'>C-x v i 标记文件等待添加版本控制(mark file for version control add)
</span><span class='line'>C-x v h 给文件添加版本控制文件头(insert version control header into file)
</span><span class='line'>C-x v r 获取命名过的快照(check out named snapshot)
</span><span class='line'>C-x v s 创建命名的快照(create named snapshot)
</span><span class='line'>C-x v a 创建gnu风格的更改日志(create changelog file in gnu-style)</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell语法]]></title>
    <link href="http://cosail.github.io/blog/2014/10/13/shellyu-fa/"/>
    <updated>2014-10-13T23:32:17+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/13/shellyu-fa</id>
    <content type="html"><![CDATA[<p>下面只是“《Linux程序设计》第二章 Shell程序设计” 中的示例代码，我把它们写在若干个文件里：</p>

<h4>0 . list.txt</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. variable.sh：
</span><span class='line'>2. condition.sh：
</span><span class='line'>3. control.sh：
</span><span class='line'>4. AndOr.sh：
</span><span class='line'>5. statementBlock.sh：
</span><span class='line'>6. function.sh：
</span><span class='line'>7. command_1.sh：
</span><span class='line'>8. old_version_set.sh：
</span><span class='line'>9. new_version_set.sh：
</span><span class='line'>10. command_2.sh：
</span><span class='line'>11. command_3.sh：
</span><span class='line'>12. another.sh：
</span><span class='line'>13. command_4.sh：
</span><span class='line'>14. command_5.sh：
</span><span class='line'>15. command_6.sh：
</span><span class='line'>16. command_7.sh：
</span><span class='line'>17. command_8.sh：
</span><span class='line'>18. dialog.sh：
</span><span class='line'>19. merge.sh：</span></code></pre></td></tr></table></div></figure>


<h4>1 . variable.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Shell变量,环境变量</span>
</span><span class='line'><span class="c"># 运行时带几个参数： ./variable.sh you me her him them it</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> ---------普通变量------------
</span><span class='line'><span class="nv">myvar</span><span class="o">=</span><span class="s2">&quot;Hi there!&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$myvar</span>         <span class="c">#打印变量值</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$myvar&quot;</span>       <span class="c">#双引号可避免空格问题，但不抑制变量解析</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;$myvar&#39;</span>       <span class="c">#单引号抑制变量解析</span>
</span><span class='line'><span class="nb">echo</span> <span class="se">\$</span>myvar        <span class="c">#&#39;$&#39;被&#39;\&#39;转义</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo </span>Please enter some text:
</span><span class='line'><span class="nb">read </span>myvar          <span class="c">#键盘输入</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;$myvar&#39;</span> now equals : <span class="nv">$myvar</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> ---------环境变量------------
</span><span class='line'><span class="nb">echo</span> <span class="o">[</span><span class="nv">$IFS</span><span class="o">]</span>         <span class="c">#Input Field Separator</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;$0:&#39;</span> <span class="nv">$0</span>        <span class="c">#shell程序文件名</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;$$:&#39;</span> <span class="nv">$$</span>        <span class="c">#进程ID</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;$?:&#39;</span> <span class="nv">$?</span>        <span class="c">#最后运行的命令的结束代码（返回值）</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;$*:&#39;</span><span class="nv">$*</span>        <span class="c">#所有参数</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;$@:&#39;</span><span class="nv">$@</span>        <span class="c">#所有参数，但不使用$IFS</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;$#:&#39;</span><span class="nv">$# </span>       <span class="c">#参数个数</span>
</span><span class='line'><span class="nb">echo </span>args: <span class="nv">$1</span>,<span class="nv">$2</span>,<span class="nv">$3</span>,<span class="nv">$4</span>,<span class="nv">$5</span>   <span class="c">#第1到第5个参数</span>
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -o verbose      <span class="c">#在命令执行前在屏幕上回显命令</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;$-:&#39;</span><span class="nv">$-</span>        <span class="c">#使用Set命令设定的Flag一览</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<h4>2 . condition.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Shell脚本条件测试:用test或[都可  (&#39;[&#39;也是一个命令，位于/usr/bin/)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c">#字符串比较</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;you&quot;</span> <span class="o">=</span> <span class="s2">&quot;me&quot;</span> <span class="o">]</span>     <span class="c">#&#39;!=&#39;表字符串判不等</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;you = me&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;you != me&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;&quot;</span> <span class="o">]</span>            <span class="c">#&#39;-n&#39;表不为空</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;string is NULL&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;string is not NULL&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">#算术比较</span>
</span><span class='line'><span class="k">if</span> <span class="nb">test </span><span class="m">3</span> -eq <span class="m">4</span>         <span class="c">#-ne (这里的3,4可以是更复杂的表达式)</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;3 = 4&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;3 != 4&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="m">5</span> -gt <span class="m">6</span> <span class="o">]</span>          <span class="c">#-ge, -lt, -le, !</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;5 &gt; 6&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;5 &lt;= 6&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">#文件条件测试</span>
</span><span class='line'><span class="c">#文件存在:通常用&#39;-f&#39;代替，因为&#39;-e&#39;可能不可移植</span>
</span><span class='line'><span class="k">if</span> <span class="nb">test</span> -e fred.c<span class="p">;</span> <span class="k">then</span>     <span class="c">#then也可以放在这，但要&#39;;&#39;分隔</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;fred.c is exist&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;no file fred.c&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">#是普通文件</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f fred.c <span class="o">]</span>            <span class="c">#&#39;[&#39;与测试内容之间必须有空格，因为&#39;[&#39;是个命令名</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;fred.c is a general file&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;fred.c is not a general file&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># -d 是一个目录</span>
</span><span class='line'><span class="c"># -r,-w,-x 文件可读，写，执行</span>
</span><span class='line'><span class="c"># -u,-g 文件的SUID，SGID被设置</span>
</span><span class='line'><span class="c"># -s 文件的长度不为0</span>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<h4>3 . control.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Shell的控制语句</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c">#if</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Is it morning? Please answer yes or no:&quot;</span>
</span><span class='line'><span class="nb">read </span>timeofday
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$timeofday&quot;</span> <span class="o">=</span> <span class="s2">&quot;yes&quot;</span> <span class="o">]</span>  <span class="c">#若$timeofday不加双引号，且为空(未输入，直接按回车)的话,会产生语法错误：if [ = &quot;yes&quot; ]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Good morning!&quot;</span>
</span><span class='line'><span class="k">elif</span> <span class="o">[</span> <span class="s2">&quot;$timeofday&quot;</span> <span class="o">=</span> <span class="s2">&quot;no&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Good afternoon!&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Sorry, it&#39;s not recognized: \&quot;$timeofday\&quot;&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">#for</span>
</span><span class='line'><span class="k">for</span> var in bar fud <span class="m">45</span> <span class="s2">&quot;hehe you sob&quot;</span>      <span class="c">#Shell认为所有变量包含的都是字符串，如这里的45</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="nv">$var</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> file in <span class="k">$(</span>ls *.sh<span class="k">)</span><span class="p">;</span> <span class="k">do</span>      <span class="c">#$(cmd)</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="nv">$file</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c">#while</span>
</span><span class='line'><span class="nv">foo</span><span class="o">=</span>1
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="s2">&quot;$foo&quot;</span> -le <span class="m">20</span> <span class="o">]</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nb">echo</span> -n <span class="s2">&quot;foo = $foo,&quot;</span>        <span class="c">#-n是bash的echo带的去换行参数,不是所有shell都有</span>
</span><span class='line'>    <span class="nv">foo</span><span class="o">=</span><span class="k">$((</span><span class="nv">$foo</span><span class="o">+</span><span class="m">1</span><span class="k">))</span>         <span class="c">#$(())结构为算数扩展，替换会里面的表达式的值</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c">#until</span>
</span><span class='line'><span class="c">#若是该shell脚本的第一个参数指定的用户登录，则发警报</span>
</span><span class='line'><span class="k">until</span> who <span class="p">|</span> grep <span class="s2">&quot;$1&quot;</span> &gt; /dev/null   <span class="c">#who列出已登陆的用户</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    sleep 5
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -e <span class="se">\\</span>a         <span class="c">#响铃(我机器上没有声音?)</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;**** $1 has just logged in ! ****&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#case: case结构会使用第一个匹配的模式,即使后面的模式更精确</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;is it morning ? Please answer yes or no:&quot;</span>
</span><span class='line'><span class="nb">read </span>timeofday
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$timeofday&quot;</span> in
</span><span class='line'>    <span class="o">[</span>Yy<span class="o">][</span>Ee<span class="o">][</span>Ss<span class="o">]</span> <span class="p">|</span> <span class="o">[</span>Yy<span class="o">])</span>    <span class="nb">echo</span> <span class="s2">&quot;Good morning&quot;</span><span class="p">;;</span>       <span class="c">#每个模式之后以&quot;;;&quot;结尾,可放置多条语句</span>
</span><span class='line'>    no <span class="p">|</span> n<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;you say no or n&quot;</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Good afternoon&quot;</span><span class="p">;;</span>
</span><span class='line'>    *<span class="o">)</span>  <span class="nb">echo</span> <span class="s2">&quot;Soory, answer not recognized&quot;</span>  <span class="c">#*通配符匹配所有</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;please answer yes or no&quot;</span>
</span><span class='line'>        <span class="nb">exit </span>1
</span><span class='line'>        <span class="p">;;</span>      <span class="c">#esac前的;;可省略</span>
</span><span class='line'><span class="k">esac</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<h4>4 . AndOr.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>touch file_one
</span><span class='line'>rm -f file_two
</span><span class='line'>
</span><span class='line'><span class="c">#AND列表:&amp;&amp;</span>
</span><span class='line'><span class="c">#[ -f file_two ]测试失败,echo &quot; two&quot;不会执行</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f file_one <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;one&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -f file_two <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot; two&quot;</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;false&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#OR列表:||</span>
</span><span class='line'>rm -f file_one
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f file_one <span class="o">]</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">&quot;one&quot;</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">&quot;One&quot;</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;false&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#混用AND和OR列表: 这里没有用if</span>
</span><span class='line'><span class="c">#如果测试为真执行命令1, 为假执行命令2</span>
</span><span class='line'><span class="o">[</span> -f file_one <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;test for true: cmd1&quot;</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">&quot;test for false: cmd2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<h4>5 . statementBlock.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#语句块: {}</span>
</span><span class='line'><span class="k">if</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;We in block&quot;</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;You in block&quot;</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;They in block&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">then</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;I said true&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;false&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h4>6 . function.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#Shell函数</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'>func<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;this&quot;</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;that&quot;</span>
</span><span class='line'>    ls /bin/ls
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;result&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> 0
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">#直接调用函数</span>
</span><span class='line'>func
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-----------------------------&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#res会捕获func()函数echo的字符串</span>
</span><span class='line'><span class="nv">res</span><span class="o">=</span><span class="s2">&quot;$(func)&quot;</span>   <span class="c">#调用函数就跟使用其他命令一样</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;func() executed completely:&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$res</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-----------------------------&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#函数内局部变量</span>
</span><span class='line'>func2<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span><span class="nv">res</span><span class="o">=</span><span class="s2">&quot;local res&quot;</span>               <span class="c">#local声明局部变量</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Inside func2(): res=$res&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>func2
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Outside func2(): res=$res&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-----------------------------&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#从函数返回一个值</span>
</span><span class='line'>yes_or_no<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Is your name $* ?&quot;</span>        <span class="c">#这里的$*是传给函数的所有参数,不是传给shell程序的参数</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">    </span><span class="k">do</span>
</span><span class='line'>        <span class="nb">echo</span> -n <span class="s2">&quot;Enter yes or no: &quot;</span>
</span><span class='line'>        <span class="nb">read </span>x
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;$x&quot;</span> in
</span><span class='line'>            y <span class="p">|</span> yes<span class="o">)</span>    <span class="k">return</span> 0<span class="p">;;</span>
</span><span class='line'>            n <span class="p">|</span> no<span class="o">)</span>     <span class="k">return</span> 1<span class="p">;;</span>
</span><span class='line'>            *<span class="o">)</span>          <span class="nb">echo</span> <span class="s2">&quot;Answer yes or no please.&quot;</span>
</span><span class='line'>        <span class="k">esac</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> yes_or_no <span class="s2">&quot;$1&quot;</span>   <span class="c">#调用函数并传递参数,根据return值判断执行成功还是失败</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Hi, $1&quot;</span>   <span class="c">#仅当return 0时执行这句</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Who you are&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<h4>7 . command_1.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Shell命令</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c">#命令1:&quot;break&quot;</span>
</span><span class='line'><span class="nb">echo</span> ----------------break----------------
</span><span class='line'>rm -rf fred*
</span><span class='line'><span class="nb">echo</span> &gt; fred1    <span class="c">#new file</span>
</span><span class='line'><span class="nb">echo</span> &gt; fred2
</span><span class='line'>mkdir fred3     <span class="c">#new directory</span>
</span><span class='line'><span class="nb">echo</span> &gt; fred4
</span><span class='line'>
</span><span class='line'><span class="k">for</span> file in fred*
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$file&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">break</span><span class="p">;</span>                  <span class="c">#是目录则跳出</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo </span>I got a directory: <span class="nv">$file</span>
</span><span class='line'>
</span><span class='line'>rm -rf fred*
</span><span class='line'>
</span><span class='line'><span class="c">#命令2:&quot;continue&quot;</span>
</span><span class='line'><span class="nb">echo</span> ---------------continue--------------
</span><span class='line'>rm -rf fred*
</span><span class='line'><span class="nb">echo</span> &gt; fred1    <span class="c">#new file</span>
</span><span class='line'><span class="nb">echo</span> &gt; fred2
</span><span class='line'>mkdir fred3     <span class="c">#new directory</span>
</span><span class='line'><span class="nb">echo</span> &gt; fred4
</span><span class='line'>
</span><span class='line'><span class="k">for</span> file in fred*
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$file&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>                  <span class="c">#是目录则马上进入下一次循环</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>    <span class="nb">echo </span>I got a file: <span class="nv">$file</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'>rm -rf fred*
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> ---------------:-------------------
</span><span class='line'><span class="c">#命令3:&quot;:&quot;        //一个空命令,相当于true</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f fred <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    :
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;file fred did not exist&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -------------.---------------------
</span><span class='line'><span class="c">#命令4:&quot;.&quot;      //在当前shell中执行命令,而不是在子shell中执行(正如source命令,会改变当前环境)</span>
</span><span class='line'><span class="nb">echo</span> 请在shell下用<span class="s2">&quot;. ./old_version_set.sh&quot;</span>,<span class="s2">&quot;. ./new_version_set.sh&quot;</span>来查看效果
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<h4>8 . old_version_set.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">version</span><span class="o">=</span>Old_version
</span><span class='line'><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;Old&gt; &quot;</span>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/bin:/usr/bin:/usr/local/Old_bin:.
</span></code></pre></td></tr></table></div></figure>


<h4>9 . new_version_set.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">version</span><span class="o">=</span>New_version
</span><span class='line'><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;New&gt; &quot;</span>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/bin:/usr/bin:/usr/local/New_bin:.
</span></code></pre></td></tr></table></div></figure>


<h4>10 . command_2.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   shell命令</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> ------------echo----------------
</span><span class='line'><span class="c">#命令5:&quot;echo&quot;</span>
</span><span class='line'><span class="c">#不换行显示</span>
</span><span class='line'><span class="nb">echo</span> -n <span class="s2">&quot;string to output.&quot;</span>     <span class="c">#-n代表不输出换行</span>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;string to output.\c&quot;</span>   <span class="c">#开启转义,\c代表结束输出(请看:man echo)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span>    <span class="c">#换行</span>
</span><span class='line'><span class="nb">echo</span> ------------eval--------------
</span><span class='line'><span class="c">#命令6:&quot;eval&quot;           //对参数求值:像另一个$,它给出一个变量的值的值</span>
</span><span class='line'><span class="nv">foo</span><span class="o">=</span>10
</span><span class='line'><span class="nv">x</span><span class="o">=</span>foo
</span><span class='line'><span class="nv">y</span><span class="o">=</span><span class="s1">&#39;$&#39;</span><span class="nv">$x</span>         <span class="c">#y=&#39;$foo&#39;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$y</span>
</span><span class='line'>
</span><span class='line'><span class="nb">eval </span><span class="nv">y</span><span class="o">=</span><span class="s1">&#39;$&#39;</span><span class="nv">$x</span>    <span class="c">#y=$foo=10</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$y</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> ------------exec-------------
</span><span class='line'><span class="c">#命令7:&quot;exec&quot;   //exec命令在执行时会把当前的shell进程关闭，然后换到后面的命令继续执行。</span>
</span><span class='line'><span class="c">#如:&quot;exec touch afile&quot;      //会关闭shell,并创建文件afile.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -------------exit-------------
</span><span class='line'><span class="c">#命令8:&quot;exit&quot;</span>
</span><span class='line'><span class="nb">exit </span><span class="m">0</span>  <span class="c">#成功</span>
</span><span class='line'><span class="nb">exit </span><span class="m">1</span>  <span class="c"># 1-125表错误码</span>
</span><span class='line'><span class="c">#126表文件不可执行,127表命令未找到,128及以上表出现一个信号</span>
</span></code></pre></td></tr></table></div></figure>


<h4>11 . command_3.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># shell命令</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -------------export--------------
</span><span class='line'><span class="c">#命令9:&quot;export&quot;</span>
</span><span class='line'><span class="nv">foo</span><span class="o">=</span><span class="s2">&quot;The first var&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">bar</span><span class="o">=</span><span class="s2">&quot;The second var&quot;</span> <span class="c">#被导出</span>
</span><span class='line'><span class="nv">foo12</span><span class="o">=</span><span class="s2">&quot;The 1.5th var&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#或set -allexport,表示导出后面声明的所有变量</span>
</span><span class='line'><span class="nb">set</span> -a
</span><span class='line'><span class="nv">foo2</span><span class="o">=</span><span class="s2">&quot;The third var&quot;</span>    <span class="c">#被导出</span>
</span><span class='line'><span class="nv">bar2</span><span class="o">=</span><span class="s2">&quot;The fourth var&quot;</span>   <span class="c">#被导出</span>
</span><span class='line'>
</span><span class='line'>./another.sh        <span class="c">#调用另一个shell脚本,它只能看见导出的bar变量,而看不到foo</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -----------expr------------
</span><span class='line'><span class="c">#命令10:&quot;expr&quot;      //将它的参数作为一个表达式来求值</span>
</span><span class='line'><span class="nv">x</span><span class="o">=</span>3
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$x&quot;</span>
</span><span class='line'><span class="nv">x</span><span class="o">=</span><span class="sb">`</span>expr <span class="nv">$x</span> + 1<span class="sb">`</span>     <span class="c">#可替换为$((...))语法,更有效</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$x&quot;</span>
</span><span class='line'><span class="nv">x</span><span class="o">=</span><span class="k">$(</span>expr <span class="nv">$x</span> + 1<span class="k">)</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$x&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -------------printf------------
</span><span class='line'><span class="c">#命令11:&quot;printf&quot;        //较新的版本shell提供该命令产生格式化输出,用来代替echo</span>
</span><span class='line'><span class="nv">y</span><span class="o">=</span><span class="s2">&quot;you are not you.&quot;</span>
</span><span class='line'><span class="nb">printf</span> <span class="s2">&quot;%s:x=%d,y=\&quot;%s\&quot;\n&quot;</span> <span class="s2">&quot;info&quot;</span> <span class="s2">&quot;$x&quot;</span> <span class="s2">&quot;$y&quot;</span>    <span class="c">#$y要用&quot;&quot;包围</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -----------set--------------
</span><span class='line'><span class="c">#命令12:&quot;set&quot;           //为shell设置参数变量,就像脚本的参数(命令9用法不太一样)</span>
</span><span class='line'><span class="nb">set</span> <span class="k">$(</span>date<span class="k">)</span>     <span class="c">#设置参数为date命令的输出(空格分隔的)</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$0</span>,<span class="nv">$1</span>,<span class="nv">$2</span>,<span class="nv">$3</span>
</span><span class='line'><span class="nb">set </span><span class="m">1</span> <span class="s2">&quot;go you&quot;</span> 5000
</span><span class='line'><span class="nb">echo</span> <span class="nv">$1</span>,<span class="nv">$2</span>,<span class="nv">$3</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -----------shift-----------
</span><span class='line'><span class="c">#命令12:&quot;shift&quot;         //将所有的参数变量左移一个位置:$2变为$1...,注意$0不变</span>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="s2">&quot;$1&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;$1&quot;</span>
</span><span class='line'>    <span class="nb">shift</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<h4>12 . another.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$foo&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$bar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$foo12&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$foo2&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$bar2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>13 . command_4.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># shell命令</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> --------------unset---------------
</span><span class='line'><span class="c">#命令14:&quot;unset&quot;     //从环境中删除变量或函数,但不能删除shell本身定义的只读变量如PATH</span>
</span><span class='line'><span class="nv">foo</span><span class="o">=</span><span class="s2">&quot;Oh I&#39;am here&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$foo</span>
</span><span class='line'>
</span><span class='line'><span class="nv">foo</span><span class="o">=</span>        <span class="c">#将foo设为空,变量仍存在</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$foo</span>
</span><span class='line'>
</span><span class='line'><span class="nv">foo</span><span class="o">=</span><span class="s2">&quot;Oh i am here again&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$foo</span>
</span><span class='line'><span class="nb">unset </span>foo   <span class="c">#将foo变量删除掉</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$foo</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> --------------trap------------------
</span><span class='line'><span class="c">#命令15:&quot;trap&quot;          </span>
</span><span class='line'><span class="c">#   trap cmd signal: 当信号signal出现时,执行命令cmd(该命令之后有效)</span>
</span><span class='line'><span class="c">#   trap signal: 忽略信号signal</span>
</span><span class='line'><span class="c">#   trap - signal: 恢复signal的默认处理</span>
</span><span class='line'><span class="nb">trap</span> <span class="s1">&#39;rm -f /tmp/my_tmp_file_$$&#39;</span> INT    <span class="c">#可以用trap -l看到INT信号</span>
</span><span class='line'><span class="nb">echo </span>createing file /tmp/my_tmp_file_<span class="nv">$$</span>
</span><span class='line'>date &gt; /tmp/my_tmp_file_<span class="nv">$$</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;press CTRL+C to interrupt ...&quot;</span>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> -f /tmp/my_tmp_file_<span class="nv">$$</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">echo </span>File exists
</span><span class='line'>    sleep 1
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;File no longer exists&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#设置回CTRL+C信号的默认处理:终止程序</span>
</span><span class='line'><span class="nb">trap </span>INT
</span><span class='line'><span class="nb">echo </span>createing file /tmp/my_tmp_file_<span class="nv">$$</span>
</span><span class='line'>date &gt; /tmp/my_tmp_file_<span class="nv">$$</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;press CTRL+C to interrupt ...&quot;</span>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> -f /tmp/my_tmp_file_<span class="nv">$$</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">echo </span>File exists
</span><span class='line'>    sleep 1
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;should not reach here&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>14 . command_5.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># shell</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -----------find------------
</span><span class='line'><span class="c">#命令16:&quot;find&quot;</span>
</span><span class='line'><span class="c">#find [path] [options] [test] [actions]</span>
</span><span class='line'>find . -name fun*.sh -print
</span><span class='line'><span class="nb">echo</span> -------
</span><span class='line'>
</span><span class='line'>find / -mount -name wish    <span class="c">#-mount不去搜索挂载的其他文件系统</span>
</span><span class='line'><span class="nb">echo</span> -------
</span><span class='line'>
</span><span class='line'>find . -newer command_2.sh -type f     <span class="c">#搜索比command_2.sh要新的文件,不是目录</span>
</span><span class='line'><span class="nb">echo</span> -------
</span><span class='line'>
</span><span class='line'>find . -newer command_2.sh -o -name <span class="s2">&quot;v*.sh&quot;</span>   <span class="c">#-o表示或者,-a表示并且,!表非</span>
</span><span class='line'><span class="nb">echo</span> -------
</span><span class='line'>
</span><span class='line'>find . -newer command_2.sh -or -name <span class="s2">&quot;v*.sh&quot;</span>   <span class="c">#-or表示或者,-and表示并且,-not表非</span>
</span><span class='line'><span class="nb">echo</span> -------
</span><span class='line'>
</span><span class='line'><span class="c">#用圆括号来组合测试(不用也是成功的)</span>
</span><span class='line'>find . <span class="se">\(</span> -newer command_2.sh -o -name <span class="s2">&quot;v*.sh&quot;</span> <span class="se">\)</span> -type f -print
</span><span class='line'><span class="nb">echo</span> -------
</span><span class='line'>
</span><span class='line'><span class="c">#找到匹配的文件后,可以执行指定的动作:</span>
</span><span class='line'>find . -name <span class="s2">&quot;c*&quot;</span> -exec ls -l <span class="o">{}</span> <span class="se">\;</span>     <span class="c">#-exec或-ok命令将后续参数作为他们的参数直到被&quot;\;&quot;终止,魔串&quot;{}&quot;会被当前文件的完整路径取代</span>
</span></code></pre></td></tr></table></div></figure>


<h4>15 . command_6.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># shell命令</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> ----grep: General Regular Expression Parser----
</span><span class='line'><span class="c">#grep [option] pattern [files]</span>
</span><span class='line'>grep <span class="s2">&quot;if&quot;</span> ./condition.sh
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> ----------
</span><span class='line'>grep -c <span class="s2">&quot;if&quot;</span> ./condition.sh ./command_1.sh  <span class="c">#搜索多个文件,只输出匹配行数</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> ----------
</span><span class='line'>grep -v <span class="s2">&quot;i&quot;</span> ./condition.sh      <span class="c">#匹配不出现&quot;i&quot;的行</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> ---------
</span><span class='line'>grep ^# ./condition.sh      <span class="c">#行首为用&#39;^&#39;,行尾用&#39;$&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -----------
</span><span class='line'>grep <span class="o">[[</span>:blank:<span class="o">]]</span><span class="nb">echo</span><span class="o">[[</span>:blank:<span class="o">]]</span> ./condition.sh      <span class="c">#[]中可以使用特殊匹配模式,[:blank:]表示空格或制表符</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> ------------
</span><span class='line'>grep -E <span class="o">[</span>a-z<span class="o">]</span><span class="se">\{</span>5<span class="se">\}</span> ./condition.sh   <span class="c">#-E开启扩展匹配:? * + {n} {n,} {n,m}  //匹配0或1次,0或多次,1或多次,n次,n次及以上,n到m次</span>
</span></code></pre></td></tr></table></div></figure>


<h4>16 . command_7.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># shell命令的执行</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c"># $(cmd)的结果就是cmd命令的输出     //只有需要脚本可移植时才应该用`cmd`(当命令中有特殊字符时要转义)</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;------------$(cmd)-------------&#39;</span>
</span><span class='line'><span class="nb">echo </span>Current user: <span class="k">$(</span>who<span class="k">)</span>
</span><span class='line'><span class="nv">whoisthere</span><span class="o">=</span><span class="sb">`</span>who<span class="sb">`</span>
</span><span class='line'><span class="nb">echo </span>Current user: <span class="nv">$whoisthere</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> --------------<span class="k">${</span><span class="nv">var</span><span class="k">}</span>------------
</span><span class='line'><span class="c"># 参数扩展: ${var}      //如${i}_tmp会扩展变量i,而$i_tmp会扩展变量i_tmp</span>
</span><span class='line'><span class="k">for</span> i in <span class="m">1</span> <span class="m">3</span> 5
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nb">echo </span>cmd_<span class="k">${</span><span class="nv">i</span><span class="k">}</span>_cmd
</span><span class='line'>    <span class="nb">echo </span>CMD_<span class="nv">$i_CMD</span>     <span class="c">#$i_CMD会被扩展为空,不会报错!</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> --------
</span><span class='line'><span class="c"># ${param:-default}     若param为空,则把扩展为default</span>
</span><span class='line'><span class="c"># ${#param}             扩展为param的长度</span>
</span><span class='line'><span class="c"># ${param%word}         在param的尾部删除与word匹配的最短串,返回剩余部分</span>
</span><span class='line'><span class="c"># ${param%%word}        尾部,删最长匹配</span>
</span><span class='line'><span class="c"># ${param#word}         头部,删最短匹配</span>
</span><span class='line'><span class="c"># ${param##word}        头部,删最长匹配</span>
</span><span class='line'><span class="nb">unset </span>foo
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">foo</span><span class="k">:-</span><span class="nv">hello</span><span class="p"> you</span><span class="k">}</span>  <span class="c">#foo为空,扩展为hello you</span>
</span><span class='line'>
</span><span class='line'><span class="nv">foo</span><span class="o">=</span>something
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">foo</span><span class="k">:-</span><span class="nv">Hello</span><span class="k">}</span>      <span class="c">#foo不为空,扩展为something</span>
</span><span class='line'>
</span><span class='line'><span class="nv">foo</span><span class="o">=</span>/usr/bin/X11/startx
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">foo</span><span class="p">#*/</span><span class="k">}</span>          <span class="c">#删去头部/</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">foo</span><span class="p">##*/</span><span class="k">}</span>         <span class="c">#删去头部/usr/bin/x11/</span>
</span><span class='line'>
</span><span class='line'><span class="nv">bar</span><span class="o">=</span>/usr/local/etc/local/networks
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">bar</span><span class="p">%local*</span><span class="k">}</span>      <span class="c">#删去尾部local/networks</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">bar</span><span class="p">%%local*</span><span class="k">}</span>     <span class="c">#删去尾部local/etc/local/networks</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;-----example for ${ }------&#39;</span>
</span><span class='line'>touch 1.gif 2.gif 3.gif
</span><span class='line'>ls *.gif *.jpg
</span><span class='line'>
</span><span class='line'><span class="k">for</span> image in *.gif
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    mv <span class="nv">$image</span> <span class="k">${</span><span class="nv">image</span><span class="p">%%gif</span><span class="k">}</span>jpg      <span class="c">#效果如: mv 1.gif 1.jpg</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>ls *.gif *.jpg
</span><span class='line'>rm *.jpg
</span><span class='line'>
</span><span class='line'><span class="c">#另外:</span>
</span><span class='line'><span class="c"># ${param:+default}     若param不为空,则返回default</span>
</span><span class='line'><span class="c"># ${param:=default}     若param为空,则赋值为default,再返回;否则直接返回param的值</span>
</span><span class='line'><span class="c"># ${param:?default}     若param为空,则输出param: default;否则返回param</span>
</span></code></pre></td></tr></table></div></figure>


<h4>17 . command_8.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># &lt;&lt;TAG 和 TAG中间的内容就好象是标准输入的内容</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;--------------&lt;&lt;TAG--------------&#39;</span>
</span><span class='line'>cat &lt;&lt;!SomeText!
</span><span class='line'>hello you little boy.
</span><span class='line'>hello you boy.
</span><span class='line'>hello you.
</span><span class='line'>hello.
</span><span class='line'>!SomeText!
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -------------
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;hello.&quot;</span> &gt; hei.txt
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;hello you.&quot;</span> &gt;&gt; hei.txt
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;hello you boy.&quot;</span> &gt;&gt; hei.txt
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;hello you little boy.&quot;</span> &gt;&gt; hei.txt
</span><span class='line'>cat ./hei.txt
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -------------
</span><span class='line'><span class="c">#用ed编辑文件hei.txt,编辑命令为1,d,2,...</span>
</span><span class='line'><span class="c">#  下面的&#39;$&#39;用&#39;\&#39;转义,为了防止shell对其做解释,因为要解释它的应该是ed</span>
</span><span class='line'>ed ./hei.txt &lt;&lt;!SomeOperations!
</span><span class='line'>1
</span><span class='line'>d
</span><span class='line'>2
</span><span class='line'><span class="se">\$</span>s/you/me/
</span><span class='line'>w
</span><span class='line'>q
</span><span class='line'>!SomeOperations!
</span><span class='line'>cat ./hei.txt
</span><span class='line'>rm ./hei.txt
</span><span class='line'>
</span><span class='line'><span class="c">#调试shell程序</span>
</span><span class='line'><span class="c"># set -o noexec, 简写set -n, 命令行sh -n foo.sh         //只检查语法,不执行</span>
</span><span class='line'><span class="c"># set -o verbose, 简写set -v, 命令行sh -v foo.sh        //执行命令前先回显</span>
</span><span class='line'><span class="c"># set -o xtrace, 简写set -x, 命令行sh -x foo.sh         //执行命令后回显</span>
</span><span class='line'><span class="c"># set -o nounset, 简写set -u                            //若使用了未定义的变量,给出出错信息</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;----------set -v---------&#39;</span>
</span><span class='line'><span class="nb">set</span> -v
</span><span class='line'>ls
</span><span class='line'><span class="nb">set</span> +v          <span class="c">#+v表示关闭verbose选项</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;----------set -u---------&#39;</span>
</span><span class='line'><span class="nb">set</span> -u
</span><span class='line'><span class="c">#echo $nodefine  #使用了为定义的变量,给出错误信息</span>
</span><span class='line'>
</span><span class='line'><span class="c">#捕获退出信号,输出变量值</span>
</span><span class='line'><span class="nb">echo</span> ------------trap handler signal-----------
</span><span class='line'><span class="nv">foovar</span><span class="o">=</span><span class="s2">&quot;i&#39;m something important.&quot;</span>
</span><span class='line'><span class="nb">trap</span> <span class="s1">&#39;echo Exiting: foovar= $foovar&#39;</span> EXIT
</span></code></pre></td></tr></table></div></figure>


<h4>18 . dialog.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#dialog命令: linux控制台下的简单GUI程序</span>
</span><span class='line'><span class="c">#对话框   标题                  消息框</span>
</span><span class='line'>dialog --title <span class="s2">&quot;Message you&quot;</span> --msgbox <span class="s2">&quot;Tell you something you do not know.&quot;</span> <span class="m">8</span> 40
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="o">=</span> <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    dialog --infobox <span class="s2">&quot;your choose: OK&quot;</span> <span class="m">5</span> 20
</span><span class='line'>    sleep 1
</span><span class='line'>    dialog --clear
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">#对话框   标题                       复选列表    提示        高  宽 选项数 选项编号,文本,状态....                      标准错误重定向(dialog的输出)</span>
</span><span class='line'>dialog --title <span class="s2">&quot;Check box example&quot;</span> --checklist <span class="s2">&quot;Pick Number&quot;</span> <span class="m">15</span>  <span class="m">25</span>   <span class="m">3</span>     <span class="m">1</span> <span class="s2">&quot;one&quot;</span> <span class="s2">&quot;off&quot;</span> <span class="m">2</span> <span class="s2">&quot;two&quot;</span> <span class="s2">&quot;on&quot;</span> <span class="m">3</span> <span class="s2">&quot;three&quot;</span> <span class="s2">&quot;off&quot;</span>  2&gt; /tmp/tmp_file_<span class="nv">$$</span>.txt
</span><span class='line'><span class="nv">ret</span><span class="o">=</span><span class="nv">$?</span>                                  <span class="c">#保存dialog的返回值</span>
</span><span class='line'><span class="nv">res</span><span class="o">=</span><span class="k">$(</span>cat /tmp/tmp_file_<span class="nv">$$</span>.txt<span class="k">)</span>         <span class="c">#保存dialog的输出值(用户选择的选项)</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$ret</span> <span class="o">=</span> <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    dialog --infobox <span class="s2">&quot;Your choise: $res&quot;</span> <span class="m">10</span> 30
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    dialog --infobox <span class="s2">&quot;Bad, you canceled!&quot;</span> <span class="m">10</span> 30
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$res&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>19. merge.sh : 合并list.txt中列出的当前目录下的文件</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f list2.txt <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    rm -f list2.txt
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>cat ./list.txt <span class="p">|</span> <span class="k">while</span> <span class="nb">read </span>line　　　　　　#读取list.txt的每一行
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="k">${</span><span class="nv">line</span><span class="p">#*[[:</span><span class="nv">blank</span><span class="p">:]]</span><span class="k">}</span> &gt;&gt; list2.txt      <span class="c">#去掉行首的序号和空白字符</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">x</span><span class="o">=</span><span class="m">0</span>         <span class="c">#文件序号</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f merged.txt <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    rm -r merged.txt
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>cat ./list2.txt <span class="p">|</span> <span class="k">while</span> <span class="nb">read </span>line
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nv">x</span><span class="o">=</span><span class="k">$((</span><span class="nv">$x</span> <span class="o">+</span> <span class="m">1</span><span class="k">))</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;************** $x . $line : start ************&quot;</span> &gt;&gt; merged.txt
</span><span class='line'>    cat ./<span class="nv">$line</span> &gt;&gt; merged.txt
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;************** $x . $line : end **************&quot;</span> &gt;&gt; merged.txt
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;                                               &quot;</span> &gt;&gt; merged.txt
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;                  @ @                       &quot;</span> &gt;&gt; merged.txt
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;                 ( V )                       &quot;</span> &gt;&gt; merged.txt
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;                  ^ ^                       &quot;</span> &gt;&gt; merged.txt
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;                       .=.=.0             &quot;</span> &gt;&gt; merged.txt
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;                                             &quot;</span> &gt;&gt; merged.txt
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f list2.txt <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    rm -f list2.txt
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git概述及初配置]]></title>
    <link href="http://cosail.github.io/blog/2014/10/12/git-start/"/>
    <updated>2014-10-12T20:16:46+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/12/git-start</id>
    <content type="html"><![CDATA[<blockquote><p>以下是阅读《Pro Git》时的记录<br/>
《Pro Git》Scott Chacon 2010, licensed under the Creative Commons Attribution-Non Commercial-Share Alike 3.0 license.</p></blockquote>

<h3>1. 版本控制系统（VCS）</h3>

<p>VCS的主要作用：记录文件的变化，保存项目过去某些时间点的状态，回溯到之前的状态。<br/>
<code>即保存和恢复数据。</code></p>

<ul>
<li><p>本地版本控制系统: 保存并管理文件补丁（文件内容前后的变化），不断打补丁。<br/>
<code>自己在自己的电脑上干自己的事。</code></p></li>
<li><p>集中化版本控制系统（CVCS）：单一的集中管理服务器保存所有文件的修订版本。<br/>
<code>可有多人用客户端访问中央服务器，取出文件，提交更新，协同合作。
  若中央服务器故障，则可能丢失数据，且大家都无法在故障时段提交更新。</code></p></li>
<li><p>分布式版本控制系统（DVCS）：  客户端有代码仓库的完整镜像，和服务器一样掌握所有必要信息。<br/>
<code>大家可以在自己电脑上提交（异步），必要时推到服务器（同步）。</code></p></li>
</ul>


<h3>2. Git的特点</h3>

<ul>
<li><p>直接给更新的文件作快照，并保存快照的索引。<br/>
<code>而不是像其他CVS一样每次仅仅记录变化的部分</code></p></li>
<li><p>本地保存更新历史，断网时可以向本机提交更新。<br/>
<code>Subversion和CVS断网时无法提交更新，因为仓库数据在服务器上维护着，本机信息不足。</code></p></li>
<li><p>保持数据完整性<br/>
<code>保存文件或目录需要先计算校验和（使用SHA-1算法计算出的一个哈希值，作为指纹），并将结果作为唯一标识及索引。你动了哪里，Git就会知道。</code></p></li>
<li><p>高可靠性<br/>
<code>在Git，只要在本机提交后（本机操作很方便快捷），就不必担心弄丢弄乱数据了（可在本机恢复）；若再定期推送到远端仓库的话，就更保险了。</code></p></li>
<li><p>git三状态：已修改，已暂存(staged)，已提交。</p>

<ul>
<li>已修改：修改了某文件</li>
<li>已暂存：把已修改文件列为下次要提交的文件</li>
<li>已提交：文件已安全地保存在本机数据库中</li>
</ul>
</li>
</ul>


<p>基本的 Git 工作流程如下所示:</p>

<ol>
<li><p>在工作目录中修改某些文件。
<code>工作目录中的文件实际上都是从 git 目录中的压缩对象数据库中提取出来的，我们在工作目录中编辑文件。</code></p></li>
<li><p>对这些修改了的文件作快照,并保存到暂存区域。<br/>
<code>暂存区其实是个索引文件，放在 git 目录中。</code></p></li>
<li><p>提交更新,将保存在暂存区域的文件快照转储到 git 目录中。   <br/>
<code>每个项目有一个.git/目录，是保存元数据和对象数据库的地方。克隆仓库时拷贝的就是里边的数据。</code></p></li>
</ol>


<h3>3. 初次配置Git</h3>

<p>Git 有专门用来配置和读取相应工作环境变量的工具： git config 命令（实际调用 git-config 命令）。</p>

<p>环境变量们住在这里：</p>

<ol>
<li><p>/etc/gitconfig：系统中对所有用户都普遍适用的配置。<br/>
<code>git config 用 --system 选项, 读写这个文件。</code></p></li>
<li><p>~/.gitconfig：用户目录下的配置文件只适用于该用户。<br/>
<code>git config 用 --global 选项, 读写这个文件。</code></p></li>
<li><p>当前项目的 .git/config ：这里的配置仅仅针对当前项目有效。</p></li>
</ol>


<p><strong><em>每一个级别的配置都会覆盖上层的相同配置, 所以.git/config 里的配置会覆盖 前两者中的同名变量。</em></strong></p>

<ul>
<li>设置用户信息：用户名称，邮件地址</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global user.name "username"
</span><span class='line'>$ git config --global user.email username@126.com
</span><span class='line'>// --global表示更改的是用户住目录中的配置文件，去掉该选项则修改的是当前项目的配置文件。</span></code></pre></td></tr></table></div></figure>


<p><code>每次 Git 提交时会说明是谁提交了更新, 随之纳入历史记录。</code></p>

<ul>
<li>设置文本编辑器</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global core.editor vi</span></code></pre></td></tr></table></div></figure>


<p><code>有时 Git 会提示你输入，这时会调用这里的文本编辑器。</code></p>

<ul>
<li>设置差异分析工具</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global merge.tool vimdiff</span></code></pre></td></tr></table></div></figure>


<p><code>在解决合并冲突时会使用差异分析工具，Git 可以理解 kdiff3,tkdiff,meld,xxdiff,emerge,vimdiff,gvimdiff,ecmerge,
，opendiff 等合并工具的输出信息。</code></p>

<ul>
<li>查看配置信息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --list</span></code></pre></td></tr></table></div></figure>


<p><code>若有重复的变量名, 说明它们来自不同的配置文件,  Git 实际采用的是最后一个。</code></p>

<p>也可以直接查阅某个环境变量的设定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config user.name</span></code></pre></td></tr></table></div></figure>


<h3>4. Git 帮助命令</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git help &lt;verb&gt;
</span><span class='line'>$ git &lt;verb&gt; --help
</span><span class='line'>$ man git-&lt;verb&gt;</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[添加duoshuo评论到octopress]]></title>
    <link href="http://cosail.github.io/blog/2014/10/08/tian-jia-duoshuoping-lun-dao-octopress/"/>
    <updated>2014-10-08T10:25:36+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/08/tian-jia-duoshuoping-lun-dao-octopress</id>
    <content type="html"><![CDATA[<p>octopress本身已经有disqus评论,但是在国内加载速度太慢，所以还是以国内的duoshuo评论替代之。</p>

<h3>主要涉及的文件</h3>

<p>下面根目录“/”为octopress/目录</p>

<pre><code>/_config.ymlz ：添加多说相关设置变量  
/source/_layouts/post.html ：为博文页添加duoshuo评论  
/source/_layouts/page.html ：为普通页面添加duoshuo评论  
/source/_include/post/duoshuo.html ：duoshuo评论框  
/source/_include/article.html ：文章上面加一个评论链接  
/source/_include/asides/duoshuo.html ：duoshuo最新评论显示  
/source/index.html ：  为首页添加duoshuo评论  
</code></pre>

<p>  <code>多说评论框把评论提交到多说服务器，多说最新评论显示从服务器拉取评论以显示在我们的页面上。  
下面一个文件一个文件地添加代码：</code></p>

<h3>编辑文件/_config.ymlz</h3>

<p>添加如下几行：</p>

<pre><code>duoshuo_short_name: yourname #用你自己duoshuo名（需要去多说网站获取）  
duoshuo_asides_num: 10      # 侧边栏评论显示条目数  
duoshuo_asides_avatars: 1   # 侧边栏评论是否显示头像  
duoshuo_asides_time: 1      # 侧边栏评论是否显示时间  
duoshuo_asides_title: 1     # 侧边栏评论是否显示标题  
duoshuo_asides_admin: 1     # 侧边栏评论是否显示作者评论  
duoshuo_asides_length: 18   # 侧边栏评论截取的长度  
</code></pre>

<h3>编辑文件/source/_layouts/post.html</h3>

<p>在disqus代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">disqus_short_name</span> <span class="nx">and</span> <span class="nx">page</span><span class="p">.</span><span class="nx">comments</span> <span class="o">==</span> <span class="kc">true</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Comments</span><span class="o">&lt;</span><span class="err">/h1&gt;  </span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;disqus_thread&quot;</span> <span class="nx">aria</span><span class="o">-</span><span class="nx">live</span><span class="o">=</span><span class="s2">&quot;polite&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="o">%</span> <span class="nx">include</span> <span class="nx">post</span><span class="o">/</span><span class="nx">disqus_thread</span><span class="p">.</span><span class="nx">html</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;  </span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/section&gt;  </span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下方添加多说评论框（在文件/source/_include/post/duoshuo.html中实现）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">duoshuo_short_name</span> <span class="nx">and</span> <span class="nx">page</span><span class="p">.</span><span class="nx">comments</span> <span class="o">!=</span> <span class="kc">false</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="err">多说评论：</span><span class="o">&lt;</span><span class="err">/h3&gt;  </span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;comments&quot;</span> <span class="nx">aria</span><span class="o">-</span><span class="nx">live</span><span class="o">=</span><span class="s2">&quot;polite&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="o">%</span> <span class="nx">include</span> <span class="nx">post</span><span class="o">/</span><span class="nx">duoshuo</span><span class="p">.</span><span class="nx">html</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;  </span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/section&gt;  </span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>上面是为了使rake new_post["..."]产生的文章页面下包含评论框；若要使用rake new_page["..."]产生的页面下也包含评论框，可以在/source/_layouts/page.html做同样添加。如下：</code></p>

<h3>编辑文件/source/_layouts/page.html</h3>

<p>就如前面index.html中的添加一样，在disqus代码后添加相应代码，这里不赘述了。</p>

<h3>编辑文件/source/_include/post/duoshuo.html</h3>

<p>这个文件需要你新建，然后复制粘贴以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--</span> <span class="err">在</span><span class="nx">octopress</span><span class="o">/</span><span class="err">目录的</span><span class="nx">_config</span><span class="p">.</span><span class="nx">yml</span><span class="err">中已经定义了</span><span class="nx">duoshuo_short_name</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">duoshuo_short_name</span> <span class="o">!=</span> <span class="kc">false</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="c">&lt;!--</span> <span class="err">多说评论框</span> <span class="nx">start</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ds-thread&quot;</span>  <span class="nx">data</span><span class="o">-</span><span class="nx">title</span><span class="o">=</span><span class="s2">&quot;添加duoshuo评论到octopress&quot;</span> <span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--</span> <span class="err">多说评论框</span> <span class="nx">end</span> <span class="o">--&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--</span> <span class="err">多说公共</span><span class="nx">JS</span><span class="err">代码</span> <span class="nx">start</span> <span class="p">(</span><span class="err">一个网页只需插入一次</span><span class="p">)</span> <span class="o">--&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">duoshuoQuery</span> <span class="o">=</span> <span class="p">{</span><span class="nx">short_name</span><span class="o">:</span><span class="s2">&quot;cosail&quot;</span><span class="p">};</span>
</span><span class='line'>          <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">ds</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">ds</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span><span class="nx">ds</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">ds</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">==</span> <span class="s1">&#39;https:&#39;</span> <span class="o">?</span> <span class="s1">&#39;https:&#39;</span> <span class="o">:</span> <span class="s1">&#39;http:&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;//static.duoshuo.com/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">ds</span><span class="p">.</span><span class="nx">charset</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>               <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">ds</span><span class="p">);</span>
</span><span class='line'>          <span class="p">})();</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--</span> <span class="err">多说公共</span><span class="nx">JS</span><span class="err">代码</span> <span class="nx">end</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>上面就是duoshuo评论框模块了。</code></p>

<h3>编辑文件/source/_include/article.html</h3>

<p>在disqus代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">disqus_short_name</span> <span class="nx">and</span> <span class="nx">page</span><span class="p">.</span><span class="nx">comments</span> <span class="o">!=</span> <span class="kc">false</span> <span class="nx">and</span> <span class="nx">post</span><span class="p">.</span><span class="nx">comments</span> <span class="o">!=</span> <span class="kc">false</span> <span class="nx">and</span> <span class="nx">site</span><span class="p">.</span><span class="nx">disqus_show_comment_count</span> <span class="o">==</span> <span class="kc">true</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">|</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#disqus_thread&quot;</span><span class="o">&gt;</span><span class="nx">Comments</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下方添加duoshuo代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">duoshuo_short_name</span> <span class="nx">and</span> <span class="nx">page</span><span class="p">.</span><span class="nx">comments</span> <span class="o">!=</span> <span class="kc">false</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">|</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#comments&quot;</span><span class="o">&gt;</span><span class="nx">Comments</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>这样就在文章上面加上了一个评论链接。</code></p>

<h3>编辑文件/source/_include/asides/duoshuo.html</h3>

<p>这个文件需要你新建，然后复制粘贴以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="err">最新评论</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">ul</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ds-recent-comments&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">num</span><span class="o">-</span><span class="nx">items</span><span class="o">=</span><span class="s2">&quot;10&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">show</span><span class="o">-</span><span class="nx">avatars</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">show</span><span class="o">-</span><span class="nx">time</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">show</span><span class="o">-</span><span class="nx">title</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">show</span><span class="o">-</span><span class="nx">admin</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">excerpt</span><span class="o">-</span><span class="nx">length</span><span class="o">=</span><span class="s2">&quot;18&quot;</span><span class="o">&gt;&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">index</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="c">&lt;!--</span><span class="err">多说</span><span class="nx">js</span><span class="err">加载开始，一个页面只需要加载一次</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">duoshuoQuery</span> <span class="o">=</span> <span class="p">{</span><span class="nx">short_name</span><span class="o">:</span><span class="s2">&quot;cosail&quot;</span><span class="p">};</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ds</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">ds</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span><span class="nx">ds</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">ds</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;http://static.duoshuo.com/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">ds</span><span class="p">.</span><span class="nx">charset</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">ds</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="c">&lt;!--</span><span class="err">多说</span><span class="nx">js</span><span class="err">加载结束，一个页面只需要加载一次</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>上面的代码是为了在侧边栏里显示最新评论，为了把它添加到侧边栏，还需在_config.yml 文件中的 blog_index_asides 行或 page_asides 行或 post_asides 行中添加：</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">asides</span><span class="o">/</span><span class="nx">duoshuo</span><span class="p">.</span><span class="nx">html</span>
</span></code></pre></td></tr></table></div></figure>


<h3>编辑文件/source/index.html</h3>

<p>在代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;blog-index&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">...</span><span class="err">省略</span><span class="p">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>的<code>&lt;/div&gt;</code>之前添加一段，像下面这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;blog-index&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">...</span><span class="err">省略</span><span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--</span> <span class="err">增加评论框</span> <span class="o">--&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">site</span><span class="p">.</span><span class="nx">duoshuo_short_name</span> <span class="nx">and</span> <span class="nx">page</span><span class="p">.</span><span class="nx">comments</span> <span class="o">!=</span> <span class="kc">false</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;duoshuo_thread&quot;</span> <span class="nx">aria</span><span class="o">-</span><span class="nx">live</span><span class="o">=</span><span class="s2">&quot;polite&quot;</span><span class="o">&gt;</span> <span class="p">{</span><span class="o">%</span> <span class="nx">include</span> <span class="nx">post</span><span class="o">/</span><span class="nx">duoshuo</span><span class="p">.</span><span class="nx">html</span> <span class="o">%</span><span class="p">}</span> <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/section&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>这样就在Blog的开始页面index.html上加入了评论功能。</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用octopress部署github博客]]></title>
    <link href="http://cosail.github.io/blog/2014/10/04/octopress/"/>
    <updated>2014-10-04T16:41:42+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/04/octopress</id>
    <content type="html"><![CDATA[<h3>依赖</h3>

<ul>
<li>octopress依赖ruby, 可能你得先执行:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install ruby ruby-dev</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在github创建自己的Web站点:<br/>
<a href="https://pages.github.com/">看官方示例</a></li>
</ul>


<h3>安装octopress:</h3>

<pre><code>git clone git://github.com/imathis/octopress.git octopress  //下载源码
cd octopress

切换gem源为国内源，方法如下：  
**先查看当前源(默认为官方源)**
gem source -l
**删除官方源**,如
gem source -r http://rubygems.org/
**添加淘宝源**
gem source -a http://ruby.taobao.org/

**安装bundler**
    gem install bundler

为了使后面的rake generate不出错, 在octopress/下的Gemfile文件首行:  
https://rubygems.org/替换为http://ruby.taobao.org/  
并在文件末尾添加: 
gem 'execjs'    //安装execjs
gem 'therubyracer'     //execjs还需要后端才能处理，想简单解决可以加上这个 Gem

bundle install  //安装octopress (若安装过程中出现问题-例如需要root权限来安装某些依赖,请根据提示处理之)
rake install    //安装octopress默认主题
</code></pre>

<h3>配置Octopress:</h3>

<pre><code>修改文件 _config.yml:
按自己情况填写url,title,subtitle,author,email等信息,
其中url为在github创建的仓库地址,如:  
 git@github.com:cosail/cosail.github.io或https://github.com/cosail/cosail.github.io。

为了避免网页加载太慢, 在source/目录中执行:
grep "googleapis" ./ -r     //查找需要修改的文件
替换文件中fonts.googleapis.com为fonts.useso.com(360提供的谷歌字库)，
替换文件中ajax.googleapis.com为ajax.useso.com(360提供的谷歌公用库)，
这样你调用这些文件的时候就快多了。

在octopress根目录执行 :
rake setup_github_pages    //按照要求输入仓库地址等，这个命令会在根目录下新建_deploy目录，
这个会push到仓库的master分支，也就是访问博客的文件。
    rake generate  //这个会按照既定规则生成静态文件的博客。
rake deploy    //将前一步生成的文件拷贝到_deploy目录,并push到github

第一次执行 rake deploy 的时候可能会报错,解决方法是进入_deploy目录执行:
git pull origin +master

然后再次尝试部署:
cd ..
rake deploy
</code></pre>

<p><code>现在就应该可以正常显示博客页面了!让我们预览一下:</code></p>

<h3>配置完成后, 进行本地预览:</h3>

<pre><code>rake preview //在浏览器中进行本地预览了,访问http://localhost:4000
</code></pre>

<h3>提交源码用于备份:</h3>

<pre><code>可以将当前octopress的源码备份到github的source分支下,在octopress目录下执行:
git add .
git commit -m 'Initial source commit'
git push origin source
</code></pre>

<h3>新建文章:</h3>

<pre><code>rake new_post["文章名"] //文章文件将存储在source/_posts目录下，按照Jekyll的命名规范命名：YYYY-MM-DD-post-文章名.markdown。
</code></pre>

<h3>新建页面:</h3>

<pre><code>添加页面cosail.github.io/new-page/ :
rake new_page[new-page] //creates /source/new-page/index.markdown
rake new_page[new-page/page.markdown] //creates /source/new-page/page.markdown  
</code></pre>

<p>访问试试: <a href="http://cosail.github.io/new-page/">cosail.github.io/new-page/</a></p>

<h3>使用octopress: 创建,编辑,生成并发布文章</h3>

<pre><code>rake new_post["文章名"]  //新建文章
编辑文章: 编辑source/_posts/下的相应markdown文件
rake generate     //生成
可选择备份一下:
        git add .
        git commit -am "back up for source/." 
        git push origin source
rake deploy     //发布
</code></pre>

<h3>另外一点小改动:</h3>

<p>为了点击链接在新标签页中打开, <br/>
在source/_include/custom/head.html文件末尾添加一行 :<br/>
   <code>&lt;base target=”_ blank”&gt;</code><br/>
点击试试: <a href="http://www.baidu.com">百度</a></p>

<h3>参考:</h3>

<p><a href="http://www.itzhoulin.com/category/wordpress/">利用octopress部署博客到github</a><br/>
<a href="https://ruby-china.org/topics/1605">执行 rails server 报错 Could not find a JavaScript runtime</a><br/>
<a href="http://jingyan.baidu.com/album/afd8f4de4595ac34e386e969.html?picindex=1">解决WP加载谷歌ajax.googleapis.com缓慢问题</a><br/>
<a href="http://zhidao.baidu.com/link?url=688qT_eBlOJIcHrFM1wmHFYBLWozjH1cE1FUW8ezjOyT6l4kxnlndXu1Uy_-5mZr6G54eES8NtkJfihDPXkovq">在html中怎么设置全部链接在新标签打开</a><br/>
<a href="http://www.oschina.net/question/218617_66108">markdown 如何显示html标签</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生成SSH Key,并设置github]]></title>
    <link href="http://cosail.github.io/blog/2014/10/04/ssh_key_for_github/"/>
    <updated>2014-10-04T16:35:07+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/04/ssh_key_for_github</id>
    <content type="html"><![CDATA[<h3>生成SSH key, 设置github</h3>

<p><a href="https://help.github.com/articles/generating-ssh-keys/">见github帮助:Generating SSH keys</a></p>

<p><code>注意最下面一行有个链接,说明如何改变一个已存在仓库的URL,如我们要使用SSH访问方式,这样就可以避免老是要输入帐户名和密码了:</code><a href="https://help.github.com/articles/changing-a-remote-s-url/">Changing a remote&rsquo;s URL.</a></p>

<h3>如果通过HTTPS访问,也可以让github记住你的用户名和密码(记住一段时间)</h3>

<p><a href="https://help.github.com/articles/caching-your-github-password-in-git/">Caching your GitHub password in Git</a><br/>
<code>比较: SSH访问是通过SSH key, 而不是用户名和密码来认证.</code></p>
]]></content>
  </entry>
  
</feed>
