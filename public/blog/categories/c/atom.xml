<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | cosail's blog]]></title>
  <link href="http://cosail.github.io/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://cosail.github.io/"/>
  <updated>2014-11-05T20:24:37+08:00</updated>
  <id>http://cosail.github.io/</id>
  <author>
    <name><![CDATA[cosail]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[二维数组如何作为参数传给函数？]]></title>
    <link href="http://cosail.github.io/blog/2014/11/05/er-wei-shu-zu-chuan-can/"/>
    <updated>2014-11-05T20:07:14+08:00</updated>
    <id>http://cosail.github.io/blog/2014/11/05/er-wei-shu-zu-chuan-can</id>
    <content type="html"><![CDATA[<h3>二维数组传参</h3>

<p>有一个二维数组:
<code>c
  int array[3][3];
</code>
想把它传给函数 func() 当参数，容易习惯性的写出下面这两种错误的定义：
<code>c
  void func(int **array) {}
  void func(int array[][]) {}
</code>
参数array在前一个定义中类型为<code>int *(*)</code>；而后一个array类型是错误的，连编译器也不认识。</p>

<p>正确的定义应该如下面这样：<br/>
<code>c
  void func(int array[][3]) {}
  void func(int (*array)[3]) {}
</code>
也就是说，上面的两个array参数表示的是同一种类型<code>int (*)[3]</code>。</p>

<p>二维数组其实只是一个<strong>指向一维数组的指针</strong>，而二级指针是<strong>指向指针的指针</strong>，二者并不是相容的类型。</p>

<h3>三维或更高维</h3>

<p>对于三维或更高维的数组如何作为参数传递呢?除了第一维，其它维度都需要显式指定。如4维数组传参：<br/>
<code>
  void func(int array[][3][3][3]) {}
</code></p>

<h3>数组和指针的差别</h3>

<p>数组和指针的差别在下面例子中有所体现：<br/>
<code>c
  int arr[3];
  int *p = arr;
  int lenp = sizeof(p);     //lenp值为4
  int lenarr = sizeof(arr);     //lenarr值为12
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typeof获取表达式类型]]></title>
    <link href="http://cosail.github.io/blog/2014/10/23/typeofhuo-qu-biao-da-shi-lei-xing/"/>
    <updated>2014-10-23T17:09:08+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/23/typeofhuo-qu-biao-da-shi-lei-xing</id>
    <content type="html"><![CDATA[<h3>typeof 关键字</h3>

<p><code>typeof</code>是 C 语言的一个新扩展，它告诉编译器你要使用某个表达式的类型（而不需要显示的指明该类型），如：</p>

<pre><code class="c">typeof( x[0](1) )  var;
</code></pre>

<p><code>上面定义了一个变量var，它的类型为：函数指针数组</code></p>

<p>也可以用类型而不是表达式，如：</p>

<pre><code class="c">typeof( int * )  var;
</code></pre>

<p><code>变量 var 的类型为： int *。这个好像用处不大？</code></p>

<p>一般情况下用<code>typeof</code>，如果要于ISO C兼容的话，用双下划线的形式<code>__typeof__</code>。</p>

<p>你可以在能用 typedef 的所有地方使用 typeof，如：类型声明，类型转换，或 sizeof()，typeof()中。例如：</p>

<pre><code class="c">typeof (*x) y;      // y 的类型为：指针 x 指向的类型  
typeof(*x) y[4];  // 指针 x 指向的类型的数组类型  
typeof (typeof (char *)[4]) y;  // 字符指针数组类型
</code></pre>

<p>如果想把T定义成一个表达式的类型：</p>

<pre><code class="c">typdef typeof(expr) T;
</code></pre>

<h3>限制</h3>

<p>typeof 中的类型名不能包含 extern 或 static，不过允许包含类型限定符 const 或 volatile。</p>

<pre><code class="c">typeof(extern int) a;       // 不可以
extern typeof(const int) b = 3;  // 可以
</code></pre>

<h3>应用</h3>

<p>gcc 编译器支持该扩展，在linux内核中应用非常广泛，如 linux-source-3.13.0/include/linux/kernel.h 文件中的两个宏：</p>

<p>下面定义一个安全的 max 宏，避免参数被多次展开的错误。</p>

<pre><code class="c">#define max(x, y) ({                         \
    typeof(x) _max1 = (x);                  \
    typeof(y) _max2 = (y);                  \
    (void) (&amp;_max1 == &amp;_max2);              \
    _max1 &gt; _max2 ? _max1 : _max2; })
</code></pre>

<p>下面第2行获取结构体（类型名为 type）中的成员（成员变量名为 member）相对结构体<br/>
起始地址的偏移量，第3行由成员的起始地址（ptr）减去其偏移量得到结构体的起始地址：</p>

<pre><code class="c">#define container_of(ptr, type, member) ({          \
    const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);    \
    (type *)( (char *)__mptr - offsetof(type,member) );})
</code></pre>

<h3>类似的__auto_type</h3>

<p>可以在 gnu c 中使用<code>__auto_type</code>来声明一个变量的类型，如</p>

<pre><code class="c">int a = 3;
__auto_type  var = a;   // 类似C++里的 auto
</code></pre>

<p><a href="https://gcc.gnu.org/onlinedocs/gcc/Typeof.html">参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么在struct里定义宏]]></title>
    <link href="http://cosail.github.io/blog/2014/10/22/structli-de-number-define/"/>
    <updated>2014-10-22T22:18:21+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/22/structli-de-number-define</id>
    <content type="html"><![CDATA[<p>有时会看到结构体里有宏定义，如下：
&#8220;`c
struct rb_node<br/>
{<br/>
    unsigned long  rb_parent_color;</p>

<h1>define RB_RED      0</h1>

<h1>define RB_BLACK    1</h1>

<pre><code>struct rb_node *rb_right;  
struct rb_node *rb_left;  
</code></pre>

<p>} <strong>attribute</strong>((aligned(sizeof(long))));<br/>
&#8220;`
这是Linux内核中红黑树节点的定义，其中 rb_parent_color 的第0位用来存储节点的颜色（红/黑）。把两种颜色的宏定义放在结构体定义内，应该是为了增强代码可读性。</p>

<p>因为对宏的处理是在预编译时完成的，而预处理器仅仅作简单的替换。宏从其定义处开始，至文件的尾部或取消宏(#undef)为止是可见的，struct的作用域对宏的定义没影响。</p>

<p>可以用 gcc -E 命令来只做预处理而不编译，来查看宏处理后的程序源代码。</p>
]]></content>
  </entry>
  
</feed>
