<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Datastruct/tree | cosail's blog]]></title>
  <link href="http://cosail.github.io/blog/categories/datastruct-slash-tree/atom.xml" rel="self"/>
  <link href="http://cosail.github.io/"/>
  <updated>2014-10-31T08:37:52+08:00</updated>
  <id>http://cosail.github.io/</id>
  <author>
    <name><![CDATA[cosail]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[线段(区间)树]]></title>
    <link href="http://cosail.github.io/blog/2014/10/28/qu-jian-xian-duan-shu/"/>
    <updated>2014-10-28T19:53:48+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/28/qu-jian-xian-duan-shu</id>
    <content type="html"><![CDATA[<p><strong>线段树</strong>是一棵二叉树，其每一个节点表示了一个区间[a, b]；每一层中所有节点表示的区间互不重叠，其并都为整个区间范围。</p>

<p><font color='blue'>特点：</font> 每一个叶子节点表示一个不可再分的单位区间；若一个非叶子节点表是区间[a, b]，则其左子节点表示[a, (a+b)/2]，右子节点表示((a+b)/2，b]。<br/>
其实是进行了二分，所以线段树是一棵平衡树，其深度不超过 lg(L)，L为最长区间长度。</p>

<p><font color='blue'>应用：</font> 线段树适合用来处理有关区间统计的问题：按区间划分，修改，特别是需要经常进行查找操作时。</p>

<p><font color='red'>题1：</font> 求序列 a1a2&hellip;an 的任意一个子序列 ai&hellip;aj 的和，同时允许动态修改每个元素的值？<br/>
<font color='green'>解：</font> 构造一棵区间树，其根节点表示区间[a1, an]，每个节点里再加上额外字段 sum 来表示区间里所有数的和。<br/>
对于求子序列和：找到子序列覆盖的所有子区间，把这些子区间对应的 sum 累加。那怎么去累加呢？一是用递归；二是遍历这段被覆盖的区域。<br/>
对于修改元素值：与区间两端值作比较，往下找到元素所在的节点；然后修改元素值；最后往上更新每个节点的 sum 值，直到根节点。</p>

<p><font color='red'>变形：</font> 求序列 a1a2&hellip;an 的任意一个子序列 ai&hellip;aj 的和，同时允许对某个子序列中所有元素的值都增加 k？<br/>
<font color='green'>解：</font> 若像题1一样逐个修改元素值，则工作量有点大。若这种操作很经常的话，可以在为每个节点加一个额外字段 inc 来表示该节点对应区间中每个值的增量。求和时只需加上 inc * 区间元素个数。当然，查找元素时别忘了带着增量往下走。</p>

<p><font color='red'>题2：</font> 求序列 a1a2&hellip;an 的任意一个子序列 ai&hellip;aj 中最大元素与最小元素值的差？<br/>
<font color='green'>解：</font> 类似题1，每个节点里再加上两个额外字段 min,max 来表示区间里最小元素值，最大元素值。<br/>
找到子序列覆盖的所有子区间，从这些子区间中找出最大值和最小值，再相减。</p>

<p><font color='red'>题3：</font> 苹果树。一棵苹果树上每个分叉点（二叉）及末梢可能有苹果(最多1个)，每次可以摘掉一个苹果，或有一个苹果新长出来，随时查询某块树枝（某个分叉点往上的子树）上，一共有多少个苹果。<br/>
<font color='green'>解：</font> 该题关键要看到，每个非叶子节点上也是会长苹果的。深度优先遍历整个苹果树，为每个节点标记一个序号（1~n），一个值为 0 或 1 的 apple 字段（可变化），一个 sum 字段。某个节点往上对应树枝上的苹果数即该节点里的 apple + sum 值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉查找树转双向链表]]></title>
    <link href="http://cosail.github.io/blog/2014/10/28/shu/"/>
    <updated>2014-10-28T10:11:11+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/28/shu</id>
    <content type="html"><![CDATA[<p><font color='red'>问题：</font> 将一棵二叉查找树转换成一个排好序的双向链表。<br/>
<font color='red'>要求：</font> 不能创建新节点，只能调整指针指向。</p>

<hr />

<p><font color='blue'>分析：</font> 关键是看如何遍历二叉查找树，要按顺序访问的话只能用深度优先遍历了。<br/>
<font color='blue'>补充：</font> 树遍历就是按某种顺序对树中每个结点访问且只能访问一次的过程，本质上是将非线性结构线性化。访问的含义很广，如查询、计算、修改、输出结点的值。<br/>
树的遍历分为深度优先遍历（含先序，中序，后序），广度优先遍历。用递归（使用函数调用栈）实现深度优先遍历，用栈实现广度优先遍历。</p>

<hr />

<p><font color='green'>解法1：</font> 中序遍历二叉查找树，较小的节点先访问。第一个访问的节点作为链表第一个节点，往后每访问一个节点就将其附加到链表的尾部。<br/>
<font color='green'>解法2：</font> 先序遍历二叉查找树（还必须加上递归思想：将左子树和右子树分别抽象为一个节点）。第一个访问的是根节点的左子树（递归处理左子树，将其看作是一个已经转换好的前面部分的链表），然后是根节点（将其看作是链表中间某位置的节点），最后是根节点的右子树（递归处理右子树，将其看作是一个已经转换好的后面部分的链表）。最后将这三个部分依次连接起来就行了：左子树的最右节点与根节点相连，根节点再和右子树的最左节点相连。</p>
]]></content>
  </entry>
  
</feed>
