<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | cosail's blog]]></title>
  <link href="http://cosail.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://cosail.github.io/"/>
  <updated>2014-11-05T22:55:06+08:00</updated>
  <id>http://cosail.github.io/</id>
  <author>
    <name><![CDATA[cosail]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git分支]]></title>
    <link href="http://cosail.github.io/blog/2014/10/30/gitfen-zhi/"/>
    <updated>2014-10-30T16:05:13+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/30/gitfen-zhi</id>
    <content type="html"><![CDATA[<blockquote><p>以下是阅读《Pro Git》时的记录<br/>
《Pro Git》Scott Chacon 2010, licensed under the Creative Commons Attribution-Non Commercial-Share Alike 3.0 license.</p></blockquote>

<h3>1.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git基础操作]]></title>
    <link href="http://cosail.github.io/blog/2014/10/14/gitji-chu-cao-zuo/"/>
    <updated>2014-10-14T10:34:40+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/14/gitji-chu-cao-zuo</id>
    <content type="html"><![CDATA[<blockquote><p>以下是阅读《Pro Git》时的记录<br/>
《Pro Git》Scott Chacon 2010, licensed under the Creative Commons Attribution-Non Commercial-Share Alike 3.0 license.</p></blockquote>

<h3>1. 取得项目的 Git 仓库</h3>

<p>有两种取得Git仓库的方法：1.对已有项目创建新的Git仓库；2.克隆已有的Git仓库。</p>

<h5>1.1 从项目目录初始化</h5>

<ul>
<li><p>开始用Git管理当前项目，在项目目录下执行：
<code>
$ git init
</code>
<code>初始化后会在当前目录下增加 .git 目录，但还没有跟踪项目任何文件。</code></p></li>
<li><p>将几个文件纳入版本控制
<code>
$ git add *.c
$ git add README
$ git commit -m 'initial project version'
</code></p></li>
</ul>


<h5>1.2 从已有仓库克隆</h5>

<pre><code>$ git clone git://github.com/user/repo.git
</code></pre>

<p><code>在当前目录下创建repo目录，里面装着克隆过来的项目仓库。</code></p>

<pre><code>$ git clone git://github.com/user/repo.git myrepo
</code></pre>

<p><code>和上一条命令一样，但明确指定创建的目录名为myrepo。</code></p>

<p>另外 Git 还支持其他传输协议，如http,https,SSH：
<code>
$ git clone http://github.com/user/repo.git
$ git clone user@server:/path/repo.git
</code></p>

<h3>2. 更新记录到仓库</h3>

<h5>2.1 检查当前文件状态</h5>

<pre><code>$ git status
</code></pre>

<p><code>它会告诉你哪些文件当前处于什么状态。</code></p>

<h5>2.2 跟踪新文件</h5>

<pre><code>$ git add file
</code></pre>

<p><code>使file文件或目录开始被跟踪；它可以接受通配符，如 git add *.c 。</code></p>

<h5>2.3 暂存已修改文件</h5>

<pre><code>$ git add file
</code></pre>

<p><code>被跟踪文件发生变化后，把它放到暂存区还是使用 git add，它是个多用途的命令。</code><br/>
<code>注意：若文件已暂存后又修改了文件，则提交时不会纳入修改，你需要重新执行 git add 将文件放到暂存区！</code></p>

<h5>2.4 忽略某些无需跟踪的文件</h5>

<p>在项目目录下建立 .gitignore 文件，添加过滤规则：</p>

<pre><code># 此为注释 
*.a             # 忽略所有 .a 结尾的文件
!lib.a      # 但 lib.a 除外
/TODO   # 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO
build/      # 忽略 build/ 目录下的所有文件
doc/*.txt   # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
</code></pre>

<h5>2.5 查看未暂存和已暂存的更新</h5>

<p>git status 仅仅列出了修改过的文件，若要查看工作目录中当前文件和暂存区快照之间的差异：</p>

<pre><code>$ git diff
</code></pre>

<p><code>git diff 会使用文件补丁的格式显示具体添加和删除的行。</code></p>

<p>若要看已经暂存起来的文件和上次提交时的快照之间的差异：</p>

<pre><code>$ git diff --cached
</code></pre>

<p><code>Git 1.6.1及以上版本还可使用 git diff --staged，效果相同但更好记。</code></p>

<h5>2.6 提交更新</h5>

<p><strong><em>在提交前请一定 git status，确认还有什么新建或修改过的文件没有 git add 进来！</em></strong></p>

<p>Git 会调用文本编辑器让你填写“提交说明”（编辑器中显示的注释中会显示更新内容，可用 -v 选项显示修改差异）：</p>

<pre><code>$ git commit
</code></pre>

<p>也直接在命令行带上“提交说明”：</p>

<pre><code>$ git commit -m “提交说明”
</code></pre>

<p>若想自动把所有已经跟踪过的文件暂存起来一并提交,从而跳过 git add 步骤，可以加上 -a 选项：</p>

<pre><code>$ git commit -am “提交说明”
</code></pre>

<h5>2.7 移除文件</h5>

<p>若想从 Git 仓库中移除文件(即从暂存区中移除)，但仍然在工作目录中保留该文件（也许想稍后将文件加入 .gitignore 文件中）：</p>

<pre><code>$ git rm --cached log/\*.log        #移除 log/ 目录下所有 .log 文件
</code></pre>

<p><code>**注意：** Git 有自己的文件模式扩展方式，当我们使用其自己的扩展方式（而不是让Shell来扩展）时，应在特殊字符前加 ’\‘ 。</code></p>

<p>若想从 Git 仓库中移除文件，并且从工作目录中移除该文件：</p>

<pre><code>$ rm file                   #从工作目录中移除，但仍然被git跟踪着
$ git rm file               #从 Git 仓库中移除(不再跟踪)
或 $ git rm -f file        #若file已被修改且放到暂存区，则需强制选项（防止因误删除文件而丢失修改内容）
</code></pre>

<p><code>**注意：** Git 有自己的文件模式扩展方式，当我们使用其自己的扩展方式（而不是让Shell来扩展）时，应在特殊字符前加 ’\‘ 。</code></p>

<h5>2.8 移动(重命名)文件</h5>

<p>若要对 Git 中的文件改名：</p>

<pre><code>$ git mv file_a file_b
</code></pre>

<p>实际上，上面的命令相当于：</p>

<pre><code>$ mv file_a file_b
$ git rm file_a
$ git add file_b
</code></pre>

<h3>3. 查看提交历史</h3>

<p>最常用的提交历史输出格式：</p>

<pre><code>$ git log               #按提交时间列出所有的更新
$ git log -p            #-p：展开显示每次提交的内容差异（看看别人改了啥）
$ git log -4            #-4：仅显示最近的4次更新
$ git log --stat        #--stat：仅显示简要的增改行数统计
</code></pre>

<p>你可能想要更特殊的输出格式：</p>

<pre><code>$ git log --pretty=oneline（或short,full,fuller） #oneline表示每个提交显示为一行
$ git log --pretty=format:"%h - %an, %ar : %s"  #定制显示格式(输出便于后期编程提取分析)
常用的格式占位符及其意义:
        %H 提交对象(commit)的完整哈希字串
        %h 提交对象的简短哈希字串
        %T 树对象(tree)的完整哈希字串
        %t 树对象的简短哈希字串
        %P 父对象(parent)的完整哈希字串
        %p 父对象的简短哈希字串
        %an 作者(author)的名字
        %ae 作者的电子邮件地址
        %ad 作者修订日期(可以用 -date= 选项定制格式)
        %ar 作者修订日期,按多久以前的方式显示
        %cn 提交者(committer)的名字
        %ce 提交者的电子邮件地址
        %cd 提交日期
        %cr 提交日期,按多久以前的方式显示
        %s 提交说明
</code></pre>

<p>也可以用简单的字符图形, 形象地展示了每个提交所在的分支及其分化衍合情况：</p>

<pre><code>$ git log --pretty=format:"%h %s" --graph
</code></pre>

<p>一些其他常用的选项及其释义:</p>

<pre><code>    --stat 显示每次更新的文件修改统计信息。
    --shortstat 只显示 --stat 中最后的行数修改添加移除统计。
    --name-only 仅在提交信息后显示已修改的文件清单。
    --name-status 显示新增、修改、删除的文件清单。
    --abbrev-commit 仅显示 SHA-1 的前几个字符,而非所有的 40 个字符。
    --relative-date 使用较短的相对时间显示(比如,“2 weeks ago”)。
</code></pre>

<p><strong><em>还可以限制输出的历史记录所在时间段：</em></strong></p>

<pre><code>$ git log --since=2.weeks
$ git log --since=“2008-01-15”
</code></pre>

<p>其他常用的类似选项及说明：</p>

<pre><code>-(n) 仅显示最近的 n 条提交
--since, --after 仅显示指定时间之后的提交。
--until, --before 仅显示指定时间之前的提交。
--author 仅显示指定作者相关的提交。
--committer 仅显示指定提交者相关的提交
</code></pre>

<p><code>综合示例：</code>查看 Git 仓库中,2008年10月期间, Junio提交的但未合并的测试脚本(位于项目的 t/ 目录下的文件)</p>

<pre><code>$ git log --pretty="%h:%s" --author=“Junio” --since="2008-10-01" \
--before="2008-11-01" --no-merges  --  t/
</code></pre>

<h3>4. 撤销操作</h3>

<p><code>注意：有些操作并不总是能撤销的！</code></p>

<h5>4.1 修改最后一次提交</h5>

<p>如果刚才提交时忘了暂存某些修改,可以先补上暂存操作,然后再运行 &ndash;amend 提交:</p>

<pre><code>$ git commit -m 'initial commit'        #修改提交说明
$ git add forgotten_file                    #补上暂存操作
$ git commit --amend
</code></pre>

<p><code>--amend提交命令修正了前一个的提交内容。</code></p>

<h5>4.2 取消已暂存的文件</h5>

<p>使已暂存的文件(当然是已修改的文件)回到已修改但未暂存状态:</p>

<pre><code>$ git reset HEAD &lt;file&gt;
</code></pre>

<h5>4.3 取消对文件的修改</h5>

<p>使已修改的文件回到修改前(上一次提交后)状态:</p>

<pre><code>$ git checkout --  &lt;file&gt;
</code></pre>

<p><code>其实是把之前版本文件拷贝过来覆盖了当前文件，请慎重！</code></p>

<h3>5. 远程仓库的使用</h3>

<h5>5.1 查看当前远程库</h5>

<p>克隆某个项目后，会有名为origin的远程库，用来表示所克隆的远程仓库。列出远程仓库：</p>

<pre><code>$ git remote
$ git remote -v         #-v：显示对应的仓库地址
</code></pre>

<h5>5.2 添加远程仓库</h5>

<p>添加一个新的远程仓库,指定一个简单的名字xiaoming,以便将来引用：</p>

<pre><code>$ git remote
$ git remote add xiaoming git://github.com/xiaoming/repo.git
</code></pre>

<h5>5.3 从远程仓库抓取数据</h5>

<p>从远程仓库抓取数据到本地:</p>

<pre><code>$ git fetch origin master
</code></pre>

<p><code>fetch只是将远端的数据拉到本地仓库,并不自动合并到当前工作分支,当你需要是可手工合并。</code></p>

<p>如果想从远程仓库抓取数据，并自动合并到本地仓库当前分支:</p>

<pre><code>$ git pull origin master
</code></pre>

<h5>5.4 推送数据到远程仓库</h5>

<p><code>如果有其他人在你之前推送了若干更新，那你得先抓取，合并，然后再推送。</code><br/>
和别人分享劳动成果啦:</p>

<pre><code>$ git push origin master
</code></pre>

<p><code>成功条件：在服务器上有写权限；同一时刻没有别人在推送数据。</code></p>

<h5>5.5 查看远程仓库信息</h5>

<pre><code>$ git remote show origin
</code></pre>

<p><code>它会告诉我们，运行 git pull/push 时缺省拉取/推送的分支是什么，以及分支的同步情况。</code></p>

<h5>5.6 远程仓库的删除和重命名</h5>

<p>修改某个远程仓库的简短名称，如把xiaoming改为xm:</p>

<pre><code>$ git remote rename xiaoming xm
</code></pre>

<p>若要移除远程仓库xiaoming(仅仅是添加远程仓库的逆操作):</p>

<pre><code>$ git remote rm xiaoming xm
</code></pre>

<h3>6. 打标签</h3>

<p>Git 可以对某一时间点的版本打上标签，人们在发布某个软件版本(比如 v1.0)的时候，经常这么做。</p>

<h5>6.1 列出和查看已有的标签</h5>

<pre><code>$ git tag
</code></pre>

<p><code>显示的标签按字母顺序排列。</code></p>

<p>也可以用特定的搜索模式列出符合条件的标签：
<code>
$ git tag -l 'v1.4.2.*'
</code>
<code>列出 v1.4.2 系列的版本。</code></p>

<p>可以查看某个标签的信息：</p>

<pre><code>$ git show  v1.4.2.0
</code></pre>

<h5>6.2 新建标签</h5>

<p><code>一般建议使用含附注型的标签，以便保留相关信息；但若只是临时性加注标签或不需要旁注信息，用轻量级标签也行。</code></p>

<ul>
<li><code>轻量级标签</code>就像是个不会变化的分支，其实只是个指向特定提交对象的引用。新建轻量级标签：</li>
</ul>


<pre><code>$ git tag v1.0-LW
</code></pre>

<ul>
<li><code>含附注标签</code>实际上是存储在仓库中的一个独立对象，有自身的校验和，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。</li>
</ul>


<pre><code>$ git tag -a v1.4 -m 'my version 1.4'    #-m 指定了对应的标签说明
</code></pre>

<ul>
<li>签署一个标签：如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的 -a 改为 -s 。</li>
</ul>


<pre><code>$ git tag -s v1.5 -m 'my signed 1.5 tag'
</code></pre>

<p><code>这可能会提示你输入密码啥的。</code></p>

<ul>
<li>验证一个标签：以下命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证。</li>
</ul>


<pre><code>$ git tag  -v  v1.5
</code></pre>

<ul>
<li>后期加注标签</li>
</ul>


<p>你甚至可以在后期对早先的某次提交加注标签，跟上对应提交对象的校验和(或前几位字符)：</p>

<pre><code>$ git tag -a v1.2 9fceb02
</code></pre>

<ul>
<li>分享标签</li>
</ul>


<p>默认情况下，git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库：</p>

<pre><code>$ git push origin v1.2      #仅推送标签 v1.2
$ git push origin --tags   #一次推送所有标签上去
</code></pre>

<p><code>这样别人也能看到这些标签了。</code></p>

<h3>7. Git 命令别名</h3>

<p>可以为命令设置别名：</p>

<pre><code>$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
$ git config --global alias.unstage 'reset HEAD --'
$ git config --global alias.last 'log -1 HEAD'
</code></pre>

<p><code>现在若想输入 git commit，只需键入 git ci 即可。</code></p>

<p>若想运行某个外部命令，而非 Git 的附属工具，只需在命令前加上<code>!</code> 就行：</p>

<pre><code>$ git config --global alias.visual "!gitk"
</code></pre>

<h3>8 命令自动补全</h3>

<p>如果你用的是 Bash shell，可以试试看 Git 提供的<code>自动完成脚本</code>：</p>

<p>下载 Git 的源代码，将contrib/completion/git-completion.bash 文件复制到你自己的用户主目录中：</p>

<pre><code>cp git-completion.bash ∼/.git-completion.bash  
</code></pre>

<p>并把下行添加到你的 .bashrc 文件中:<br/>
<code>
source ~/.git-completion.bash
</code>
<code>要为系统上所有用户都设置默认使用此脚本，Linux 上复制到 /etc/bash_completion.d/ 目录中即可。</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git概述及初配置]]></title>
    <link href="http://cosail.github.io/blog/2014/10/12/git-start/"/>
    <updated>2014-10-12T20:16:46+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/12/git-start</id>
    <content type="html"><![CDATA[<blockquote><p>以下是阅读《Pro Git》时的记录<br/>
《Pro Git》Scott Chacon 2010, licensed under the Creative Commons Attribution-Non Commercial-Share Alike 3.0 license.</p></blockquote>

<h3>1. 版本控制系统（VCS）</h3>

<p>VCS的主要作用：记录文件的变化，保存项目过去某些时间点的状态，回溯到之前的状态。<br/>
<code>即保存和恢复数据。</code></p>

<ul>
<li><p>本地版本控制系统: 保存并管理文件补丁（文件内容前后的变化），不断打补丁。<br/>
<code>自己在自己的电脑上干自己的事。</code></p></li>
<li><p>集中化版本控制系统（CVCS）：单一的集中管理服务器保存所有文件的修订版本。<br/>
<code>可有多人用客户端访问中央服务器，取出文件，提交更新，协同合作。
  若中央服务器故障，则可能丢失数据，且大家都无法在故障时段提交更新。</code></p></li>
<li><p>分布式版本控制系统（DVCS）：  客户端有代码仓库的完整镜像，和服务器一样掌握所有必要信息。<br/>
<code>大家可以在自己电脑上提交（异步），必要时推到服务器（同步）。</code></p></li>
</ul>


<h3>2. Git的特点</h3>

<ul>
<li><p>直接给更新的文件作快照，并保存快照的索引。<br/>
<code>而不是像其他CVS一样每次仅仅记录变化的部分</code></p></li>
<li><p>本地保存更新历史，断网时可以向本机提交更新。<br/>
<code>Subversion和CVS断网时无法提交更新，因为仓库数据在服务器上维护着，本机信息不足。</code></p></li>
<li><p>保持数据完整性<br/>
<code>保存文件或目录需要先计算校验和（使用SHA-1算法计算出的一个哈希值，作为指纹），并将结果作为唯一标识及索引。你动了哪里，Git就会知道。</code></p></li>
<li><p>高可靠性<br/>
<code>在Git，只要在本机提交后（本机操作很方便快捷），就不必担心弄丢弄乱数据了（可在本机恢复）；若再定期推送到远端仓库的话，就更保险了。</code></p></li>
<li><p>git三状态：已修改，已暂存(staged)，已提交。</p>

<ul>
<li>已修改：修改了某文件</li>
<li>已暂存：把已修改文件列为下次要提交的文件</li>
<li>已提交：文件已安全地保存在本机数据库中</li>
</ul>
</li>
</ul>


<p>基本的 Git 工作流程如下所示:</p>

<ol>
<li><p>在工作目录中修改某些文件。
<code>工作目录中的文件实际上都是从 git 目录中的压缩对象数据库中提取出来的，我们在工作目录中编辑文件。</code></p></li>
<li><p>对这些修改了的文件作快照,并保存到暂存区域。<br/>
<code>暂存区其实是个索引文件，放在 git 目录中。</code></p></li>
<li><p>提交更新,将保存在暂存区域的文件快照转储到 git 目录中。   <br/>
<code>每个项目有一个.git/目录，是保存元数据和对象数据库的地方。克隆仓库时拷贝的就是里边的数据。</code></p></li>
</ol>


<h3>3. 初次配置Git</h3>

<p>Git 有专门用来配置和读取相应工作环境变量的工具： git config 命令（实际调用 git-config 命令）。</p>

<p>环境变量们住在这里：</p>

<ol>
<li><p>/etc/gitconfig：系统中对所有用户都普遍适用的配置。<br/>
<code>git config 用 --system 选项, 读写这个文件。</code></p></li>
<li><p>~/.gitconfig：用户目录下的配置文件只适用于该用户。<br/>
<code>git config 用 --global 选项, 读写这个文件。</code></p></li>
<li><p>当前项目的 .git/config ：这里的配置仅仅针对当前项目有效。</p></li>
</ol>


<p><strong><em>每一个级别的配置都会覆盖上层的相同配置, 所以.git/config 里的配置会覆盖 前两者中的同名变量。</em></strong></p>

<ul>
<li><p>设置用户信息：用户名称，邮件地址
<code>
$ git config --global user.name "username"
$ git config --global user.email username@126.com
// --global表示更改的是用户住目录中的配置文件，去掉该选项则修改的是当前项目的配置文件。
</code>
<code>每次 Git 提交时会说明是谁提交了更新, 随之纳入历史记录。</code></p></li>
<li><p>设置文本编辑器
<code>
$ git config --global core.editor vi
</code>
<code>有时 Git 会提示你输入，这时会调用这里的文本编辑器。</code></p></li>
<li><p>设置差异分析工具
<code>
$ git config --global merge.tool vimdiff
</code>
<code>在解决合并冲突时会使用差异分析工具，Git 可以理解 kdiff3,tkdiff,meld,xxdiff,emerge,vimdiff,gvimdiff,ecmerge,
，opendiff 等合并工具的输出信息。</code></p></li>
<li><p>查看配置信息
<code>
git config --list
</code>
<code>若有重复的变量名, 说明它们来自不同的配置文件,  Git 实际采用的是最后一个。</code></p></li>
</ul>


<p>也可以直接查阅某个环境变量的设定：<br/>
<code>
$ git config user.name
</code></p>

<h3>4. Git 帮助命令</h3>

<pre><code>$ git help &lt;verb&gt;
$ git &lt;verb&gt; --help
$ man git-&lt;verb&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[添加duoshuo评论到octopress]]></title>
    <link href="http://cosail.github.io/blog/2014/10/08/tian-jia-duoshuoping-lun-dao-octopress/"/>
    <updated>2014-10-08T10:25:36+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/08/tian-jia-duoshuoping-lun-dao-octopress</id>
    <content type="html"><![CDATA[<p>octopress本身已经有disqus评论,但是在国内加载速度太慢，所以还是以国内的duoshuo评论替代之。</p>

<h3>主要涉及的文件</h3>

<p>下面根目录“/”为octopress/目录</p>

<pre><code>/_config.ymlz ：添加多说相关设置变量  
/source/_layouts/post.html ：为博文页添加duoshuo评论  
/source/_layouts/page.html ：为普通页面添加duoshuo评论  
/source/_include/post/duoshuo.html ：duoshuo评论框  
/source/_include/article.html ：文章上面加一个评论链接  
/source/_include/asides/duoshuo.html ：duoshuo最新评论显示  
/source/index.html ：  为首页添加duoshuo评论  
</code></pre>

<p>  <code>多说评论框把评论提交到多说服务器，多说最新评论显示从服务器拉取评论以显示在我们的页面上。  
下面一个文件一个文件地添加代码：</code></p>

<h3>编辑文件/_config.ymlz</h3>

<p>添加如下几行：</p>

<pre><code>duoshuo_short_name: yourname #用你自己duoshuo名（需要去多说网站获取）  
duoshuo_asides_num: 10      # 侧边栏评论显示条目数  
duoshuo_asides_avatars: 1   # 侧边栏评论是否显示头像  
duoshuo_asides_time: 1      # 侧边栏评论是否显示时间  
duoshuo_asides_title: 1     # 侧边栏评论是否显示标题  
duoshuo_asides_admin: 1     # 侧边栏评论是否显示作者评论  
duoshuo_asides_length: 18   # 侧边栏评论截取的长度  
</code></pre>

<h3>编辑文件/source/_layouts/post.html</h3>

<p>在disqus代码：</p>

<pre><code class="javascript">  
</code></pre>

<p>下方添加多说评论框（在文件/source/_include/post/duoshuo.html中实现）：</p>

<pre><code class="javascript">  
  &lt;section&gt;  
    &lt;h3&gt;多说评论：&lt;/h3&gt;  
    &lt;div id="comments" aria-live="polite"&gt;<!-- wuwei,2014.10.7 -->
<section>
	<!-- 我在octopress/目录的_config.yml中定义了duoshuo_enable -->
	
	<!-- 多说评论框 start -->
	<div class="ds-thread"  data-title="Category: git" ></div>
		<!-- 多说评论框 end -->
		<!-- 多说公共JS代码 start (一个网页只需插入一次) -->
		<script type="text/javascript">
		var duoshuoQuery = {short_name:"cosail"};
			(function() {
				var ds = document.createElement('script');
				ds.type = 'text/javascript';ds.async = true;
				ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
				ds.charset = 'UTF-8';
				(document.getElementsByTagName('head')[0] 
				 || document.getElementsByTagName('body')[0]).appendChild(ds);
			})();
		</script>
		<!-- 多说公共JS代码 end -->
	
<section>

&lt;/div&gt;  
  &lt;/section&gt;  
  
</code></pre>

<p><code>上面是为了使rake new_post["..."]产生的文章页面下包含评论框；若要使用rake new_page["..."]产生的页面下也包含评论框，可以在/source/_layouts/page.html做同样添加。如下：</code></p>

<h3>编辑文件/source/_layouts/page.html</h3>

<p>就如前面index.html中的添加一样，在disqus代码后添加相应代码，这里不赘述了。</p>

<h3>编辑文件/source/_include/post/duoshuo.html</h3>

<p>这个文件需要你新建，然后复制粘贴以下代码：</p>

<pre><code class="javascript">&lt;section&gt;
    &lt;!-- 在octopress/目录的_config.yml中已经定义了duoshuo_short_name --&gt;
    
    &lt;!-- 多说评论框 start --&gt;
    &lt;div class="ds-thread"  data-title="Category: git" &gt;&lt;/div&gt;
        &lt;!-- 多说评论框 end --&gt;
        &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;
        &lt;script type="text/javascript"&gt;
        var duoshuoQuery = {short_name:"cosail"};
            (function() {
                var ds = document.createElement('script');
                ds.type = 'text/javascript';ds.async = true;
                ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
                ds.charset = 'UTF-8';
                (document.getElementsByTagName('head')[0] 
                 || document.getElementsByTagName('body')[0]).appendChild(ds);
            })();
        &lt;/script&gt;
        &lt;!-- 多说公共JS代码 end --&gt;
    
&lt;section&gt;
</code></pre>

<p><code>上面就是duoshuo评论框模块了。</code></p>

<h3>编辑文件/source/_include/article.html</h3>

<p>在disqus代码：</p>

<pre><code class="javascript">
</code></pre>

<p>下方添加duoshuo代码：</p>

<pre><code class="javascript">
| &lt;a href="#comments"&gt;Comments&lt;/a&gt;

</code></pre>

<p><code>这样就在文章上面加上了一个评论链接。</code></p>

<h3>编辑文件/source/_include/asides/duoshuo.html</h3>

<p>这个文件需要你新建，然后复制粘贴以下代码：</p>

<p>&#8220;`javascript
<section></p>

<h1>最新评论</h1>


<ul class="ds-recent-comments" data-num-items="10" data-show-avatars="1" data-show-time="1" data-show-title="1" data-show-admin="1" data-excerpt-length="18"></ul>


<p>
</section>
&#8220;`</p>

<p><code>上面的代码是为了在侧边栏里显示最新评论，为了把它添加到侧边栏，还需在_config.yml 文件中的 blog_index_asides 行或 page_asides 行或 post_asides 行中添加：</code></p>

<pre><code>    asides/duoshuo.html
</code></pre>

<h3>编辑文件/source/index.html</h3>

<p>在代码：</p>

<p>&#8220;`javascript</p>

<div class="blog-index">
    &#8230;省略&#8230;
</div>


<pre><code>
的`&lt;/div&gt;`之前添加一段，像下面这样：
</code></pre>

<div class="blog-index">
    &#8230;省略&#8230;
    
    <!-- 增加评论框 -->
    
      <section>
        <div id="duoshuo_thread" aria-live="polite"> <!-- wuwei,2014.10.7 -->
<section>
	<!-- 我在octopress/目录的_config.yml中定义了duoshuo_enable -->
	
	<!-- 多说评论框 start -->
	<div class="ds-thread"  data-title="Category: git" ></div>
		<!-- 多说评论框 end -->
		<!-- 多说公共JS代码 start (一个网页只需插入一次) -->
		<script type="text/javascript">
		var duoshuoQuery = {short_name:"cosail"};
			(function() {
				var ds = document.createElement('script');
				ds.type = 'text/javascript';ds.async = true;
				ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
				ds.charset = 'UTF-8';
				(document.getElementsByTagName('head')[0] 
				 || document.getElementsByTagName('body')[0]).appendChild(ds);
			})();
		</script>
		<!-- 多说公共JS代码 end -->
	
<section>

 </div>
      </section>
      
    
</div>


<p>&#8220;`</p>

<p><code>这样就在Blog的开始页面index.html上加入了评论功能。</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用octopress部署github博客]]></title>
    <link href="http://cosail.github.io/blog/2014/10/04/octopress/"/>
    <updated>2014-10-04T16:41:42+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/04/octopress</id>
    <content type="html"><![CDATA[<h3>依赖</h3>

<ul>
<li><p>octopress依赖ruby, 可能你得先执行:<br/>
<code>
sudo apt-get install ruby ruby-dev
</code></p></li>
<li><p>在github创建自己的Web站点:<br/>
<a href="https://pages.github.com/">看官方示例</a></p></li>
</ul>


<h3>安装octopress:</h3>

<pre><code>git clone git://github.com/imathis/octopress.git octopress  //下载源码
cd octopress

切换gem源为国内源，方法如下：  
**先查看当前源(默认为官方源)**
gem source -l
**删除官方源**,如
gem source -r http://rubygems.org/
**添加淘宝源**
gem source -a http://ruby.taobao.org/

**安装bundler**
    gem install bundler

为了使后面的rake generate不出错, 在octopress/下的Gemfile文件首行:  
https://rubygems.org/替换为http://ruby.taobao.org/  
并在文件末尾添加: 
gem 'execjs'    //安装execjs
gem 'therubyracer'     //execjs还需要后端才能处理，想简单解决可以加上这个 Gem

bundle install  //安装octopress (若安装过程中出现问题-例如需要root权限来安装某些依赖,请根据提示处理之)
rake install    //安装octopress默认主题
</code></pre>

<h3>配置Octopress:</h3>

<pre><code>修改文件 _config.yml:
按自己情况填写url,title,subtitle,author,email等信息,
其中url为在github创建的仓库地址,如:  
 git@github.com:cosail/cosail.github.io或https://github.com/cosail/cosail.github.io。

为了避免网页加载太慢, 在source/目录中执行:
grep "googleapis" ./ -r     //查找需要修改的文件
替换文件中fonts.googleapis.com为fonts.useso.com(360提供的谷歌字库)，
替换文件中ajax.googleapis.com为ajax.useso.com(360提供的谷歌公用库)，
这样你调用这些文件的时候就快多了。

在octopress根目录执行 :
rake setup_github_pages    //按照要求输入仓库地址等，这个命令会在根目录下新建_deploy目录，
这个会push到仓库的master分支，也就是访问博客的文件。
    rake generate  //这个会按照既定规则生成静态文件的博客。
rake deploy    //将前一步生成的文件拷贝到_deploy目录,并push到github

第一次执行 rake deploy 的时候可能会报错,解决方法是进入_deploy目录执行:
git pull origin +master

然后再次尝试部署:
cd ..
rake deploy
</code></pre>

<p><code>现在就应该可以正常显示博客页面了!让我们预览一下:</code></p>

<h3>配置完成后, 进行本地预览:</h3>

<pre><code>rake preview //在浏览器中进行本地预览了,访问http://localhost:4000
</code></pre>

<h3>提交源码用于备份:</h3>

<pre><code>可以将当前octopress的源码备份到github的source分支下,在octopress目录下执行:
git add .
git commit -m 'Initial source commit'
git push origin source
</code></pre>

<h3>新建文章:</h3>

<pre><code>rake new_post["文章名"] //文章文件将存储在source/_posts目录下，按照Jekyll的命名规范命名：YYYY-MM-DD-post-文章名.markdown。
</code></pre>

<h3>新建页面:</h3>

<pre><code>添加页面cosail.github.io/new-page/ :
rake new_page[new-page] //creates /source/new-page/index.markdown
rake new_page[new-page/page.markdown] //creates /source/new-page/page.markdown  
</code></pre>

<p>访问试试: <a href="http://cosail.github.io/new-page/">cosail.github.io/new-page/</a></p>

<h3>使用octopress: 创建,编辑,生成并发布文章</h3>

<pre><code>rake new_post["文章名"]  //新建文章
编辑文章: 编辑source/_posts/下的相应markdown文件
rake generate     //生成
可选择备份一下:
        git add .
        git commit -am "back up for source/." 
        git push origin source
rake deploy     //发布
</code></pre>

<h3>另外一点小改动:</h3>

<p>为了点击链接在新标签页中打开, <br/>
在source/_include/custom/head.html文件末尾添加一行 :<br/>
   <code>&lt;base target=”_ blank”&gt;</code><br/>
点击试试: <a href="http://www.baidu.com">百度</a></p>

<h3>参考:</h3>

<p><a href="http://www.itzhoulin.com/category/wordpress/">利用octopress部署博客到github</a><br/>
<a href="https://ruby-china.org/topics/1605">执行 rails server 报错 Could not find a JavaScript runtime</a><br/>
<a href="http://jingyan.baidu.com/album/afd8f4de4595ac34e386e969.html?picindex=1">解决WP加载谷歌ajax.googleapis.com缓慢问题</a><br/>
<a href="http://zhidao.baidu.com/link?url=688qT_eBlOJIcHrFM1wmHFYBLWozjH1cE1FUW8ezjOyT6l4kxnlndXu1Uy_-5mZr6G54eES8NtkJfihDPXkovq">在html中怎么设置全部链接在新标签打开</a><br/>
<a href="http://www.oschina.net/question/218617_66108">markdown 如何显示html标签</a></p>
]]></content>
  </entry>
  
</feed>
