<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | cosail's blog]]></title>
  <link href="http://cosail.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://cosail.github.io/"/>
  <updated>2014-10-31T00:13:54+08:00</updated>
  <id>http://cosail.github.io/</id>
  <author>
    <name><![CDATA[cosail]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Kernel中的红黑树]]></title>
    <link href="http://cosail.github.io/blog/2014/10/23/linux-kernelzhong-de-rbtree/"/>
    <updated>2014-10-23T15:18:34+08:00</updated>
    <id>http://cosail.github.io/blog/2014/10/23/linux-kernelzhong-de-rbtree</id>
    <content type="html"><![CDATA[<blockquote><p>参考自Linux内核源码：<br/>
linux-source-3.13.0/Documentation/rbtree.txt<br/>
linux-source-3.13.0/include/linux/rbtree.h<br/>
linux-source-3.13.0/lib/rbtree.c</p></blockquote>

<h3>1. rbtree.txt中对红黑树的介绍</h3>

<p><code>红黑树</code>是一种自平衡的二叉搜索树，用来存储可排序的 key / value 对。</p>

<p>红黑树和 AVL 树相似，但提供更为实时的插入，删除（分别用最多两次，三次旋转操作完成平衡），有 O（log n）的查找时间复杂度。</p>

<p><code>Linux红黑树</code>为了优化速度，不是在红黑树节点中用指针指向被组织的数据结构，而是将红黑树节点嵌入到它组织的数据结构中（这样可以减少一次间接的地址引用，也有更好的缓存局部性）。</p>

<p>使用者要自己写二叉树的查找，插入函数（使用那些已经实现的红黑树函数）。</p>

<h3>2. Linux红黑树的使用及说明</h3>

<h5>2.1 创建一个新的红黑树</h5>

<p>红黑树中的数据节点就是一个包含 struct rb_node 成员的结构体：</p>

<pre><code class="c">struct mytype {
    struct rb_node node;
    char *keystring;
};
</code></pre>

<p>那如何由红黑树上的节点 rb_node 去访问相应的数据呢？在头文件&lt; linux/kernel.h > 中定义了一个宏 container_of，可用来从红黑树维护的节点得到包含着节点的结构体，然后就能访问该结构体的所有成员了：</p>

<pre><code class="c">/**
 * container_of - 由指向结构体成员变量的指针转换为该结构体本身的指针(得到包含它的容器)。
 * @ptr:    指向 member 的指针
 * @type:   包含 member 的结构体的类型
 * @member: 成员变量名
 */
#define container_of(ptr, type, member) ({          \
    const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);    \
    (type *)( (char *)__mptr - offsetof(type,member) );})
</code></pre>

<p><code>上面第 8 行获取结构体（类型名为 type）中的成员（成员变量名为 member）相对结构体起始地址的偏移量；第 9 行由成员的起始地址（ptr）减去其偏移量得到结构体的起始地址。</code><br/>
关于第 8 行的<code>typeof()</code>参看<a href="http://localhost:4000/blog/2014/10/23/typeofhuo-qu-biao-da-shi-lei-xing/">这里</a>。</p>

<p>我们也可以用 rb_entry 宏，它只是换了个更友好的名字：</p>

<pre><code class="c">#define rb_entry(ptr, type, member)  container_of(ptr, type, member)
</code></pre>

<p>红黑树的根是一个 struct rb_root，看代码：</p>

<pre><code class="c">struct rb_root {
    struct rb_node *rb_node;
};
#define RB_ROOT (struct rb_root) { NULL, }

struct rb_root mytree = RB_ROOT;   // 初始化红黑树的根
</code></pre>

<h5>2.2 在红黑树中查找一个值</h5>

<p>红黑树的查找很简单，就是二叉树的查找。前面说过，你需要写自己的查找函数，像这样：</p>

<pre><code class="c">struct mytype *my_search(struct rb_root *root, char *string)
{
    struct rb_node *node = root-&gt;rb_node;

    while (node) {
        struct mytype *data = container_of(node, struct mytype, node);
            int result;

            result = strcmp(string, data-&gt;keystring);

            if (result &lt; 0)
                    node = node-&gt;rb_left;
            else if (result &gt; 0)
                    node = node-&gt;rb_right;
            else
                    return data;
    }

    return NULL;
}
</code></pre>

<h5>2.3 在红黑树中插入一个值</h5>

<p>先查找得到 data 应插入的位置，然后插入相应的新节点并调整树使其平衡。</p>

<pre><code class="c">int my_insert(struct rb_root *root, struct mytype *data)
{
    struct rb_node **new = &amp;(root-&gt;rb_node), *parent = NULL;

    /* 查找应插入的位置 */
    while (*new) {
        struct mytype *this = container_of(*new, struct mytype, node);
        int result = strcmp(data-&gt;keystring, this-&gt;keystring);

        parent = *new;
        if (result &lt; 0)
            new = &amp;((*new)-&gt;rb_left);
        else if (result &gt; 0)
            new = &amp;((*new)-&gt;rb_right);
        else
            return FALSE; // 该值已存在！不用再插入
    }

    /* 插入新节点并调整树使其平衡 */
    rb_link_node(&amp;data-&gt;node, parent, new);
    rb_insert_color(&amp;data-&gt;node, root);

    return TRUE;
}
</code></pre>

<h5>2.4 在红黑树中删除或替换一个值</h5>

<p>要删除一个已有节点：</p>

<pre><code class="c">/* 删除节点函数原型 */
void rb_erase(struct rb_node *victim, struct rb_root *tree);

/* 删除节点示例代码 */
struct mytype *data = mysearch(&amp;mytree, "walrus");  // 查找节点位置

if (data) {
    rb_erase(&amp;data-&gt;node, &amp;mytree);  // 从红黑树删除节点
    myfree(data); // 释放结构体内存空间
}
</code></pre>

<p>替换一个已有节点：</p>

<pre><code class="c">void rb_replace_node(struct rb_node *old, struct rb_node *new, struct rb_root *tree);
</code></pre>

<p><code>注意：替换节点不会重新排序，若替换后键值改变了，红黑树就可能不正确了。</code></p>

<h5>2.5 按序遍历红黑树</h5>

<p>提供了 4 个函数用来遍历红黑树（也可以是其它二叉树）：</p>

<pre><code class="c">/* 函数原型 */
struct rb_node *rb_first(struct rb_root *tree);
struct rb_node *rb_last(struct rb_root *tree);
struct rb_node *rb_next(struct rb_node *node);
struct rb_node *rb_prev(struct rb_node *node);

/* 遍历红黑树示例代码 */
struct rb_node *node;
for (node = rb_first(&amp;mytree); node; node = rb_next(node))
    printk("key=%s\n", rb_entry(node, struct mytype, node)-&gt;keystring);
</code></pre>

<h3>3. 扩展的红黑树</h3>

<p>扩展的红黑树在节点中存储了额外的数据，其值根据以该节点为根的子树的所有节点的内容计算得到。这额外的数据可以用来扩展红黑树的功能。红黑树扩展被实现为一个可选的特性，基于基础的红黑树。</p>

<h5>3.1 使用扩展红黑树</h5>

<p>使用扩展红黑树时不直接包含&lt;linux/rbtree.h>，而是包含头文件&lt;linux/rbtree_augmented.h>(已经包含了前者)。</p>

<p>在执行插入节点操作时，我们必须更新到插入节点的路径上的额外数据（因为当红黑树为了平衡而进行结构调整后，路径上的额外数据就可能失效了）。怎么更新额外数据呢？可以用rb_augment_inserted()代替rb_insert_color()，若调整了树则会调用回调函数（由我们提供）来更新受影响的子树上的额外数据。</p>

<p>在执行删除节点操作时，用rb_erase_augmented()代替rb_erase()。也会调用回调函数来更新受影响的子树上的额外数据。</p>

<h5>3.2 回调函数</h5>

<p>这里的回调函数有我们使用者提供，处理对象是红黑树上的额外数据。</p>

<p>回调函数可通过设置struct rb_augment_callbacks来提供，包括三个回调函数：<br/>
- 传递函数：更新某节点和其祖先的额外数据，直到另一指定节点或根（当指定节点为NULL时）。
- 复制函数：拷贝一个节点上的额外数据到第二个节点。<br/>
- 交替函数：拷贝一个节点上的额外数据到第二个节点，并更新以第二个节点为根的子树上的额外数据。</p>

<h5>3.3 应用扩展红黑树构造区间树</h5>

<p>用红黑树可以实现<strong>区间树</strong>。一般情况下，红黑树节点中存放着 key/value 对。那怎么表示区间[lo, hi]？我们可以在节点中增加一个<strong><em>额外信息</em></strong>。如在红黑树节点中存放整型值 lo 作为下界(也是key), 额外的 hi 来表示上界。另外在节点中增加一个<strong><em>额外信息</em></strong> —— 在每个节点中保存该节点的所有后代中最大的 hi(记为__subtree_last)。</p>

<pre><code class="c">struct interval_tree_node *
interval_tree_first_match(struct rb_root *root,
              unsigned long start, unsigned long last)
{
    struct interval_tree_node *node;

    if (!root-&gt;rb_node)
        return NULL;
    node = rb_entry(root-&gt;rb_node, struct interval_tree_node, rb);

    while (true) {
        if (node-&gt;rb.rb_left) {
            struct interval_tree_node *left =
                rb_entry(node-&gt;rb.rb_left, struct interval_tree_node, rb);
            if (left-&gt;__subtree_last &gt;= start) {
                /*
                 * Some nodes in left subtree satisfy Cond2.
                 * Iterate to find the leftmost such node N.
                 * If it also satisfies Cond1, that's the match
                 * we are looking for. Otherwise, there is no
                 * matching interval as nodes to the right of N
                 * can't satisfy Cond1 either.
                 */
                node = left;
                continue;
            }
        }
        if (node-&gt;start &lt;= last) {      /* Cond1 */
            if (node-&gt;last &gt;= start)    /* Cond2 */
                return node;    /* node is leftmost match */
            if (node-&gt;rb.rb_right) {
                node = rb_entry(node-&gt;rb.rb_right,
                    struct interval_tree_node, rb);
                if (node-&gt;__subtree_last &gt;= start)
                    continue;
            }
        }
        return NULL;    /* No match */
    }
}

Insertion/removal are defined using the following augmented callbacks:

static inline unsigned long
compute_subtree_last(struct interval_tree_node *node)
{
    unsigned long max = node-&gt;last, subtree_last;
    if (node-&gt;rb.rb_left) {
        subtree_last = rb_entry(node-&gt;rb.rb_left,
            struct interval_tree_node, rb)-&gt;__subtree_last;
        if (max &lt; subtree_last)
            max = subtree_last;
    }
    if (node-&gt;rb.rb_right) {
        subtree_last = rb_entry(node-&gt;rb.rb_right,
            struct interval_tree_node, rb)-&gt;__subtree_last;
        if (max &lt; subtree_last)
            max = subtree_last;
    }
    return max;
}

static void augment_propagate(struct rb_node *rb, struct rb_node *stop)
{
    while (rb != stop) {
        struct interval_tree_node *node =
            rb_entry(rb, struct interval_tree_node, rb);
        unsigned long subtree_last = compute_subtree_last(node);
        if (node-&gt;__subtree_last == subtree_last)
            break;
        node-&gt;__subtree_last = subtree_last;
        rb = rb_parent(&amp;node-&gt;rb);
    }
}

static void augment_copy(struct rb_node *rb_old, stru，ct rb_node *rb_new)
{
    struct interval_tree_node *old =
        rb_entry(rb_old, struct interval_tree_node, rb);
    struct interval_tree_node *new =
        rb_entry(rb_new, struct interval_tree_node, rb);

    new-&gt;__subtree_last = old-&gt;__subtree_last;
}

static void augment_rotate(struct rb_node *rb_old, struct rb_node *rb_new)
{
    struct interval_tree_node *old =
        rb_entry(rb_old, struct interval_tree_node, rb);
    struct interval_tree_node *new =
        rb_entry(rb_new, struct interval_tree_node, rb);

    new-&gt;__subtree_last = old-&gt;__subtree_last;
    old-&gt;__subtree_last = compute_subtree_last(old);
}

static const struct rb_augment_callbacks augment_callbacks = {
    augment_propagate, augment_copy, augment_rotate
};

void interval_tree_insert(struct interval_tree_node *node,
              struct rb_root *root)
{
    struct rb_node **link = &amp;root-&gt;rb_node, *rb_parent = NULL;
    unsigned long start = node-&gt;start, last = node-&gt;last;
    struct interval_tree_node *parent;

    while (*link) {
        rb_parent = *link;
        parent = rb_entry(rb_parent, struct interval_tree_node, rb);
        if (parent-&gt;__subtree_last &lt; last)
            parent-&gt;__subtree_last = last;
        if (start &lt; parent-&gt;start)
            link = &amp;parent-&gt;rb.rb_left;
        else
            link = &amp;parent-&gt;rb.rb_right;
    }

    node-&gt;__subtree_last = last;
    rb_link_node(&amp;node-&gt;rb, rb_parent, link);
    rb_insert_augmented(&amp;node-&gt;rb, root, &amp;augment_callbacks);
}

void interval_tree_remove(struct interval_tree_node *node,
              struct rb_root *root)
{
    rb_erase_augmented(&amp;node-&gt;rb, root, &amp;augment_callbacks);
}
</code></pre>
]]></content>
  </entry>
  
</feed>
